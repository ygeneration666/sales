ALTER TABLE BANK_MST_SALES ADD COLUMN `VALID` CHAR(1) NULL DEFAULT NULL  AFTER `REMARKS` ;
ALTER TABLE BANK_MST_HIST_SALES ADD COLUMN `VALID` CHAR(1) NULL DEFAULT NULL  AFTER `REMARKS` ;


----
-- MINE TRIGGER
----

DROP TRIGGER IF EXISTS BANK_MST_SALES_INS;
DROP TRIGGER IF EXISTS BANK_MST_SALES_UPD;
DROP TRIGGER IF EXISTS BANK_MST_SALES_DEL;

DELIMITER //
SELECT 'BANK_MST_SALES'//
CREATE TRIGGER BANK_MST_SALES_INS AFTER INSERT ON BANK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.BANK_ID,NEW.ACCOUNT_OWNER_NAME,NEW.ACCOUNT_OWNER_KANA,NEW.BANK_CODE,NEW.BANK_NAME,NEW.STORE_CODE,NEW.STORE_NAME,NEW.DWB_TYPE,NEW.ACCOUNT_NUM,NEW.REMARKS,NEW.VALID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_MST_SALES_UPD AFTER UPDATE ON BANK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.BANK_ID,NEW.ACCOUNT_OWNER_NAME,NEW.ACCOUNT_OWNER_KANA,NEW.BANK_CODE,NEW.BANK_NAME,NEW.STORE_CODE,NEW.STORE_NAME,NEW.DWB_TYPE,NEW.ACCOUNT_NUM,NEW.REMARKS,NEW.VALID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_MST_SALES_DEL AFTER DELETE ON BANK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.BANK_ID,OLD.ACCOUNT_OWNER_NAME,OLD.ACCOUNT_OWNER_KANA,OLD.BANK_CODE,OLD.BANK_NAME,OLD.STORE_CODE,OLD.STORE_NAME,OLD.DWB_TYPE,OLD.ACCOUNT_NUM,OLD.REMARKS,OLD.VALID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

