
-- ユーザマスタに列追加
ALTER TABLE USER_MST_SALES ADD COLUMN FAIL_COUNT 	INT(11) 	NULL DEFAULT NULL  AFTER EXPIRE_DATE ;
ALTER TABLE USER_MST_SALES ADD COLUMN LOCK_FLG 		CHAR(1) 	NULL DEFAULT NULL  AFTER FAIL_COUNT ;
ALTER TABLE USER_MST_SALES ADD COLUMN LOCK_DATETM 	DATETIME 	NULL DEFAULT NULL  AFTER LOCK_FLG ;

ALTER TABLE USER_MST_HIST_SALES ADD COLUMN FAIL_COUNT 	INT(11) 	NULL DEFAULT NULL  AFTER EXPIRE_DATE ;
ALTER TABLE USER_MST_HIST_SALES ADD COLUMN LOCK_FLG 	CHAR(1) 	NULL DEFAULT NULL  AFTER FAIL_COUNT ;
ALTER TABLE USER_MST_HIST_SALES ADD COLUMN LOCK_DATETM 	DATETIME 	NULL DEFAULT NULL  AFTER LOCK_FLG ;

DROP TRIGGER IF EXISTS USER_MST_SALES_INS;
DROP TRIGGER IF EXISTS USER_MST_SALES_UPD;
DROP TRIGGER IF EXISTS USER_MST_SALES_DEL;

DELIMITER //
SELECT 'USER_MST_SALES'//
CREATE TRIGGER USER_MST_SALES_INS AFTER INSERT ON USER_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.USER_ID,NEW.NAME_KNJ,NEW.NAME_KANA,NEW.DEPT_ID,NEW.EMAIL,NEW.PASSWORD,NEW.EXPIRE_DATE,NEW.FAIL_COUNT,NEW.LOCK_FLG,NEW.LOCK_DATETM,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER USER_MST_SALES_UPD AFTER UPDATE ON USER_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.USER_ID,NEW.NAME_KNJ,NEW.NAME_KANA,NEW.DEPT_ID,NEW.EMAIL,NEW.PASSWORD,NEW.EXPIRE_DATE,NEW.FAIL_COUNT,NEW.LOCK_FLG,NEW.LOCK_DATETM,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER USER_MST_SALES_DEL AFTER DELETE ON USER_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.USER_ID,OLD.NAME_KNJ,OLD.NAME_KANA,OLD.DEPT_ID,OLD.EMAIL,OLD.PASSWORD,OLD.EXPIRE_DATE,OLD.FAIL_COUNT,OLD.LOCK_FLG,OLD.LOCK_DATETM,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

-- 自社マスタに列追加
ALTER TABLE MINE_MST_SALES CHANGE COLUMN COMPANY_CEO_TITLE COMPANY_CEO_TITLE VARCHAR(20) NULL DEFAULT NULL  AFTER SAFETY_COEFFICIENT ;
ALTER TABLE MINE_MST_SALES ADD COLUMN TOTAL_FAIL_COUNT 		SMALLINT(6) NULL DEFAULT NULL  AFTER COMPANY_CEO_TITLE ;
ALTER TABLE MINE_MST_SALES ADD COLUMN PASSWORD_HIST_COUNT 	SMALLINT(2) NULL DEFAULT NULL  AFTER TOTAL_FAIL_COUNT;
ALTER TABLE MINE_MST_SALES ADD COLUMN PASSWORD_LENGTH 		SMALLINT(2) NULL DEFAULT NULL  AFTER PASSWORD_HIST_COUNT;
ALTER TABLE MINE_MST_SALES ADD COLUMN PASSWORD_CHAR_TYPE 	CHAR(1) NULL DEFAULT NULL  AFTER PASSWORD_LENGTH ;

ALTER TABLE MINE_MST_HIST_SALES CHANGE COLUMN COMPANY_CEO_TITLE COMPANY_CEO_TITLE VARCHAR(20) NULL DEFAULT NULL  AFTER SAFETY_COEFFICIENT ;
ALTER TABLE MINE_MST_HIST_SALES ADD COLUMN TOTAL_FAIL_COUNT 	SMALLINT(6) NULL DEFAULT NULL  AFTER COMPANY_CEO_TITLE ;
ALTER TABLE MINE_MST_HIST_SALES ADD COLUMN PASSWORD_HIST_COUNT 	SMALLINT(2) NULL DEFAULT NULL  AFTER TOTAL_FAIL_COUNT;
ALTER TABLE MINE_MST_HIST_SALES ADD COLUMN PASSWORD_LENGTH 	SMALLINT(2) NULL DEFAULT NULL  AFTER PASSWORD_HIST_COUNT;
ALTER TABLE MINE_MST_HIST_SALES ADD COLUMN PASSWORD_CHAR_TYPE 	CHAR(1) NULL DEFAULT NULL  AFTER PASSWORD_LENGTH ;

DROP TRIGGER IF EXISTS MINE_MST_SALES_INS;
DROP TRIGGER IF EXISTS MINE_MST_SALES_UPD;
DROP TRIGGER IF EXISTS MINE_MST_SALES_DEL;

DELIMITER //
SELECT 'MINE_MST_SALES'//
CREATE TRIGGER MINE_MST_SALES_INS AFTER INSERT ON MINE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.COMPANY_NAME,NEW.COMPANY_KANA,NEW.COMPANY_ABBR,NEW.COMPANY_CEO_NAME,NEW.COMPANY_CEO_TITLE,NEW.COMPANY_ZIP_CODE,NEW.COMPANY_ADDRESS_1,NEW.COMPANY_ADDRESS_2,NEW.COMPANY_TEL,NEW.COMPANY_FAX,NEW.COMPANY_EMAIL,NEW.COMPANY_WEB_SITE,NEW.CUTOFF_GROUP,NEW.CLOSE_MONTH,NEW.STOCK_HOLD_DAYS,NEW.STOCK_HOLD_TERM_CALC_CATEGORY,NEW.MIN_PO_LOT_CALC_DAYS,NEW.MIN_PO_LOT_NUM,NEW.MIN_PO_NUM,NEW.MAX_PO_NUM_CALC_DAYS,NEW.TAX_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRODUCT_FRACT_CATEGORY,NEW.UNIT_PRICE_DEC_ALIGNMENT,NEW.NUM_DEC_ALIGNMENT,NEW.PASSWORD_VALID_DAYS,NEW.LOGO_IMG_PATH,NEW.REMARKS,NEW.TAX_SHIFT_CATEGORY,NEW.STATS_DEC_ALIGNMENT,NEW.FIND_TERM_INIT_DAYS,NEW.TAX_FRACT_CATEGORY,NEW.DELIVERY_CUST_ID,NEW.DEFICIENCY_RATE,NEW.MAX_ENTRUST_PO_TIMELAG,NEW.SAFETY_COEFFICIENT,NEW.TOTAL_FAIL_COUNT,NEW.PASSWORD_HIST_COUNT,NEW.PASSWORD_LENGTH,NEW.PASSWORD_CHAR_TYPE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER MINE_MST_SALES_UPD AFTER UPDATE ON MINE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.COMPANY_NAME,NEW.COMPANY_KANA,NEW.COMPANY_ABBR,NEW.COMPANY_CEO_NAME,NEW.COMPANY_CEO_TITLE,NEW.COMPANY_ZIP_CODE,NEW.COMPANY_ADDRESS_1,NEW.COMPANY_ADDRESS_2,NEW.COMPANY_TEL,NEW.COMPANY_FAX,NEW.COMPANY_EMAIL,NEW.COMPANY_WEB_SITE,NEW.CUTOFF_GROUP,NEW.CLOSE_MONTH,NEW.STOCK_HOLD_DAYS,NEW.STOCK_HOLD_TERM_CALC_CATEGORY,NEW.MIN_PO_LOT_CALC_DAYS,NEW.MIN_PO_LOT_NUM,NEW.MIN_PO_NUM,NEW.MAX_PO_NUM_CALC_DAYS,NEW.TAX_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRODUCT_FRACT_CATEGORY,NEW.UNIT_PRICE_DEC_ALIGNMENT,NEW.NUM_DEC_ALIGNMENT,NEW.PASSWORD_VALID_DAYS,NEW.LOGO_IMG_PATH,NEW.REMARKS,NEW.TAX_SHIFT_CATEGORY,NEW.STATS_DEC_ALIGNMENT,NEW.FIND_TERM_INIT_DAYS,NEW.TAX_FRACT_CATEGORY,NEW.DELIVERY_CUST_ID,NEW.DEFICIENCY_RATE,NEW.MAX_ENTRUST_PO_TIMELAG,NEW.SAFETY_COEFFICIENT,NEW.TOTAL_FAIL_COUNT,NEW.PASSWORD_HIST_COUNT,NEW.PASSWORD_LENGTH,NEW.PASSWORD_CHAR_TYPE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER MINE_MST_SALES_DEL AFTER DELETE ON MINE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.COMPANY_NAME,OLD.COMPANY_KANA,OLD.COMPANY_ABBR,OLD.COMPANY_CEO_NAME,OLD.COMPANY_CEO_TITLE,OLD.COMPANY_ZIP_CODE,OLD.COMPANY_ADDRESS_1,OLD.COMPANY_ADDRESS_2,OLD.COMPANY_TEL,OLD.COMPANY_FAX,OLD.COMPANY_EMAIL,OLD.COMPANY_WEB_SITE,OLD.CUTOFF_GROUP,OLD.CLOSE_MONTH,OLD.STOCK_HOLD_DAYS,OLD.STOCK_HOLD_TERM_CALC_CATEGORY,OLD.MIN_PO_LOT_CALC_DAYS,OLD.MIN_PO_LOT_NUM,OLD.MIN_PO_NUM,OLD.MAX_PO_NUM_CALC_DAYS,OLD.TAX_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.PRODUCT_FRACT_CATEGORY,OLD.UNIT_PRICE_DEC_ALIGNMENT,OLD.NUM_DEC_ALIGNMENT,OLD.PASSWORD_VALID_DAYS,OLD.LOGO_IMG_PATH,OLD.REMARKS,OLD.TAX_SHIFT_CATEGORY,OLD.STATS_DEC_ALIGNMENT,OLD.FIND_TERM_INIT_DAYS,OLD.TAX_FRACT_CATEGORY,OLD.DELIVERY_CUST_ID,OLD.DEFICIENCY_RATE,OLD.MAX_ENTRUST_PO_TIMELAG,OLD.SAFETY_COEFFICIENT,OLD.TOTAL_FAIL_COUNT,OLD.PASSWORD_HIST_COUNT,OLD.PASSWORD_LENGTH,OLD.PASSWORD_CHAR_TYPE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;



-- 消費税率カラムを各トランザクションテーブルに追加
alter table ESTIMATE_SHEET_TRN_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;
alter table ESTIMATE_SHEET_TRN_HIST_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;

alter table RO_SLIP_TRN_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;
alter table RO_SLIP_TRN_HIST_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;

alter table SALES_SLIP_TRN_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;
alter table SALES_SLIP_TRN_HIST_SALES add CTAX_RATE decimal(6,3) default null after CTAX_PRICE_TOTAL;

alter table PO_SLIP_TRN_SALES add CTAX_RATE decimal(6,3) default null after CTAX_TOTAL;
alter table PO_SLIP_TRN_HIST_SALES add CTAX_RATE decimal(6,3) default null after CTAX_TOTAL;

alter table SUPPLIER_SLIP_TRN_SALES add CTAX_RATE decimal(6,3) default null after CTAX_TOTAL;
alter table SUPPLIER_SLIP_TRN_HIST_SALES add CTAX_RATE decimal(6,3) default null after CTAX_TOTAL;


DROP TRIGGER IF EXISTS ESTIMATE_SHEET_TRN_SALES_INS;
DROP TRIGGER IF EXISTS ESTIMATE_SHEET_TRN_SALES_UPD;
DROP TRIGGER IF EXISTS ESTIMATE_SHEET_TRN_SALES_DEL;

DELIMITER //
SELECT 'ESTIMATE_SHEET_TRN_SALES'//
CREATE TRIGGER ESTIMATE_SHEET_TRN_SALES_INS AFTER INSERT ON ESTIMATE_SHEET_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ESTIMATE_SHEET_ID,NEW.ESTIMATE_ANNUAL,NEW.ESTIMATE_MONTHLY,NEW.ESTIMATE_YM,NEW.ESTIMATE_DATE,NEW.DELIVERY_INFO,NEW.VALID_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.TITLE,NEW.ESTIMATE_CONDITION,NEW.SUBMIT_NAME,NEW.SUBMIT_PRE_CATEGORY,NEW.SUBMIT_PRE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_NAME,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.ESTIMATE_TOTAL,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.MEMO,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_SHEET_TRN_SALES_UPD AFTER UPDATE ON ESTIMATE_SHEET_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ESTIMATE_SHEET_ID,NEW.ESTIMATE_ANNUAL,NEW.ESTIMATE_MONTHLY,NEW.ESTIMATE_YM,NEW.ESTIMATE_DATE,NEW.DELIVERY_INFO,NEW.VALID_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.TITLE,NEW.ESTIMATE_CONDITION,NEW.SUBMIT_NAME,NEW.SUBMIT_PRE_CATEGORY,NEW.SUBMIT_PRE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_NAME,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.ESTIMATE_TOTAL,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.MEMO,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_SHEET_TRN_SALES_DEL AFTER DELETE ON ESTIMATE_SHEET_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ESTIMATE_SHEET_ID,OLD.ESTIMATE_ANNUAL,OLD.ESTIMATE_MONTHLY,OLD.ESTIMATE_YM,OLD.ESTIMATE_DATE,OLD.DELIVERY_INFO,OLD.VALID_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.TITLE,OLD.ESTIMATE_CONDITION,OLD.SUBMIT_NAME,OLD.SUBMIT_PRE_CATEGORY,OLD.SUBMIT_PRE,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.DELIVERY_NAME,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.COST_TOTAL,OLD.RETAIL_PRICE_TOTAL,OLD.ESTIMATE_TOTAL,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.MEMO,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DROP TRIGGER IF EXISTS RO_SLIP_TRN_SALES_INS;
DROP TRIGGER IF EXISTS RO_SLIP_TRN_SALES_UPD;
DROP TRIGGER IF EXISTS RO_SLIP_TRN_SALES_DEL;

DELIMITER //
SELECT 'RO_SLIP_TRN_SALES'//
CREATE TRIGGER RO_SLIP_TRN_SALES_INS AFTER INSERT ON RO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RO_SLIP_ID,NEW.STATUS,NEW.RO_ANNUAL,NEW.RO_MONTHLY,NEW.RO_YM,NEW.RO_DATE,NEW.SHIP_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.ESTIMATE_SHEET_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_COUNT,NEW.COD_SC,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_SLIP_TRN_SALES_UPD AFTER UPDATE ON RO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RO_SLIP_ID,NEW.STATUS,NEW.RO_ANNUAL,NEW.RO_MONTHLY,NEW.RO_YM,NEW.RO_DATE,NEW.SHIP_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.ESTIMATE_SHEET_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_COUNT,NEW.COD_SC,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_SLIP_TRN_SALES_DEL AFTER DELETE ON RO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RO_SLIP_ID,OLD.STATUS,OLD.RO_ANNUAL,OLD.RO_MONTHLY,OLD.RO_YM,OLD.RO_DATE,OLD.SHIP_DATE,OLD.DELIVERY_DATE,OLD.RECEPT_NO,OLD.CUSTOMER_SLIP_NO,OLD.SALES_CM_CATEGORY,OLD.CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.ESTIMATE_SHEET_ID,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.COST_TOTAL,OLD.RETAIL_PRICE_TOTAL,OLD.PRICE_TOTAL,OLD.PRINT_COUNT,OLD.COD_SC,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.DC_CATEGORY,OLD.DC_NAME,OLD.DC_TIMEZONE_CATEGORY,OLD.DC_TIMEZONE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DROP TRIGGER IF EXISTS SALES_SLIP_TRN_SALES_INS;
DROP TRIGGER IF EXISTS SALES_SLIP_TRN_SALES_UPD;
DROP TRIGGER IF EXISTS SALES_SLIP_TRN_SALES_DEL;

DELIMITER //
SELECT 'SALES_SLIP_TRN_SALES'//
CREATE TRIGGER SALES_SLIP_TRN_SALES_INS AFTER INSERT ON SALES_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SALES_SLIP_ID,NEW.STATUS,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.BILL_ID,NEW.SALES_BILL_ID,NEW.BILL_DATE,NEW.BILL_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.SALES_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATEGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.GM_TOTAL,NEW.COD_SC,NEW.BILL_PRINT_COUNT,NEW.DELIVERY_PRINT_COUNT,NEW.TEMP_DELIVERY_PRINT_COUNT,NEW.SHIPPING_PRINT_COUNT,NEW.SI_PRINT_COUNT,NEW.ESTIMATE_PRINT_COUNT,NEW.DELBOR_PRINT_COUNT,NEW.PO_PRINT_COUNT,NEW.ADLABEL,NEW.DISCLAIMER,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.ART_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_SLIP_TRN_SALES_UPD AFTER UPDATE ON SALES_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SALES_SLIP_ID,NEW.STATUS,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.BILL_ID,NEW.SALES_BILL_ID,NEW.BILL_DATE,NEW.BILL_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.SALES_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATEGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.GM_TOTAL,NEW.COD_SC,NEW.BILL_PRINT_COUNT,NEW.DELIVERY_PRINT_COUNT,NEW.TEMP_DELIVERY_PRINT_COUNT,NEW.SHIPPING_PRINT_COUNT,NEW.SI_PRINT_COUNT,NEW.ESTIMATE_PRINT_COUNT,NEW.DELBOR_PRINT_COUNT,NEW.PO_PRINT_COUNT,NEW.ADLABEL,NEW.DISCLAIMER,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.ART_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_SLIP_TRN_SALES_DEL AFTER DELETE ON SALES_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SALES_SLIP_ID,OLD.STATUS,OLD.SALES_ANNUAL,OLD.SALES_MONTHLY,OLD.SALES_YM,OLD.RO_SLIP_ID,OLD.BILL_ID,OLD.SALES_BILL_ID,OLD.BILL_DATE,OLD.BILL_CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.BILL_CUTOFF_DATE,OLD.BILL_CUTOFF_PDATE,OLD.SALES_DATE,OLD.DELIVERY_DATE,OLD.RECEPT_NO,OLD.CUSTOMER_SLIP_NO,OLD.SALES_CM_CATEGORY,OLD.SALES_CUTOFF_DATE,OLD.SALES_CUTOFF_PDATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.PICKING_REMARKS,OLD.DC_CATEGORY,OLD.DC_NAME,OLD.DC_TIMEZONE_CATEGORY,OLD.DC_TIMEZONE,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.CUSTOMER_OFFICE_NAME,OLD.CUSTOMER_OFFICE_KANA,OLD.CUSTOMER_ABBR,OLD.CUSTOMER_DEPT_NAME,OLD.CUSTOMER_ZIP_CODE,OLD.CUSTOMER_ADDRESS_1,OLD.CUSTOMER_ADDRESS_2,OLD.CUSTOMER_PC_POST,OLD.CUSTOMER_PC_NAME,OLD.CUSTOMER_PC_KANA,OLD.CUSTOMER_PC_PRE_CATEGORY,OLD.CUSTOMER_PC_PRE,OLD.CUSTOMER_TEL,OLD.CUSTOMER_FAX,OLD.CUSTOMER_EMAIL,OLD.CUSTOMER_URL,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.BA_CODE,OLD.BA_NAME,OLD.BA_KANA,OLD.BA_OFFICE_NAME,OLD.BA_OFFICE_KANA,OLD.BA_DEPT_NAME,OLD.BA_ZIP_CODE,OLD.BA_ADDRESS_1,OLD.BA_ADDRESS_2,OLD.BA_PC_NAME,OLD.BA_PC_KANA,OLD.BA_PC_PRE_CATEGORY,OLD.BA_PC_PRE,OLD.BA_TEL,OLD.BA_FAX,OLD.BA_EMAIL,OLD.BA_URL,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.PRICE_TOTAL,OLD.GM_TOTAL,OLD.COD_SC,OLD.BILL_PRINT_COUNT,OLD.DELIVERY_PRINT_COUNT,OLD.TEMP_DELIVERY_PRINT_COUNT,OLD.SHIPPING_PRINT_COUNT,OLD.SI_PRINT_COUNT,OLD.ESTIMATE_PRINT_COUNT,OLD.DELBOR_PRINT_COUNT,OLD.PO_PRINT_COUNT,OLD.ADLABEL,OLD.DISCLAIMER,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.ART_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DROP TRIGGER IF EXISTS PO_SLIP_TRN_SALES_INS;
DROP TRIGGER IF EXISTS PO_SLIP_TRN_SALES_UPD;
DROP TRIGGER IF EXISTS PO_SLIP_TRN_SALES_DEL;

DELIMITER //
SELECT 'PO_SLIP_TRN_SALES'//
CREATE TRIGGER PO_SLIP_TRN_SALES_INS AFTER INSERT ON PO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PO_SLIP_ID,NEW.STATUS,NEW.PO_DATE,NEW.PO_ANNUAL,NEW.PO_MONTHLY,NEW.PO_YM,NEW.DELIVERY_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_PRE,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.TRANSPORT_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.RATE_ID,NEW.SUPPLIER_CM_CATEGORY,NEW.PRICE_TOTAL,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.FE_PRICE_TOTAL,NEW.PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_SLIP_TRN_SALES_UPD AFTER UPDATE ON PO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PO_SLIP_ID,NEW.STATUS,NEW.PO_DATE,NEW.PO_ANNUAL,NEW.PO_MONTHLY,NEW.PO_YM,NEW.DELIVERY_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_PRE,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.TRANSPORT_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.RATE_ID,NEW.SUPPLIER_CM_CATEGORY,NEW.PRICE_TOTAL,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.FE_PRICE_TOTAL,NEW.PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_SLIP_TRN_SALES_DEL AFTER DELETE ON PO_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PO_SLIP_ID,OLD.STATUS,OLD.PO_DATE,OLD.PO_ANNUAL,OLD.PO_MONTHLY,OLD.PO_YM,OLD.DELIVERY_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.SUPPLIER_KANA,OLD.SUPPLIER_ABBR,OLD.SUPPLIER_DEPT_NAME,OLD.SUPPLIER_ZIP_CODE,OLD.SUPPLIER_ADDRESS_1,OLD.SUPPLIER_ADDRESS_2,OLD.SUPPLIER_PC_NAME,OLD.SUPPLIER_PC_KANA,OLD.SUPPLIER_PC_PRE_CATEGORY,OLD.SUPPLIER_PC_PRE,OLD.SUPPLIER_PC_POST,OLD.SUPPLIER_TEL,OLD.SUPPLIER_FAX,OLD.SUPPLIER_EMAIL,OLD.SUPPLIER_URL,OLD.TRANSPORT_CATEGORY,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.RATE_ID,OLD.SUPPLIER_CM_CATEGORY,OLD.PRICE_TOTAL,OLD.CTAX_TOTAL,OLD.CTAX_RATE,OLD.FE_PRICE_TOTAL,OLD.PRINT_COUNT,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DROP TRIGGER IF EXISTS SUPPLIER_SLIP_TRN_SALES_INS;
DROP TRIGGER IF EXISTS SUPPLIER_SLIP_TRN_SALES_UPD;
DROP TRIGGER IF EXISTS SUPPLIER_SLIP_TRN_SALES_DEL;

DELIMITER //
SELECT 'SUPPLIER_SLIP_TRN_SALES'//
CREATE TRIGGER SUPPLIER_SLIP_TRN_SALES_INS AFTER INSERT ON SUPPLIER_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SUPPLIER_SLIP_ID,NEW.STATUS,NEW.SUPPLIER_DATE,NEW.SUPPLIER_ANNUAL,NEW.SUPPLIER_MONTHLY,NEW.SUPPLIER_YM,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_CM_CATEGORY,NEW.DELIVERY_DATE,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.PAYMENT_SLIP_ID,NEW.SUPPLIER_PAYMENT_DATE,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_SLIP_TRN_SALES_UPD AFTER UPDATE ON SUPPLIER_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SUPPLIER_SLIP_ID,NEW.STATUS,NEW.SUPPLIER_DATE,NEW.SUPPLIER_ANNUAL,NEW.SUPPLIER_MONTHLY,NEW.SUPPLIER_YM,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_CM_CATEGORY,NEW.DELIVERY_DATE,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.PAYMENT_SLIP_ID,NEW.SUPPLIER_PAYMENT_DATE,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_SLIP_TRN_SALES_DEL AFTER DELETE ON SUPPLIER_SLIP_TRN_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SUPPLIER_SLIP_ID,OLD.STATUS,OLD.SUPPLIER_DATE,OLD.SUPPLIER_ANNUAL,OLD.SUPPLIER_MONTHLY,OLD.SUPPLIER_YM,OLD.USER_ID,OLD.USER_NAME,OLD.SUPPLIER_SLIP_CATEGORY,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.SUPPLIER_CM_CATEGORY,OLD.DELIVERY_DATE,OLD.RATE_ID,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_TOTAL,OLD.CTAX_RATE,OLD.PRICE_TOTAL,OLD.FE_PRICE_TOTAL,OLD.PO_SLIP_ID,OLD.PAYMENT_SLIP_ID,OLD.SUPPLIER_PAYMENT_DATE,OLD.PAYMENT_CUTOFF_DATE,OLD.PAYMENT_PDATE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


