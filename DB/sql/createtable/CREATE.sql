-- テーブル作成
SELECT 'SEQ_MAKER_XXXXX';
CREATE TABLE IF NOT EXISTS SEQ_MAKER_XXXXX
(
  TABLE_NAME  VARCHAR(40)   ,
  ID  INT UNSIGNED  DEFAULT  '0' ,
  WARNING_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    TABLE_NAME
  )
) ENGINE=INNODB;

SELECT 'SEQ_MAKER_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SEQ_MAKER_HIST_XXXXX
(
  TABLE_NAME  VARCHAR(40)   ,
  ID  INT UNSIGNED  DEFAULT  '0' ,
  WARNING_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    TABLE_NAME
  )
) ENGINE=INNODB;

SELECT 'MINE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS MINE_MST_XXXXX
(
  COMPANY_NAME  VARCHAR(60)  DEFAULT  ' ' ,
  COMPANY_KANA  VARCHAR(60)  DEFAULT  ' ' ,
  COMPANY_ABBR  VARCHAR(14)  DEFAULT  ' ' ,
  COMPANY_CEO_NAME  VARCHAR(14)  DEFAULT  ' ' ,
  COMPANY_ZIP_CODE  CHAR(8)  DEFAULT  ' ' ,
  COMPANY_ADDRESS_1  VARCHAR(50)  DEFAULT  ' ' ,
  COMPANY_ADDRESS_2  VARCHAR(50)   ,
  COMPANY_TEL  CHAR(15)   ,
  COMPANY_FAX  CHAR(15)   ,
  COMPANY_EMAIL  VARCHAR(255)   ,
  COMPANY_WEB_SITE  VARCHAR(60)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  CLOSE_MONTH  CHAR(2)   ,
  STOCK_HOLD_DAYS  SMALLINT   ,
  STOCK_HOLD_TERM_CALC_CATEGORY  CHAR(2)   ,
  MIN_PO_LOT_CALC_DAYS  SMALLINT   ,
  MIN_PO_LOT_NUM  SMALLINT   ,
  MIN_PO_NUM  SMALLINT   ,
  MAX_PO_NUM_CALC_DAYS  SMALLINT   ,
  TAX_CATEGORY  CHAR(1)   ,
  PRICE_FRACT_CATEGORY  CHAR(1)   ,
  PRODUCT_FRACT_CATEGORY  CHAR(1)   ,
  UNIT_PRICE_DEC_ALIGNMENT  SMALLINT   ,
  NUM_DEC_ALIGNMENT  SMALLINT   ,
  PASSWORD_VALID_DAYS  SMALLINT   ,
  LOGO_IMG_PATH  VARCHAR(256)   ,
  REMARKS  CHAR(120)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  STATS_DEC_ALIGNMENT  SMALLINT   ,
  FIND_TERM_INIT_DAYS  SMALLINT   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  DELIVERY_CUST_ID  VARCHAR(20)   ,
  DEFICIENCY_RATE  DECIMAL(6,3)   ,
  MAX_ENTRUST_PO_TIMELAG  SMALLINT   ,
  SAFETY_COEFFICIENT  DECIMAL(6,3)   ,
  COMPANY_CEO_TITLE VARCHAR(20),
  TOTAL_FAIL_COUNT SMALLINT(6),
  PASSWORD_HIST_COUNT SMALLINT(2),
  PASSWORD_LENGTH SMALLINT(2),
  PASSWORD_CHAR_TYPE CHAR(1),
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)  
) ENGINE=INNODB;

SELECT 'MINE_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS MINE_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  COMPANY_NAME  VARCHAR(60)  DEFAULT  ' ' ,
  COMPANY_KANA  VARCHAR(60)  DEFAULT  ' ' ,
  COMPANY_ABBR  VARCHAR(14)  DEFAULT  ' ' ,
  COMPANY_CEO_NAME  VARCHAR(14)  DEFAULT  ' ' ,
  COMPANY_ZIP_CODE  CHAR(8)  DEFAULT  ' ' ,
  COMPANY_ADDRESS_1  VARCHAR(50)  DEFAULT  ' ' ,
  COMPANY_ADDRESS_2  VARCHAR(50)   ,
  COMPANY_TEL  CHAR(15)   ,
  COMPANY_FAX  CHAR(15)   ,
  COMPANY_EMAIL  VARCHAR(255)   ,
  COMPANY_WEB_SITE  VARCHAR(60)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  CLOSE_MONTH  CHAR(2)   ,
  STOCK_HOLD_DAYS  SMALLINT   ,
  STOCK_HOLD_TERM_CALC_CATEGORY  CHAR(2)   ,
  MIN_PO_LOT_CALC_DAYS  SMALLINT   ,
  MIN_PO_LOT_NUM  SMALLINT   ,
  MIN_PO_NUM  SMALLINT   ,
  MAX_PO_NUM_CALC_DAYS  SMALLINT   ,
  TAX_CATEGORY  CHAR(1)   ,
  PRICE_FRACT_CATEGORY  CHAR(1)   ,
  PRODUCT_FRACT_CATEGORY  CHAR(1)   ,
  UNIT_PRICE_DEC_ALIGNMENT  SMALLINT   ,
  NUM_DEC_ALIGNMENT  SMALLINT   ,
  PASSWORD_VALID_DAYS  SMALLINT   ,
  LOGO_IMG_PATH  VARCHAR(256)   ,
  REMARKS  CHAR(120)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  STATS_DEC_ALIGNMENT  SMALLINT   ,
  FIND_TERM_INIT_DAYS  SMALLINT   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  DELIVERY_CUST_ID  VARCHAR(20)   ,
  DEFICIENCY_RATE  DECIMAL(6,3)   ,
  MAX_ENTRUST_PO_TIMELAG  SMALLINT   ,
  SAFETY_COEFFICIENT  DECIMAL(6,3)   ,
  COMPANY_CEO_TITLE VARCHAR(20),
  TOTAL_FAIL_COUNT SMALLINT(6),
  PASSWORD_HIST_COUNT SMALLINT(2),
  PASSWORD_LENGTH SMALLINT(2),
  PASSWORD_CHAR_TYPE CHAR(1),
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_MST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_MST_XXXXX
(
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  PRODUCT_NAME  VARCHAR(60)   NOT NULL,
  PRODUCT_KANA  VARCHAR(60)   ,
  ONLINE_PCODE  VARCHAR(50)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  RACK_CODE  VARCHAR(10)   ,
  SUPPLIER_PRICE_YEN  DECIMAL(12,3)   ,
  SUPPLIER_PRICE_DOL  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(12,3)   ,
  SO_RATE  DECIMAL(6,3)   ,
  UNIT_CATEGORY  CHAR(2)   ,
  PACK_QUANTITY  SMALLINT   ,
  JAN_PCODE  VARCHAR(13)   ,
  WIDTH  FLOAT   ,
  WIDTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  DEPTH  FLOAT   ,
  DEPTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  HEIGHT  FLOAT   ,
  HEIGHT_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  WEIGHT  FLOAT(15)   ,
  WEIGHT_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  LENGTH  FLOAT(15)   ,
  LENGTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  PO_LOT  DECIMAL(12,3)   ,
  LOT_UPD_FLAG  SMALLINT   ,
  LEAD_TIME  INT   ,
  PO_NUM  INT   ,
  PO_UPD_FLAG  SMALLINT   ,
  AVG_SHIP_COUNT  INT   ,
  MAX_STOCK_NUM  INT   ,
  STOCK_UPD_FLAG  SMALLINT   ,
  TERM_SHIP_NUM  INT   ,
  MAX_PO_NUM  INT   ,
  MAX_PO_UPD_FLAG  SMALLINT   ,
  FRACT_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  STOCK_CTL_CATEGORY  VARCHAR(1)   ,
  STOCK_ASSES_CATEGORY  VARCHAR(1)   ,
  PRODUCT_CATEGORY  VARCHAR(1)   ,
  PRODUCT_1  VARCHAR(4)   ,
  PRODUCT_2  VARCHAR(4)   ,
  PRODUCT_3  VARCHAR(4)   ,
  RO_MAX_NUM  SMALLINT   ,
  PRODUCT_RANK  VARCHAR(2)   ,
  SET_TYPE_CATEGORY  VARCHAR(1)   ,
  PRODUCT_STATUS_CATEGORY  VARCHAR(2)   ,
  PRODUCT_STOCK_CATEGORY  VARCHAR(2)   ,
  PRODUCT_PURVAY_CATEGORY  VARCHAR(2)   ,
  PRODUCT_STANDARD_CATEGORY  VARCHAR(2)   ,
  CORE_NUM  VARCHAR(5)   ,
  NUM_1  SMALLINT   ,
  NUM_2  SMALLINT   ,
  NUM_3  SMALLINT   ,
  NUM_4  SMALLINT   ,
  NUM_5  SMALLINT   ,
  DEC_1  FLOAT   ,
  DEC_2  FLOAT   ,
  DEC_3  FLOAT   ,
  DEC_4  FLOAT   ,
  DEC_5  FLOAT   ,
  DISCARD_DATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  LAST_RO_DATE  DATE   ,
  SALES_STANDARD_DEVIATION  DECIMAL(12,6)   ,
  MINE_SAFETY_STOCK  INT   ,
  MINE_SAFETY_STOCK_UPD_FLAG  SMALLINT   ,
  ENTRUST_SAFETY_STOCK  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PRODUCT_CODE
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  PRODUCT_NAME  VARCHAR(60)   NOT NULL,
  PRODUCT_KANA  VARCHAR(60)   ,
  ONLINE_PCODE  VARCHAR(50)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  RACK_CODE  VARCHAR(10)   ,
  SUPPLIER_PRICE_YEN  DECIMAL(12,3)   ,
  SUPPLIER_PRICE_DOL  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(12,3)   ,
  SO_RATE  DECIMAL(6,3)   ,
  UNIT_CATEGORY  CHAR(2)   ,
  PACK_QUANTITY  SMALLINT   ,
  JAN_PCODE  VARCHAR(13)   ,
  WIDTH  FLOAT   ,
  WIDTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  DEPTH  FLOAT   ,
  DEPTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  HEIGHT  FLOAT   ,
  HEIGHT_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  WEIGHT  FLOAT(15)   ,
  WEIGHT_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  LENGTH  FLOAT(15)   ,
  LENGTH_UNIT_SIZE_CATEGORY  VARCHAR(2)   ,
  PO_LOT  DECIMAL(12,3)   ,
  LOT_UPD_FLAG  SMALLINT   ,
  LEAD_TIME  INT   ,
  PO_NUM  INT   ,
  PO_UPD_FLAG  SMALLINT   ,
  AVG_SHIP_COUNT  INT   ,
  MAX_STOCK_NUM  INT   ,
  STOCK_UPD_FLAG  SMALLINT   ,
  TERM_SHIP_NUM  INT   ,
  MAX_PO_NUM  INT   ,
  MAX_PO_UPD_FLAG  SMALLINT   ,
  FRACT_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  STOCK_CTL_CATEGORY  VARCHAR(1)   ,
  STOCK_ASSES_CATEGORY  VARCHAR(1)   ,
  PRODUCT_CATEGORY  VARCHAR(1)   ,
  PRODUCT_1  VARCHAR(4)   ,
  PRODUCT_2  VARCHAR(4)   ,
  PRODUCT_3  VARCHAR(4)   ,
  RO_MAX_NUM  SMALLINT   ,
  PRODUCT_RANK  VARCHAR(2)   ,
  SET_TYPE_CATEGORY  VARCHAR(1)   ,
  PRODUCT_STATUS_CATEGORY  VARCHAR(2)   ,
  PRODUCT_STOCK_CATEGORY  VARCHAR(2)   ,
  PRODUCT_PURVAY_CATEGORY  VARCHAR(2)   ,
  PRODUCT_STANDARD_CATEGORY  VARCHAR(2)   ,
  CORE_NUM  VARCHAR(5)   ,
  NUM_1  SMALLINT   ,
  NUM_2  SMALLINT   ,
  NUM_3  SMALLINT   ,
  NUM_4  SMALLINT   ,
  NUM_5  SMALLINT   ,
  DEC_1  FLOAT   ,
  DEC_2  FLOAT   ,
  DEC_3  FLOAT   ,
  DEC_4  FLOAT   ,
  DEC_5  FLOAT   ,
  DISCARD_DATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  LAST_RO_DATE  DATE   ,
  SALES_STANDARD_DEVIATION  DECIMAL(12,6)   ,
  MINE_SAFETY_STOCK  INT   ,
  MINE_SAFETY_STOCK_UPD_FLAG  SMALLINT   ,
  ENTRUST_SAFETY_STOCK  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_CLASS_MST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_CLASS_MST_XXXXX
(
  CLASS_CODE_1  VARCHAR(4)   NOT NULL,
  CLASS_CODE_2  VARCHAR(4)   NOT NULL,
  CLASS_CODE_3  VARCHAR(4)   NOT NULL,
  CLASS_NAME  VARCHAR(250)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    CLASS_CODE_1,
    CLASS_CODE_2,
    CLASS_CODE_3
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_CLASS_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_CLASS_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  CLASS_CODE_1  VARCHAR(4)   NOT NULL,
  CLASS_CODE_2  VARCHAR(4)   NOT NULL,
  CLASS_CODE_3  VARCHAR(4)   NOT NULL,
  CLASS_NAME  VARCHAR(250)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_SET_MST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_SET_MST_XXXXX
(
  SET_PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SET_PRODUCT_CODE,
    PRODUCT_CODE
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_SET_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_SET_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SET_PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'RACK_MST_XXXXX';
CREATE TABLE IF NOT EXISTS RACK_MST_XXXXX
(
  WAREHOUSE_CODE  VARCHAR(10)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   NOT NULL,
  RACK_CATEGORY  VARCHAR(1)   NOT NULL,
  MULTI_FLAG  CHAR(1)   NOT NULL,
  ZIP_CODE  CHAR(8)   ,
  ADDRESS_1  VARCHAR(50)   ,
  ADDRESS_2  VARCHAR(50)   ,
  RACK_PC_NAME  VARCHAR(60)   ,
  RACK_TEL  CHAR(15)   ,
  RACK_FAX  CHAR(15)   ,
  RACK_EMAIL  VARCHAR(255)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RACK_CODE
  )
) ENGINE=INNODB;

SELECT 'RACK_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS RACK_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  WAREHOUSE_CODE  VARCHAR(10)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   NOT NULL,
  RACK_CATEGORY  VARCHAR(1)   NOT NULL,
  MULTI_FLAG  CHAR(1)   NOT NULL,
  ZIP_CODE  CHAR(8)   ,
  ADDRESS_1  VARCHAR(50)   ,
  ADDRESS_2  VARCHAR(50)   ,
  RACK_PC_NAME  VARCHAR(60)   ,
  RACK_TEL  CHAR(15)   ,
  RACK_FAX  CHAR(15)   ,
  RACK_EMAIL  VARCHAR(255)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'WAREHOUSE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS WAREHOUSE_MST_XXXXX
(
  WAREHOUSE_CODE  VARCHAR(10)  NOT NULL  ,
  WAREHOUSE_NAME  VARCHAR(60)  NOT NULL ,
  WAREHOUSE_ZIP_CODE  CHAR(8)  ,
  WAREHOUSE_ADDRESS_1  VARCHAR(50)   ,
  WAREHOUSE_ADDRESS_2  VARCHAR(50)   ,
  WAREHOUSE_TEL  CHAR(15)   ,
  WAREHOUSE_FAX  CHAR(15)   ,
  MANAGER_NAME  VARCHAR(60) ,
  MANAGER_KANA  VARCHAR(60) ,
  MANAGER_TEL  CHAR(15)   ,
  MANAGER_FAX  CHAR(15)   ,
  MANAGER_EMAIL  VARCHAR(60)   ,
  WAREHOUSE_STATE  VARCHAR(10)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    WAREHOUSE_CODE
  )
) ENGINE=INNODB;

SELECT 'WAREHOUSE_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS WAREHOUSE_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  WAREHOUSE_CODE  VARCHAR(10)  NOT NULL  ,
  WAREHOUSE_NAME  VARCHAR(60)  NOT NULL ,
  WAREHOUSE_ZIP_CODE  CHAR(8)  ,
  WAREHOUSE_ADDRESS_1  VARCHAR(50)   ,
  WAREHOUSE_ADDRESS_2  VARCHAR(50)   ,
  WAREHOUSE_TEL  CHAR(15)   ,
  WAREHOUSE_FAX  CHAR(15)   ,
  MANAGER_NAME  VARCHAR(60) ,
  MANAGER_KANA  VARCHAR(60) ,
  MANAGER_TEL  CHAR(15)   ,
  MANAGER_FAX  CHAR(15)   ,
  MANAGER_EMAIL  VARCHAR(60)   ,
  WAREHOUSE_STATE  VARCHAR(10)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_MST_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_MST_XXXXX
(
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_KANA  VARCHAR(60)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  CUSTOMER_BUSINESS_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_JOB_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_RO_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_RANK_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_UPD_FLAG  VARCHAR(1)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  RATE  DECIMAL(6,3)   ,
  MAX_CREDIT_LIMIT  DECIMAL(15,3)   ,
  LAST_CUTOFF_DATE  DATE   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_TYPE_CATEGORY  VARCHAR(3)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  TEMP_DELIVERY_SLIP_FLAG  CHAR(1)   ,
  PAYMENT_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  FIRST_SALES_DATE  DATE   ,
  LAST_SALES_DATE  DATE   ,
  SALES_PRICE_TOTAL  DECIMAL(15,3)   ,
  SALES_PRICE_LSM  DECIMAL(15,3)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  LAST_SALES_CUTOFF_DATE  DATE   ,
  BILL_PRINT_UNIT  VARCHAR(1)   ,
  BILL_DATE_PRINT  VARCHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    CUSTOMER_CODE
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_KANA  VARCHAR(60)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  CUSTOMER_BUSINESS_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_JOB_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_RO_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_RANK_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_UPD_FLAG  VARCHAR(1)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  RATE  DECIMAL(6,3)   ,
  MAX_CREDIT_LIMIT  DECIMAL(15,3)   ,
  LAST_CUTOFF_DATE  DATE   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_TYPE_CATEGORY  VARCHAR(3)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  TEMP_DELIVERY_SLIP_FLAG  CHAR(1)   ,
  PAYMENT_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  FIRST_SALES_DATE  DATE   ,
  LAST_SALES_DATE  DATE   ,
  SALES_PRICE_TOTAL  DECIMAL(15,3)   ,
  SALES_PRICE_LSM  DECIMAL(15,3)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  LAST_SALES_CUTOFF_DATE  DATE   ,
  BILL_PRINT_UNIT  VARCHAR(1)   ,
  BILL_DATE_PRINT  VARCHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DELIVERY_MST_XXXXX';
CREATE TABLE IF NOT EXISTS DELIVERY_MST_XXXXX
(
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DELIVERY_CODE
  )
) ENGINE=INNODB;

SELECT 'DELIVERY_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DELIVERY_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_REL_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_REL_XXXXX
(
  CUSTOMER_CODE  VARCHAR(15)   ,
  REL_CODE  VARCHAR(15)   ,
  CUST_REL_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    CUSTOMER_CODE,
    REL_CODE,
    CUST_REL_CATEGORY
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_REL_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_REL_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  REL_CODE  VARCHAR(15)   ,
  CUST_REL_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_MST_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_MST_XXXXX
(
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_KANA  VARCHAR(60)   ,
  SUPPLIER_ABBR  VARCHAR(14)   ,
  SUPPLIER_ZIP_CODE  CHAR(8)   ,
  SUPPLIER_ADDRESS_1  VARCHAR(50)   ,
  SUPPLIER_ADDRESS_2  VARCHAR(50)   ,
  SUPPLIER_DEPT_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_KANA  VARCHAR(60)   ,
  SUPPLIER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_PC_POST  VARCHAR(60)   ,
  SUPPLIER_TEL  CHAR(15)   ,
  SUPPLIER_FAX  CHAR(15)   ,
  SUPPLIER_EMAIL  VARCHAR(255)   ,
  SUPPLIER_URL  VARCHAR(60)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(3)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  PAYMENT_TYPE_CATEGORY  VARCHAR(3)   ,
  PAYMENT_CYCLE_CATEGORY  VARCHAR(1)   ,
  LAST_CUTOFF_DATE  DATETIME   ,
  PAYMENT_DATE  SMALLINT   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  PO_SLIP_COMEOUT_CATEGORY  VARCHAR(1)   ,
  SERVICE_CHARGE_CATEGORY  VARCHAR(1)   ,
  TRANSFER_TYPE_CATEGORY  VARCHAR(1)   ,
  NATIONAL_CATEGORY  VARCHAR(1)   ,
  RATE_ID  INT UNSIGNED   ,
  FOB_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SUPPLIER_CODE
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_KANA  VARCHAR(60)   ,
  SUPPLIER_ABBR  VARCHAR(14)   ,
  SUPPLIER_ZIP_CODE  CHAR(8)   ,
  SUPPLIER_ADDRESS_1  VARCHAR(50)   ,
  SUPPLIER_ADDRESS_2  VARCHAR(50)   ,
  SUPPLIER_DEPT_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_KANA  VARCHAR(60)   ,
  SUPPLIER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_PC_POST  VARCHAR(60)   ,
  SUPPLIER_TEL  CHAR(15)   ,
  SUPPLIER_FAX  CHAR(15)   ,
  SUPPLIER_EMAIL  VARCHAR(255)   ,
  SUPPLIER_URL  VARCHAR(60)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(3)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  PAYMENT_TYPE_CATEGORY  VARCHAR(3)   ,
  PAYMENT_CYCLE_CATEGORY  VARCHAR(1)   ,
  LAST_CUTOFF_DATE  DATETIME   ,
  PAYMENT_DATE  SMALLINT   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  PO_SLIP_COMEOUT_CATEGORY  VARCHAR(1)   ,
  SERVICE_CHARGE_CATEGORY  VARCHAR(1)   ,
  TRANSFER_TYPE_CATEGORY  VARCHAR(1)   ,
  NATIONAL_CATEGORY  VARCHAR(1)   ,
  RATE_ID  INT UNSIGNED   ,
  FOB_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  COMMENT_DATA  VARCHAR(1000)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ZIP_MST_XXXXX';
CREATE TABLE IF NOT EXISTS ZIP_MST_XXXXX
(
  ZIP_ID  INT UNSIGNED   NOT NULL,
  ZIP_CODE  CHAR(8)   NOT NULL,
  ZIP_ADDRESS_1  VARCHAR(50)   ,
  ZIP_ADDRESS_2  VARCHAR(50)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ZIP_ID
  )
) ENGINE=INNODB;

SELECT 'CATEGORY_MST_XXXXX';
CREATE TABLE IF NOT EXISTS CATEGORY_MST_XXXXX
(
  CATEGORY_ID  INT UNSIGNED   NOT NULL,
  GROUP_NAME  VARCHAR(60)   ,
  CATEGORY_NAME  VARCHAR(60)   ,
  CATEGORY_ADD  CHAR(1)   ,
  CATEGORY_UPD  CHAR(1)   ,
  CATEGORY_DEL  CHAR(1)   ,
  CATEGORY_DSP  CHAR(1)   ,
  CATEGORY_DATA_TYPE  CHAR(1)   ,
  CATEGORY_STR_SIZE  SMALLINT   ,
  CATEGORY_CODE_SIZE  SMALLINT   ,
  CATEGORY_TITLE  VARCHAR(30)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    CATEGORY_ID
  )
) ENGINE=INNODB;

SELECT 'CATEGORY_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS CATEGORY_TRN_XXXXX
(
  CATEGORY_ID  INT UNSIGNED   NOT NULL,
  CATEGORY_CODE  VARCHAR(10)   NOT NULL,
  CATEGORY_CODE_NAME  VARCHAR(60)   ,
  CATEGORY_STR  VARCHAR(100)   ,
  CATEGORY_NUM  INT   ,
  CATEGORY_FLT  DECIMAL(15,3)   ,
  CATEGORY_BOOL  CHAR(1)   ,
  CATEGORY_DSP  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    CATEGORY_ID,
    CATEGORY_CODE
  )
) ENGINE=INNODB;

SELECT 'CATEGORY_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS CATEGORY_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  CATEGORY_ID  INT UNSIGNED   NOT NULL,
  CATEGORY_CODE  VARCHAR(10)   NOT NULL,
  CATEGORY_CODE_NAME  VARCHAR(60)   ,
  CATEGORY_STR  VARCHAR(100)   ,
  CATEGORY_NUM  INT   ,
  CATEGORY_FLT  DECIMAL(15,3)   ,
  CATEGORY_BOOL  CHAR(1)   ,
  CATEGORY_DSP  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'TAX_RATE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS TAX_RATE_MST_XXXXX
(
  TAX_TYPE_CATEGORY  VARCHAR(1)   NOT NULL,
  START_DATE  DATE   NOT NULL,
  TAX_RATE  DECIMAL(6,3)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    TAX_TYPE_CATEGORY,
    START_DATE
  )
) ENGINE=INNODB;

SELECT 'TAX_RATE_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS TAX_RATE_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  TAX_TYPE_CATEGORY  VARCHAR(1)   NOT NULL,
  START_DATE  DATE   NOT NULL,
  TAX_RATE  DECIMAL(6,3)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'BANK_MST_XXXXX';
CREATE TABLE IF NOT EXISTS BANK_MST_XXXXX
(
  BANK_ID  INT UNSIGNED   NOT NULL,
  ACCOUNT_OWNER_NAME  VARCHAR(20)   ,
  ACCOUNT_OWNER_KANA  VARCHAR(20)   ,
  BANK_CODE  CHAR(4)   ,
  BANK_NAME  VARCHAR(20)   ,
  STORE_CODE  CHAR(3)   ,
  STORE_NAME  VARCHAR(20)   ,
  DWB_TYPE  CHAR(1)   ,
  ACCOUNT_NUM  CHAR(7)   ,
  REMARKS  VARCHAR(120)   ,
  VALID  CHAR(1) DEFAULT NULL  ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    BANK_ID
  )
) ENGINE=INNODB;

SELECT 'BANK_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS BANK_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  BANK_ID  INT UNSIGNED   NOT NULL,
  ACCOUNT_OWNER_NAME  VARCHAR(20)   ,
  ACCOUNT_OWNER_KANA  VARCHAR(20)   ,
  BANK_CODE  CHAR(4)   ,
  BANK_NAME  VARCHAR(20)   ,
  STORE_CODE  CHAR(3)   ,
  STORE_NAME  VARCHAR(20)   ,
  DWB_TYPE  CHAR(1)   ,
  ACCOUNT_NUM  CHAR(7)   ,
  REMARKS  VARCHAR(120)   ,
  VALID  CHAR(1) DEFAULT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'INIT_MST_XXXXX';
CREATE TABLE IF NOT EXISTS INIT_MST_XXXXX
(
  TABLE_NAME  VARCHAR(40)   ,
  COLUMN_NAME  VARCHAR(40)   ,
  TITLE  VARCHAR(120)   ,
  CATEGORY_ID  VARCHAR(60)   ,
  USE_DATA_TYPE  CHAR(1)   NOT NULL,
  USE_STR_SIZE  SMALLINT   ,
  STR_DATA  VARCHAR(100)   ,
  NUM_DATA  INT   ,
  FLT_DATA  DECIMAL(15,3)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    TABLE_NAME,
    COLUMN_NAME
  )
) ENGINE=INNODB;

SELECT 'RATE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS RATE_MST_XXXXX
(
  RATE_ID  INT UNSIGNED   NOT NULL,
  NAME  VARCHAR(60)   ,
  SIGN  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RATE_ID
  )
) ENGINE=INNODB;

SELECT 'RATE_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS RATE_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RATE_ID  INT UNSIGNED   NOT NULL,
  NAME  VARCHAR(60)   ,
  SIGN  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'RATE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS RATE_TRN_XXXXX
(
  RATE_ID  INT UNSIGNED   NOT NULL,
  START_DATE  DATE   NOT NULL,
  RATE  DECIMAL(8,3)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RATE_ID,
    START_DATE
  )
) ENGINE=INNODB;

SELECT 'RATE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS RATE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RATE_ID  INT UNSIGNED   NOT NULL,
  START_DATE  DATE   NOT NULL,
  RATE  DECIMAL(8,3)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_RANK_MST_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_RANK_MST_XXXXX
(
  RANK_CODE  VARCHAR(2)   NOT NULL,
  RANK_NAME  VARCHAR(60)   ,
  RANK_RATE  DECIMAL(6,3)   ,
  RO_COUNT_FROM  INT   ,
  RO_COUNT_TO  INT   ,
  ENROLL_TERM_FROM  INT UNSIGNED   ,
  ENROLL_TERM_TO  INT UNSIGNED   ,
  DEFECT_TERM_FROM  INT UNSIGNED   ,
  DEFECT_TERM_TO  INT UNSIGNED   ,
  RO_MONTHLY_AVG_FROM  DECIMAL(15,3)   ,
  RO_MONTHLY_AVG_TO  DECIMAL(15,3)   ,
  POSTAGE_TYPE  CHAR(1)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RANK_CODE
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_RANK_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_RANK_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RANK_CODE  VARCHAR(2)   NOT NULL,
  RANK_NAME  VARCHAR(60)   ,
  RANK_RATE  DECIMAL(6,3)   ,
  RO_COUNT_FROM  INT   ,
  RO_COUNT_TO  INT   ,
  ENROLL_TERM_FROM  INT UNSIGNED   ,
  ENROLL_TERM_TO  INT UNSIGNED   ,
  DEFECT_TERM_FROM  INT UNSIGNED   ,
  DEFECT_TERM_TO  INT UNSIGNED   ,
  RO_MONTHLY_AVG_FROM  DECIMAL(15,3)   ,
  RO_MONTHLY_AVG_TO  DECIMAL(15,3)   ,
  POSTAGE_TYPE  CHAR(1)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_STOCK_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_STOCK_TRN_XXXXX
(
  RACK_CODE  VARCHAR(10)   ,
  PRODUCT_CODE  CHAR(20)   ,
  STOCK_PDATE  DATE   ,
  STOCK_ANNUAL  SMALLINT   NOT NULL,
  STOCK_MONTHLY  SMALLINT   NOT NULL,
  STOCK_YM  INT   NOT NULL,
  STOCK_NUM  DECIMAL(12,3)   ,
  ENTER_NUM  DECIMAL(12,3)   ,
  DISPATCH_NUM  DECIMAL(12,3)   ,
  REMARKS  CHAR(50)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RACK_CODE,
    PRODUCT_CODE,
    STOCK_ANNUAL,
    STOCK_MONTHLY
  )
) ENGINE=INNODB;

SELECT 'PRODUCT_STOCK_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PRODUCT_STOCK_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RACK_CODE  VARCHAR(10)   ,
  PRODUCT_CODE  CHAR(20)   ,
  STOCK_PDATE  DATE   ,
  STOCK_ANNUAL  SMALLINT   NOT NULL,
  STOCK_MONTHLY  SMALLINT   NOT NULL,
  STOCK_YM  INT   NOT NULL,
  STOCK_NUM  DECIMAL(12,3)   ,
  ENTER_NUM  DECIMAL(12,3)   ,
  DISPATCH_NUM  DECIMAL(12,3)   ,
  REMARKS  CHAR(50)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ESTIMATE_SHEET_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS ESTIMATE_SHEET_TRN_XXXXX
(
  ESTIMATE_SHEET_ID  VARCHAR(32)   ,
  ESTIMATE_ANNUAL  SMALLINT   ,
  ESTIMATE_MONTHLY  SMALLINT   ,
  ESTIMATE_YM  INT   ,
  ESTIMATE_DATE  DATE   ,
  DELIVERY_INFO  VARCHAR(120)   ,
  VALID_DATE  DATE   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  TITLE  VARCHAR(100)   ,
  ESTIMATE_CONDITION  VARCHAR(120)   ,
  SUBMIT_NAME  VARCHAR(60)   ,
  SUBMIT_PRE_CATEGORY  VARCHAR(2)   ,
  SUBMIT_PRE  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  CTAX_PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_RATE DECIMAL(6,3),
  COST_TOTAL  DECIMAL(15,3)   ,
  RETAIL_PRICE_TOTAL  DECIMAL(15,3)   ,
  ESTIMATE_TOTAL  DECIMAL(15,3)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  MEMO  VARCHAR(2000)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ESTIMATE_SHEET_ID
  )
) ENGINE=INNODB;

SELECT 'ESTIMATE_SHEET_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ESTIMATE_SHEET_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  ESTIMATE_SHEET_ID  VARCHAR(32)   ,
  ESTIMATE_ANNUAL  SMALLINT   ,
  ESTIMATE_MONTHLY  SMALLINT   ,
  ESTIMATE_YM  INT   ,
  ESTIMATE_DATE  DATE   ,
  DELIVERY_INFO  VARCHAR(120)   ,
  VALID_DATE  DATE   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  TITLE  VARCHAR(100)   ,
  ESTIMATE_CONDITION  VARCHAR(120)   ,
  SUBMIT_NAME  VARCHAR(60)   ,
  SUBMIT_PRE_CATEGORY  VARCHAR(2)   ,
  SUBMIT_PRE  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  CTAX_PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_RATE DECIMAL(6,3),
  COST_TOTAL  DECIMAL(15,3)   ,
  RETAIL_PRICE_TOTAL  DECIMAL(15,3)   ,
  ESTIMATE_TOTAL  DECIMAL(15,3)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  MEMO  VARCHAR(2000)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ESTIMATE_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS ESTIMATE_LINE_TRN_XXXXX
(
  ESTIMATE_LINE_ID  INT UNSIGNED   ,
  ESTIMATE_SHEET_ID  VARCHAR(32)   ,
  LINE_NO  SMALLINT   NOT NULL,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  CUSTOMER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   NOT NULL,
  UNIT_COST  DECIMAL(12,3)   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   NOT NULL,
  COST  DECIMAL(15,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   NOT NULL,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ESTIMATE_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'ESTIMATE_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ESTIMATE_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  ESTIMATE_LINE_ID  INT UNSIGNED   ,
  ESTIMATE_SHEET_ID  VARCHAR(32)   ,
  LINE_NO  SMALLINT   NOT NULL,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  CUSTOMER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   NOT NULL,
  UNIT_COST  DECIMAL(12,3)   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   NOT NULL,
  COST  DECIMAL(15,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   NOT NULL,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'RO_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS RO_SLIP_TRN_XXXXX
(
  RO_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   NOT NULL,
  RO_ANNUAL  SMALLINT   ,
  RO_MONTHLY  SMALLINT   ,
  RO_YM  INT   ,
  RO_DATE  DATE   ,
  SHIP_DATE  DATE   ,
  DELIVERY_DATE  DATE   ,
  RECEPT_NO  VARCHAR(30)   ,
  CUSTOMER_SLIP_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  ESTIMATE_SHEET_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_RATE DECIMAL(6,3),
  COST_TOTAL  DECIMAL(15,3)   ,
  RETAIL_PRICE_TOTAL  DECIMAL(15,3)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_COUNT  INT   ,
  COD_SC  CHAR(1)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  DC_CATEGORY  VARCHAR(5)   ,
  DC_NAME  VARCHAR(60)   ,
  DC_TIMEZONE_CATEGORY  VARCHAR(4)   ,
  DC_TIMEZONE  VARCHAR(60)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RO_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'RO_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS RO_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RO_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   NOT NULL,
  RO_ANNUAL  SMALLINT   ,
  RO_MONTHLY  SMALLINT   ,
  RO_YM  INT   ,
  RO_DATE  DATE   ,
  SHIP_DATE  DATE   ,
  DELIVERY_DATE  DATE   ,
  RECEPT_NO  VARCHAR(30)   ,
  CUSTOMER_SLIP_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  ESTIMATE_SHEET_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_RATE DECIMAL(6,3),
  COST_TOTAL  DECIMAL(15,3)   ,
  RETAIL_PRICE_TOTAL  DECIMAL(15,3)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_COUNT  INT   ,
  COD_SC  CHAR(1)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  DC_CATEGORY  VARCHAR(5)   ,
  DC_NAME  VARCHAR(60)   ,
  DC_TIMEZONE_CATEGORY  VARCHAR(4)   ,
  DC_TIMEZONE  VARCHAR(60)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'RO_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS RO_LINE_TRN_XXXXX
(
  RO_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   NOT NULL,
  RO_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   NOT NULL,
  ESTIMATE_LINE_ID  INT UNSIGNED   ,
  LAST_SHIP_DATE  DATE   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   NOT NULL,
  QUANTITY  DECIMAL(12,3)   NOT NULL,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   NOT NULL,
  RETAIL_PRICE  DECIMAL(15,3)   NOT NULL,
  UNIT_COST  DECIMAL(15,3)   NOT NULL,
  COST  DECIMAL(15,3)   NOT NULL,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  REST_QUANTITY  DECIMAL(12,3)   NOT NULL,
  RACK_CODE_SRC  VARCHAR(10)   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RO_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'RO_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS RO_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RO_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   NOT NULL,
  RO_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   NOT NULL,
  ESTIMATE_LINE_ID  INT UNSIGNED   ,
  LAST_SHIP_DATE  DATE   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   NOT NULL,
  QUANTITY  DECIMAL(12,3)   NOT NULL,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   NOT NULL,
  RETAIL_PRICE  DECIMAL(15,3)   NOT NULL,
  UNIT_COST  DECIMAL(15,3)   NOT NULL,
  COST  DECIMAL(15,3)   NOT NULL,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  REST_QUANTITY  DECIMAL(12,3)   NOT NULL,
  RACK_CODE_SRC  VARCHAR(10)   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'SALES_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS SALES_SLIP_TRN_XXXXX
(
  SALES_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SALES_ANNUAL  SMALLINT   ,
  SALES_MONTHLY  SMALLINT   ,
  SALES_YM  INT   ,
  RO_SLIP_ID  INT UNSIGNED   ,
  BILL_ID  INT UNSIGNED   ,
  SALES_BILL_ID  INT UNSIGNED   ,
  BILL_DATE  DATE   ,
  BILL_CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  BILL_CUTOFF_DATE  DATE   ,
  BILL_CUTOFF_PDATE  DATETIME   ,
  SALES_DATE  DATE   NOT NULL,
  DELIVERY_DATE  DATE   ,
  RECEPT_NO  VARCHAR(30)   ,
  CUSTOMER_SLIP_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  SALES_CUTOFF_DATE  DATE   ,
  SALES_CUTOFF_PDATE  DATETIME   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  PICKING_REMARKS  VARCHAR(120)   ,
  DC_CATEGORY  VARCHAR(5)   ,
  DC_NAME  VARCHAR(60)   ,
  DC_TIMEZONE_CATEGORY  VARCHAR(4)   ,
  DC_TIMEZONE  VARCHAR(60)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_PC_PRE  VARCHAR(16)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  BA_CODE  VARCHAR(15)   ,
  BA_NAME  VARCHAR(60)   ,
  BA_KANA  VARCHAR(60)   ,
  BA_OFFICE_NAME  VARCHAR(60)   ,
  BA_OFFICE_KANA  VARCHAR(60)   ,
  BA_DEPT_NAME  VARCHAR(60)   ,
  BA_ZIP_CODE  CHAR(8)   ,
  BA_ADDRESS_1  VARCHAR(50)   ,
  BA_ADDRESS_2  VARCHAR(50)   ,
  BA_PC_NAME  VARCHAR(60)   ,
  BA_PC_KANA  VARCHAR(60)   ,
  BA_PC_PRE_CATEGORY  VARCHAR(2)   ,
  BA_PC_PRE  VARCHAR(16)   ,
  BA_TEL  CHAR(15)   ,
  BA_FAX  CHAR(15)   ,
  BA_EMAIL  VARCHAR(255)   ,
  BA_URL  VARCHAR(60)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  PRICE_TOTAL  DECIMAL(15,3)   ,
  GM_TOTAL  DECIMAL(15,3)   ,
  COD_SC  CHAR(1)   ,
  BILL_PRINT_COUNT  INT   ,
  DELIVERY_PRINT_COUNT  INT   ,
  TEMP_DELIVERY_PRINT_COUNT  INT   ,
  SHIPPING_PRINT_COUNT  INT   ,
  SI_PRINT_COUNT  INT   ,
  ESTIMATE_PRINT_COUNT  INT   ,
  DELBOR_PRINT_COUNT  INT   ,
  PO_PRINT_COUNT  INT   ,
  ADLABEL  VARCHAR(100)   ,
  DISCLAIMER  VARCHAR(60)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  ART_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SALES_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'SALES_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SALES_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SALES_ANNUAL  SMALLINT   ,
  SALES_MONTHLY  SMALLINT   ,
  SALES_YM  INT   ,
  RO_SLIP_ID  INT UNSIGNED   ,
  BILL_ID  INT UNSIGNED   ,
  SALES_BILL_ID  INT UNSIGNED   ,
  BILL_DATE  DATE   ,
  BILL_CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  BILL_CUTOFF_DATE  DATE   ,
  BILL_CUTOFF_PDATE  DATETIME   ,
  SALES_DATE  DATE   NOT NULL,
  DELIVERY_DATE  DATE   ,
  RECEPT_NO  VARCHAR(30)   ,
  CUSTOMER_SLIP_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  SALES_CUTOFF_DATE  DATE   ,
  SALES_CUTOFF_PDATE  DATETIME   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  PICKING_REMARKS  VARCHAR(120)   ,
  DC_CATEGORY  VARCHAR(5)   ,
  DC_NAME  VARCHAR(60)   ,
  DC_TIMEZONE_CATEGORY  VARCHAR(4)   ,
  DC_TIMEZONE  VARCHAR(60)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_PC_PRE  VARCHAR(16)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  BA_CODE  VARCHAR(15)   ,
  BA_NAME  VARCHAR(60)   ,
  BA_KANA  VARCHAR(60)   ,
  BA_OFFICE_NAME  VARCHAR(60)   ,
  BA_OFFICE_KANA  VARCHAR(60)   ,
  BA_DEPT_NAME  VARCHAR(60)   ,
  BA_ZIP_CODE  CHAR(8)   ,
  BA_ADDRESS_1  VARCHAR(50)   ,
  BA_ADDRESS_2  VARCHAR(50)   ,
  BA_PC_NAME  VARCHAR(60)   ,
  BA_PC_KANA  VARCHAR(60)   ,
  BA_PC_PRE_CATEGORY  VARCHAR(2)   ,
  BA_PC_PRE  VARCHAR(16)   ,
  BA_TEL  CHAR(15)   ,
  BA_FAX  CHAR(15)   ,
  BA_EMAIL  VARCHAR(255)   ,
  BA_URL  VARCHAR(60)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  PRICE_TOTAL  DECIMAL(15,3)   ,
  GM_TOTAL  DECIMAL(15,3)   ,
  COD_SC  CHAR(1)   ,
  BILL_PRINT_COUNT  INT   ,
  DELIVERY_PRINT_COUNT  INT   ,
  TEMP_DELIVERY_PRINT_COUNT  INT   ,
  SHIPPING_PRINT_COUNT  INT   ,
  SI_PRINT_COUNT  INT   ,
  ESTIMATE_PRINT_COUNT  INT   ,
  DELBOR_PRINT_COUNT  INT   ,
  PO_PRINT_COUNT  INT   ,
  ADLABEL  VARCHAR(100)   ,
  DISCLAIMER  VARCHAR(60)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  ART_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'SALES_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS SALES_LINE_TRN_XXXXX
(
  SALES_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  RO_LINE_ID  INT UNSIGNED   ,
  SALES_DETAIL_CATEGORY  VARCHAR(2)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   ,
  QUANTITY  DECIMAL(12,3)   ,
  DELIVERY_PROCESS_CATEGORY  VARCHAR(1)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  UNIT_COST  DECIMAL(12,3)   ,
  COST  DECIMAL(15,3)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  GM  DECIMAL(15,3)   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  RACK_CODE_SRC  VARCHAR(10)   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SALES_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'SALES_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SALES_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  RO_LINE_ID  INT UNSIGNED   ,
  SALES_DETAIL_CATEGORY  VARCHAR(2)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   ,
  QUANTITY  DECIMAL(12,3)   ,
  DELIVERY_PROCESS_CATEGORY  VARCHAR(1)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  UNIT_COST  DECIMAL(12,3)   ,
  COST  DECIMAL(15,3)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  GM  DECIMAL(15,3)   ,
  REMARKS  VARCHAR(120)   ,
  EAD_REMARKS  VARCHAR(120)   ,
  RACK_CODE_SRC  VARCHAR(10)   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PICKING_LIST_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PICKING_LIST_TRN_XXXXX
(
  PICKING_LIST_ID  INT UNSIGNED   ,
  RO_DATE  DATE   ,
  SALES_ANNUAL  SMALLINT   ,
  SALES_MONTHLY  SMALLINT   ,
  SALES_YM  INT   ,
  RO_SLIP_ID  INT UNSIGNED   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  RECEPT_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  PICKING_REMARKS  CHAR(120)   ,
  REMARKS  CHAR(120)   ,
  CUSTOMER_REMARKS  CHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_PC_PRE  VARCHAR(16)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  BA_CODE  VARCHAR(15)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(12,3)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_DATE  DATETIME   ,
  COD_SC  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PICKING_LIST_ID
  )
) ENGINE=INNODB;

SELECT 'PICKING_LIST_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PICKING_LIST_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PICKING_LIST_ID  INT UNSIGNED   ,
  RO_DATE  DATE   ,
  SALES_ANNUAL  SMALLINT   ,
  SALES_MONTHLY  SMALLINT   ,
  SALES_YM  INT   ,
  RO_SLIP_ID  INT UNSIGNED   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  RECEPT_NO  VARCHAR(30)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  PICKING_REMARKS  CHAR(120)   ,
  REMARKS  CHAR(120)   ,
  CUSTOMER_REMARKS  CHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_NAME  VARCHAR(60)   ,
  CUSTOMER_ZIP_CODE  CHAR(8)   ,
  CUSTOMER_ADDRESS_1  VARCHAR(50)   ,
  CUSTOMER_ADDRESS_2  VARCHAR(50)   ,
  CUSTOMER_OFFICE_NAME  VARCHAR(60)   ,
  CUSTOMER_OFFICE_KANA  VARCHAR(60)   ,
  CUSTOMER_ABBR  VARCHAR(14)   ,
  CUSTOMER_DEPT_NAME  VARCHAR(60)   ,
  CUSTOMER_PC_POST  VARCHAR(60)   ,
  CUSTOMER_PC_KANA  VARCHAR(60)   ,
  CUSTOMER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  CUSTOMER_PC_PRE  VARCHAR(16)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  CUSTOMER_FAX  CHAR(15)   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_URL  VARCHAR(60)   ,
  DELIVERY_CODE  VARCHAR(15)   ,
  DELIVERY_NAME  VARCHAR(60)   ,
  DELIVERY_KANA  VARCHAR(60)   ,
  DELIVERY_OFFICE_NAME  VARCHAR(60)   ,
  DELIVERY_OFFICE_KANA  VARCHAR(60)   ,
  DELIVERY_DEPT_NAME  VARCHAR(60)   ,
  DELIVERY_ZIP_CODE  CHAR(8)   ,
  DELIVERY_ADDRESS_1  VARCHAR(50)   ,
  DELIVERY_ADDRESS_2  VARCHAR(50)   ,
  DELIVERY_PC_NAME  VARCHAR(60)   ,
  DELIVERY_PC_KANA  VARCHAR(60)   ,
  DELIVERY_PC_PRE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PC_PRE  VARCHAR(16)   ,
  DELIVERY_TEL  CHAR(15)   ,
  DELIVERY_FAX  CHAR(15)   ,
  DELIVERY_EMAIL  VARCHAR(255)   ,
  DELIVERY_URL  VARCHAR(60)   ,
  BA_CODE  VARCHAR(15)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_PRICE_TOTAL  DECIMAL(12,3)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_DATE  DATETIME   ,
  COD_SC  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PICKING_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PICKING_LINE_TRN_XXXXX
(
  PICKING_LINE_ID  INT UNSIGNED   ,
  PICKING_LIST_ID  INT UNSIGNED   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  RO_LINE_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  SALES_DETAIL_CATEGORY  VARCHAR(2)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  UNIT_COST  DECIMAL(12,3)   ,
  COST  DECIMAL(15,3)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  GM  DECIMAL(15,3)   ,
  RACK_CODE_SRC  VARCHAR(10)   ,
  STOCK_NUM  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  PICKING_REMARKS  VARCHAR(120)   ,
  SET_TYPE_CATEGORY  VARCHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PICKING_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'PICKING_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PICKING_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PICKING_LINE_ID  INT UNSIGNED   ,
  PICKING_LIST_ID  INT UNSIGNED   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  RO_LINE_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  SALES_DETAIL_CATEGORY  VARCHAR(2)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  CUSTOMER_PCODE  VARCHAR(50)   ,
  PRODUCT_ABSTRACT  VARCHAR(120)   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  UNIT_CATEGORY  VARCHAR(2)   ,
  UNIT_NAME  VARCHAR(6)   ,
  PACK_QUANTITY  SMALLINT   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  UNIT_COST  DECIMAL(12,3)   ,
  COST  DECIMAL(15,3)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  GM  DECIMAL(15,3)   ,
  RACK_CODE_SRC  VARCHAR(10)   ,
  STOCK_NUM  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  PICKING_REMARKS  VARCHAR(120)   ,
  SET_TYPE_CATEGORY  VARCHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'BILL_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS BILL_TRN_XXXXX
(
  BILL_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  BILL_YEAR  SMALLINT   ,
  BILL_MONTH  SMALLINT   ,
  BILL_YM  INT   ,
  BILL_CUTOFF_DATE  DATE   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  CUTOFF_PDATE  DATETIME   ,
  REMARKS  VARCHAR(120)   ,
  BA_CODE  VARCHAR(15)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  LAST_BILL_PRICE  DECIMAL(15,3)   ,
  DEPOSIT_PRICE  DECIMAL(15,3)   ,
  ADJ_PRICE  DECIMAL(15,3)   ,
  COV_PRICE  DECIMAL(15,3)   ,
  SALES_PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  RGU_PRICE  DECIMAL(15,3)   ,
  DCT_PRICE  DECIMAL(15,3)   ,
  ETC_PRICE  DECIMAL(15,3)   ,
  THIS_BILL_PRICE  DECIMAL(15,3)   ,
  SLIP_NUM  SMALLINT   ,
  COD_LAST_BILL_PRICE  DECIMAL(15,3)   ,
  COD_DEPOSIT_PRICE  DECIMAL(15,3)   ,
  COD_ADJ_PRICE  DECIMAL(15,3)   ,
  COD_COV_PRICE  DECIMAL(15,3)   ,
  COD_SALES_PRICE  DECIMAL(15,3)   ,
  COD_CTAX_PRICE  DECIMAL(12,3)   ,
  COD_RGU_PRICE  DECIMAL(15,3)   ,
  COD_DCT_PRICE  DECIMAL(15,3)   ,
  COD_ETC_PRICE  DECIMAL(15,3)   ,
  COD_THIS_BILL_PRICE  DECIMAL(15,3)   ,
  COD_SLIP_NUM  SMALLINT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  PAYBACK_PLAN_DATE  DATE   ,
  LAST_PRINT_DATE  DATE   ,
  BILL_PRINT_COUNT  INT   ,
  BILL_CRT_CATEGORY  VARCHAR(2)   ,
  LAST_SALES_DATE  DATE   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    BILL_ID
  )
) ENGINE=INNODB;

SELECT 'BILL_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS BILL_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  BILL_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  BILL_YEAR  SMALLINT   ,
  BILL_MONTH  SMALLINT   ,
  BILL_YM  INT   ,
  BILL_CUTOFF_DATE  DATE   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  CUTOFF_PDATE  DATETIME   ,
  REMARKS  VARCHAR(120)   ,
  BA_CODE  VARCHAR(15)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  LAST_BILL_PRICE  DECIMAL(15,3)   ,
  DEPOSIT_PRICE  DECIMAL(15,3)   ,
  ADJ_PRICE  DECIMAL(15,3)   ,
  COV_PRICE  DECIMAL(15,3)   ,
  SALES_PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  RGU_PRICE  DECIMAL(15,3)   ,
  DCT_PRICE  DECIMAL(15,3)   ,
  ETC_PRICE  DECIMAL(15,3)   ,
  THIS_BILL_PRICE  DECIMAL(15,3)   ,
  SLIP_NUM  SMALLINT   ,
  COD_LAST_BILL_PRICE  DECIMAL(15,3)   ,
  COD_DEPOSIT_PRICE  DECIMAL(15,3)   ,
  COD_ADJ_PRICE  DECIMAL(15,3)   ,
  COD_COV_PRICE  DECIMAL(15,3)   ,
  COD_SALES_PRICE  DECIMAL(15,3)   ,
  COD_CTAX_PRICE  DECIMAL(12,3)   ,
  COD_RGU_PRICE  DECIMAL(15,3)   ,
  COD_DCT_PRICE  DECIMAL(15,3)   ,
  COD_ETC_PRICE  DECIMAL(15,3)   ,
  COD_THIS_BILL_PRICE  DECIMAL(15,3)   ,
  COD_SLIP_NUM  SMALLINT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  PAYBACK_PLAN_DATE  DATE   ,
  LAST_PRINT_DATE  DATE   ,
  BILL_PRINT_COUNT  INT   ,
  BILL_CRT_CATEGORY  VARCHAR(2)   ,
  LAST_SALES_DATE  DATE   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DEPOSIT_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS DEPOSIT_SLIP_TRN_XXXXX
(
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  STATUS  VARCHAR(1)   ,
  DEPOSIT_DATE  DATE   ,
  INPUT_PDATE  DATE   ,
  DEPOSIT_ANNUAL  SMALLINT   ,
  DEPOSIT_MONTHLY  SMALLINT   ,
  DEPOSIT_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  DEPOSIT_ABSTRACT  VARCHAR(50)   ,
  REMARKS  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  BA_CODE  VARCHAR(15)   ,
  BA_NAME  VARCHAR(60)   ,
  BA_KANA  VARCHAR(60)   ,
  BA_OFFICE_NAME  VARCHAR(60)   ,
  BA_OFFICE_KANA  VARCHAR(60)   ,
  BA_DEPT_NAME  VARCHAR(60)   ,
  BA_ZIP_CODE  CHAR(8)   ,
  BA_ADDRESS_1  VARCHAR(50)   ,
  BA_ADDRESS_2  VARCHAR(50)   ,
  BA_PC_NAME  VARCHAR(60)   ,
  BA_PC_KANA  VARCHAR(60)   ,
  BA_PC_PRE_CATRGORY  VARCHAR(2)   ,
  BA_PC_PRE  VARCHAR(16)   ,
  BA_TEL  CHAR(15)   ,
  BA_FAX  CHAR(15)   ,
  BA_EMAIL  VARCHAR(255)   ,
  BA_URL  VARCHAR(60)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  DEPOSIT_CATEGORY  VARCHAR(3)   ,
  DEPOSIT_TOTAL  DECIMAL(15,3)   ,
  BILL_ID  INT UNSIGNED   ,
  BILL_CUTOFF_DATE  DATE   ,
  BILL_CUTOFF_PDATE  DATETIME   ,
  ART_ID  INT UNSIGNED   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  DEPOSIT_METHOD_TYPE_CATEGORY  VARCHAR(2)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  SALES_CUTOFF_DATE  DATE   ,
  SALES_CUTOFF_PDATE  DATETIME   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DEPOSIT_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'DEPOSIT_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DEPOSIT_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  STATUS  VARCHAR(1)   ,
  DEPOSIT_DATE  DATE   ,
  INPUT_PDATE  DATE   ,
  DEPOSIT_ANNUAL  SMALLINT   ,
  DEPOSIT_MONTHLY  SMALLINT   ,
  DEPOSIT_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  DEPOSIT_ABSTRACT  VARCHAR(50)   ,
  REMARKS  VARCHAR(120)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  BA_CODE  VARCHAR(15)   ,
  BA_NAME  VARCHAR(60)   ,
  BA_KANA  VARCHAR(60)   ,
  BA_OFFICE_NAME  VARCHAR(60)   ,
  BA_OFFICE_KANA  VARCHAR(60)   ,
  BA_DEPT_NAME  VARCHAR(60)   ,
  BA_ZIP_CODE  CHAR(8)   ,
  BA_ADDRESS_1  VARCHAR(50)   ,
  BA_ADDRESS_2  VARCHAR(50)   ,
  BA_PC_NAME  VARCHAR(60)   ,
  BA_PC_KANA  VARCHAR(60)   ,
  BA_PC_PRE_CATRGORY  VARCHAR(2)   ,
  BA_PC_PRE  VARCHAR(16)   ,
  BA_TEL  CHAR(15)   ,
  BA_FAX  CHAR(15)   ,
  BA_EMAIL  VARCHAR(255)   ,
  BA_URL  VARCHAR(60)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  DEPOSIT_CATEGORY  VARCHAR(3)   ,
  DEPOSIT_TOTAL  DECIMAL(15,3)   ,
  BILL_ID  INT UNSIGNED   ,
  BILL_CUTOFF_DATE  DATE   ,
  BILL_CUTOFF_PDATE  DATETIME   ,
  ART_ID  INT UNSIGNED   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  DEPOSIT_METHOD_TYPE_CATEGORY  VARCHAR(2)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CUSTOMER_REMARKS  VARCHAR(120)   ,
  CUSTOMER_COMMENT_DATA  VARCHAR(1000)   ,
  SALES_CUTOFF_DATE  DATE   ,
  SALES_CUTOFF_PDATE  DATETIME   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DEPOSIT_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS DEPOSIT_LINE_TRN_XXXXX
(
  DEPOSIT_LINE_ID  INT UNSIGNED   ,
  STATUS  VARCHAR(1)   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  DEPOSIT_CATEGORY  VARCHAR(3)   ,
  PRICE  DECIMAL(15,3)   ,
  INST_DATE  DATE   ,
  INST_NO  VARCHAR(10)   ,
  BANK_ID  INT UNSIGNED   ,
  BANK_INFO  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DEPOSIT_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'DEPOSIT_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DEPOSIT_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DEPOSIT_LINE_ID  INT UNSIGNED   ,
  STATUS  VARCHAR(1)   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  DEPOSIT_CATEGORY  VARCHAR(3)   ,
  PRICE  DECIMAL(15,3)   ,
  INST_DATE  DATE   ,
  INST_NO  VARCHAR(10)   ,
  BANK_ID  INT UNSIGNED   ,
  BANK_INFO  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PO_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PO_SLIP_TRN_XXXXX
(
  PO_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PO_DATE  DATE   ,
  PO_ANNUAL  SMALLINT   ,
  PO_MONTHLY  SMALLINT   ,
  PO_YM  INT   ,
  DELIVERY_DATE  DATE   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_KANA  VARCHAR(60)   ,
  SUPPLIER_ABBR  VARCHAR(14)   ,
  SUPPLIER_DEPT_NAME  VARCHAR(60)   ,
  SUPPLIER_ZIP_CODE  CHAR(8)   ,
  SUPPLIER_ADDRESS_1  VARCHAR(50)   ,
  SUPPLIER_ADDRESS_2  VARCHAR(50)   ,
  SUPPLIER_PC_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_KANA  VARCHAR(60)   ,
  SUPPLIER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_PC_PRE  VARCHAR(16)   ,
  SUPPLIER_PC_POST  VARCHAR(30)   ,
  SUPPLIER_TEL  CHAR(15)   ,
  SUPPLIER_FAX  CHAR(15)   ,
  SUPPLIER_EMAIL  VARCHAR(255)   ,
  SUPPLIER_URL  VARCHAR(60)   ,
  TRANSPORT_CATEGORY  VARCHAR(1)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  RATE_ID  INT UNSIGNED   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  FE_PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_COUNT  INT(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PO_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'PO_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PO_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PO_DATE  DATE   ,
  PO_ANNUAL  SMALLINT   ,
  PO_MONTHLY  SMALLINT   ,
  PO_YM  INT   ,
  DELIVERY_DATE  DATE   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(120)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_KANA  VARCHAR(60)   ,
  SUPPLIER_ABBR  VARCHAR(14)   ,
  SUPPLIER_DEPT_NAME  VARCHAR(60)   ,
  SUPPLIER_ZIP_CODE  CHAR(8)   ,
  SUPPLIER_ADDRESS_1  VARCHAR(50)   ,
  SUPPLIER_ADDRESS_2  VARCHAR(50)   ,
  SUPPLIER_PC_NAME  VARCHAR(60)   ,
  SUPPLIER_PC_KANA  VARCHAR(60)   ,
  SUPPLIER_PC_PRE_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_PC_PRE  VARCHAR(16)   ,
  SUPPLIER_PC_POST  VARCHAR(30)   ,
  SUPPLIER_TEL  CHAR(15)   ,
  SUPPLIER_FAX  CHAR(15)   ,
  SUPPLIER_EMAIL  VARCHAR(255)   ,
  SUPPLIER_URL  VARCHAR(60)   ,
  TRANSPORT_CATEGORY  VARCHAR(1)   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  RATE_ID  INT UNSIGNED   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  PRICE_TOTAL  DECIMAL(15,3)   ,
  CTAX_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  FE_PRICE_TOTAL  DECIMAL(15,3)   ,
  PRINT_COUNT  INT(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PO_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PO_LINE_TRN_XXXXX
(
  PO_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  TEMP_UNIT_PRICE_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  DELIVERY_DATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  REST_QUANTITY  DECIMAL(12,3)   NOT NULL,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PO_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'PO_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PO_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PO_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  TEMP_UNIT_PRICE_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  DELIVERY_DATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  REST_QUANTITY  DECIMAL(12,3)   NOT NULL,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_SLIP_TRN_XXXXX
(
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SUPPLIER_DATE  DATE   ,
  SUPPLIER_ANNUAL  SMALLINT   ,
  SUPPLIER_MONTHLY  SMALLINT   ,
  SUPPLIER_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  SUPPLIER_SLIP_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  DELIVERY_DATE  DATE   ,
  RATE_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  PRICE_TOTAL  DECIMAL(15,3)   ,
  FE_PRICE_TOTAL  DECIMAL(15,3)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_PAYMENT_DATE  DATE   ,
  PAYMENT_CUTOFF_DATE  DATE   ,
  PAYMENT_PDATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SUPPLIER_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SUPPLIER_DATE  DATE   ,
  SUPPLIER_ANNUAL  SMALLINT   ,
  SUPPLIER_MONTHLY  SMALLINT   ,
  SUPPLIER_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  SUPPLIER_SLIP_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_CODE  VARCHAR(10)   ,
  SUPPLIER_NAME  VARCHAR(60)   ,
  SUPPLIER_CM_CATEGORY  VARCHAR(1)   ,
  DELIVERY_DATE  DATE   ,
  RATE_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  CTAX_TOTAL  DECIMAL(12,3)   ,
  CTAX_RATE DECIMAL(6,3),
  PRICE_TOTAL  DECIMAL(15,3)   ,
  FE_PRICE_TOTAL  DECIMAL(15,3)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_PAYMENT_DATE  DATE   ,
  PAYMENT_CUTOFF_DATE  DATE   ,
  PAYMENT_PDATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_LINE_TRN_XXXXX
(
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  SUPPLIER_DETAIL_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PROCESS_CATEGORY  VARCHAR(1)   ,
  TEMP_UNIT_PRICE_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  DELIVERY_DATE  DATE   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  REMARKS  VARCHAR(120)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   ,
  PO_LINE_ID  INT UNSIGNED   ,
  PAYMENT_LINE_ID  INT UNSIGNED   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SUPPLIER_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'SUPPLIER_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SUPPLIER_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  SUPPLIER_DETAIL_CATEGORY  VARCHAR(2)   ,
  DELIVERY_PROCESS_CATEGORY  VARCHAR(1)   ,
  TEMP_UNIT_PRICE_CATEGORY  VARCHAR(1)   ,
  TAX_CATEGORY  VARCHAR(1)   ,
  DELIVERY_DATE  DATE   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  REMARKS  VARCHAR(120)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   ,
  PO_LINE_ID  INT UNSIGNED   ,
  PAYMENT_LINE_ID  INT UNSIGNED   ,
  PRODUCT_REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'EAD_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS EAD_SLIP_TRN_XXXXX
(
  EAD_SLIP_ID  INT UNSIGNED   ,
  EAD_DATE  DATE   ,
  EAD_ANNUAL  SMALLINT   ,
  EAD_MONTHLY  SMALLINT   ,
  EAD_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  EAD_SLIP_CATEGORY  VARCHAR(2)   ,
  EAD_CATEGORY  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  SRC_FUNC  CHAR(2)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  MOVE_DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  STOCK_PDATE  DATE   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    EAD_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'EAD_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS EAD_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  EAD_SLIP_ID  INT UNSIGNED   ,
  EAD_DATE  DATE   ,
  EAD_ANNUAL  SMALLINT   ,
  EAD_MONTHLY  SMALLINT   ,
  EAD_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  EAD_SLIP_CATEGORY  VARCHAR(2)   ,
  EAD_CATEGORY  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  SRC_FUNC  CHAR(2)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  MOVE_DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  STOCK_PDATE  DATE   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'EAD_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS EAD_LINE_TRN_XXXXX
(
  EAD_LINE_ID  INT UNSIGNED   ,
  EAD_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    EAD_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'EAD_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS EAD_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  EAD_LINE_ID  INT UNSIGNED   ,
  EAD_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  RACK_CODE  VARCHAR(10)   ,
  RACK_NAME  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  SALES_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PAYMENT_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PAYMENT_SLIP_TRN_XXXXX
(
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PAYMENT_DATE  DATE   NOT NULL,
  PAYMENT_ANNUAL  SMALLINT   NOT NULL,
  PAYMENT_MONTHLY  SMALLINT   NOT NULL,
  PAYMENT_YM  INT   NOT NULL,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  PAYMENT_SLIP_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_CODE  VARCHAR(10)   NOT NULL,
  SUPPLIER_NAME  VARCHAR(60)   NOT NULL,
  RATE_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_TOTAL  DECIMAL(15,3)   NOT NULL,
  FE_PRICE_TOTAL  DECIMAL(15,3)   NOT NULL,
  PO_SLIP_ID  INT UNSIGNED   NOT NULL,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  APT_BALANCE_ID  INT UNSIGNED   ,
  PAYMENT_CUTOFF_DATE  DATE   ,
  PAYMENT_PDATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PAYMENT_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'PAYMENT_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PAYMENT_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PAYMENT_DATE  DATE   NOT NULL,
  PAYMENT_ANNUAL  SMALLINT   NOT NULL,
  PAYMENT_MONTHLY  SMALLINT   NOT NULL,
  PAYMENT_YM  INT   NOT NULL,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  PAYMENT_SLIP_CATEGORY  VARCHAR(2)   ,
  SUPPLIER_CODE  VARCHAR(10)   NOT NULL,
  SUPPLIER_NAME  VARCHAR(60)   NOT NULL,
  RATE_ID  INT UNSIGNED   ,
  TAX_SHIFT_CATEGORY  VARCHAR(1)   ,
  TAX_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_FRACT_CATEGORY  VARCHAR(1)   ,
  PRICE_TOTAL  DECIMAL(15,3)   NOT NULL,
  FE_PRICE_TOTAL  DECIMAL(15,3)   NOT NULL,
  PO_SLIP_ID  INT UNSIGNED   NOT NULL,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  APT_BALANCE_ID  INT UNSIGNED   ,
  PAYMENT_CUTOFF_DATE  DATE   ,
  PAYMENT_PDATE  DATE   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'PAYMENT_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS PAYMENT_LINE_TRN_XXXXX
(
  PAYMENT_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   NOT NULL,
  PAYMENT_CATEGORY  VARCHAR(3)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  SUPPLIER_DATE  DATE   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  PO_LINE_ID  INT UNSIGNED   NOT NULL,
  SUPPLIER_LINE_ID  INT UNSIGNED   NOT NULL,
  REMARKS  VARCHAR(50)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PAYMENT_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'PAYMENT_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS PAYMENT_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PAYMENT_LINE_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  PAYMENT_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   NOT NULL,
  PAYMENT_CATEGORY  VARCHAR(3)   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  SUPPLIER_DATE  DATE   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_PRICE  DECIMAL(12,3)   ,
  PRICE  DECIMAL(15,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  RATE  DECIMAL(8,3)   ,
  CTAX_RATE  DECIMAL(6,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  PO_LINE_ID  INT UNSIGNED   NOT NULL,
  SUPPLIER_LINE_ID  INT UNSIGNED   NOT NULL,
  REMARKS  VARCHAR(50)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ART_BALANCE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS ART_BALANCE_TRN_XXXXX
(
  ART_BALANCE_ID  INT UNSIGNED   ,
  ART_ANNUAL  SMALLINT   NOT NULL,
  ART_MONTHLY  SMALLINT   NOT NULL,
  ART_YM  INT   NOT NULL,
  ART_CUTOFF_DATE  DATE   NOT NULL,
  USER_ID  VARCHAR(30)   NOT NULL,
  USER_NAME  VARCHAR(60)   NOT NULL,
  BA_CODE  VARCHAR(15)   NOT NULL,
  BA_NAME  VARCHAR(60)   NOT NULL,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  LAST_ART_PRICE  DECIMAL(15,3)   ,
  DEPOSIT_PRICE  DECIMAL(15,3)   ,
  ADJ_PRICE  DECIMAL(15,3)   ,
  COV_PRICE  DECIMAL(15,3)   ,
  SALES_PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  RGU_PRICE  DECIMAL(15,3)   ,
  DCT_PRICE  DECIMAL(15,3)   ,
  ETC_PRICE  DECIMAL(15,3)   ,
  THIS_ART_PRICE  DECIMAL(15,3)   ,
  GM_PRICE  DECIMAL(15,3)   ,
  ART_CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  SALES_SLIP_NUM  SMALLINT   ,
  ART_CUTOFF_PDATE  DATETIME   ,
  DEPOSIT_CASH  DECIMAL(15,3)   ,
  DEPOSIT_CHECK  DECIMAL(15,3)   ,
  DEPOSIT_TRANSFER  DECIMAL(15,3)   ,
  DEPOSIT_SC  DECIMAL(15,3)   ,
  DEPOSIT_INST  DECIMAL(15,3)   ,
  DEPOSIT_SETOFF  DECIMAL(15,3)   ,
  DEPOSIT_ETC  DECIMAL(15,3)   ,
  FAMILY_CATEGORY  VARCHAR(1)   ,
  DELIVERY_PLACE_NUM  SMALLINT   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ART_BALANCE_ID
  )
) ENGINE=INNODB;

SELECT 'ART_BALANCE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ART_BALANCE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  ART_BALANCE_ID  INT UNSIGNED   ,
  ART_ANNUAL  SMALLINT   NOT NULL,
  ART_MONTHLY  SMALLINT   NOT NULL,
  ART_YM  INT   NOT NULL,
  ART_CUTOFF_DATE  DATE   NOT NULL,
  USER_ID  VARCHAR(30)   NOT NULL,
  USER_NAME  VARCHAR(60)   NOT NULL,
  BA_CODE  VARCHAR(15)   NOT NULL,
  BA_NAME  VARCHAR(60)   NOT NULL,
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  SALES_CM_CATEGORY  VARCHAR(1)   ,
  LAST_ART_PRICE  DECIMAL(15,3)   ,
  DEPOSIT_PRICE  DECIMAL(15,3)   ,
  ADJ_PRICE  DECIMAL(15,3)   ,
  COV_PRICE  DECIMAL(15,3)   ,
  SALES_PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  RGU_PRICE  DECIMAL(15,3)   ,
  DCT_PRICE  DECIMAL(15,3)   ,
  ETC_PRICE  DECIMAL(15,3)   ,
  THIS_ART_PRICE  DECIMAL(15,3)   ,
  GM_PRICE  DECIMAL(15,3)   ,
  ART_CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  SALES_SLIP_NUM  SMALLINT   ,
  ART_CUTOFF_PDATE  DATETIME   ,
  DEPOSIT_CASH  DECIMAL(15,3)   ,
  DEPOSIT_CHECK  DECIMAL(15,3)   ,
  DEPOSIT_TRANSFER  DECIMAL(15,3)   ,
  DEPOSIT_SC  DECIMAL(15,3)   ,
  DEPOSIT_INST  DECIMAL(15,3)   ,
  DEPOSIT_SETOFF  DECIMAL(15,3)   ,
  DEPOSIT_ETC  DECIMAL(15,3)   ,
  FAMILY_CATEGORY  VARCHAR(1)   ,
  DELIVERY_PLACE_NUM  SMALLINT   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'APT_BALANCE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS APT_BALANCE_TRN_XXXXX
(
  APT_BALANCE_ID  INT UNSIGNED   ,
  APT_ANNUAL  SMALLINT   NOT NULL,
  APT_MONTHLY  SMALLINT   NOT NULL,
  APT_YM  INT   NOT NULL,
  APT_CUTOFF_DATE  DATE   NOT NULL,
  USER_ID  VARCHAR(30)   NOT NULL,
  USER_NAME  VARCHAR(60)   ,
  SUPPLIER_CODE  VARCHAR(10)   NOT NULL,
  SUPPLIER_NAME  VARCHAR(60)   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  PRODUCT_NAME  VARCHAR(60)   NOT NULL,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  PO_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_DATE  DATE   ,
  UNPAID_PRICE  DECIMAL(15,3)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    APT_BALANCE_ID
  )
) ENGINE=INNODB;

SELECT 'APT_BALANCE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS APT_BALANCE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  APT_BALANCE_ID  INT UNSIGNED   ,
  APT_ANNUAL  SMALLINT   NOT NULL,
  APT_MONTHLY  SMALLINT   NOT NULL,
  APT_YM  INT   NOT NULL,
  APT_CUTOFF_DATE  DATE   NOT NULL,
  USER_ID  VARCHAR(30)   NOT NULL,
  USER_NAME  VARCHAR(60)   ,
  SUPPLIER_CODE  VARCHAR(10)   NOT NULL,
  SUPPLIER_NAME  VARCHAR(60)   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  PRODUCT_NAME  VARCHAR(60)   NOT NULL,
  SUPPLIER_PCODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  UNIT_RETAIL_PRICE  DECIMAL(12,3)   ,
  RETAIL_PRICE  DECIMAL(15,3)   ,
  DOL_UNIT_PRICE  DECIMAL(12,3)   ,
  DOL_PRICE  DECIMAL(15,3)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  PO_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_SLIP_ID  INT UNSIGNED   ,
  SUPPLIER_LINE_ID  INT UNSIGNED   ,
  SUPPLIER_DATE  DATE   ,
  UNPAID_PRICE  DECIMAL(15,3)   ,
  REMARKS  VARCHAR(120)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ONLINE_ORDER_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS ONLINE_ORDER_WORK_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  ONLINE_ORDER_ID  VARCHAR(30)   ,
  ONLINE_ITEM_ID  VARCHAR(30)   ,
  SUPPLIER_DATE  DATETIME   ,
  PAYMENT_DATE  DATETIME   ,
  CUSTOMER_EMAIL  VARCHAR(255)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  SKU  VARCHAR(30)   ,
  PRODUCT_NAME  VARCHAR(120)   ,
  QUANTITY  DECIMAL(12,3)   ,
  CURRENCY  VARCHAR(10)   ,
  PRICE  DECIMAL(15,3)   ,
  TAX_PRICE  DECIMAL(12,3)   ,
  SHIPPING_PRICE  DECIMAL(15,3)   ,
  SHIPPING_TAX  DECIMAL(12,3)   ,
  SHIP_SERVICE_LEVEL  VARCHAR(30)   ,
  RECIPIENT_NAME  VARCHAR(60)   ,
  ADDRESS_1  VARCHAR(60)   ,
  ADDRESS_2  VARCHAR(60)   ,
  ADDRESS_3  VARCHAR(60)   ,
  CITY  VARCHAR(60)   ,
  STATE  VARCHAR(60)   ,
  ZIP_CODE  CHAR(8)   ,
  COUNTRY  VARCHAR(10)   ,
  SHIP_TEL  CHAR(15)   ,
  DELIVERY_START_DATE  DATETIME   ,
  DELIVERY_END_DATE  DATETIME   ,
  DELIVERY_TIME_ZONE  VARCHAR(20)   ,
  DELIVERY_INST  VARCHAR(60)   ,
  LINE_NO  SMALLINT   ,
  LOAD_DATE  DATETIME   ,
  PRIMARY KEY (
    USER_ID,
    ONLINE_ORDER_ID,
    ONLINE_ITEM_ID
  )
) ENGINE=INNODB;

SELECT 'INVOICE_DATA_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS INVOICE_DATA_WORK_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  CUSTOMER_CODE  VARCHAR(20)   ,
  SI_TYPE  VARCHAR(1)   ,
  COOL  VARCHAR(1)   ,
  DELIVERY_SLIP_ID  VARCHAR(12)   ,
  SHIP_DATE  DATE   ,
  DELIVERY_DATE  DATE   ,
  TIME_ZONE  VARCHAR(4)   ,
  DELIVERY_CODE  VARCHAR(20)   ,
  DELIVERY_TEL  VARCHAR(15)   ,
  DELIVERY_TEL2  VARCHAR(2)   ,
  DELIVERY_ZIP_CODE  VARCHAR(8)   ,
  DELIVERY_ADDRESS  VARCHAR(64)   ,
  DELIVERY_ADDRESS2  VARCHAR(32)   ,
  DELIVERY_OFFICE1  VARCHAR(50)   ,
  DELIVERY_OFFICE2  VARCHAR(50)   ,
  DELIVERY_NAME  VARCHAR(32)   ,
  DELIVERY_KANA  VARCHAR(50)   ,
  DELIVERY_PRE  VARCHAR(4)   ,
  OWNER_CODE  VARCHAR(20)   ,
  OWNER_TEL  VARCHAR(15)   ,
  OWNER_TEL2  VARCHAR(2)   ,
  OWNER_ZIP_CODE  VARCHAR(8)   ,
  OWNER_ADDRESS  VARCHAR(64)   ,
  OWNER_ADDRESS2  VARCHAR(32)   ,
  OWNER_NAME  VARCHAR(32)   ,
  OWNER_KANA  VARCHAR(50)   ,
  PRODUCT_CODE1  VARCHAR(30)   ,
  PRODUCT_NAME1  VARCHAR(50)   ,
  PRODUCT_CODE2  VARCHAR(30)   ,
  PRODUCT_NAME2  VARCHAR(50)   ,
  HANDLE1  VARCHAR(20)   ,
  HANDLE2  VARCHAR(20)   ,
  SALES_SLIP_ID  VARCHAR(32)   ,
  COLLECT_PRICE  VARCHAR(7)   ,
  CTAX_PRICE  VARCHAR(7)   ,
  LAYAWAY  VARCHAR(1)   ,
  OFFICE_CODE  VARCHAR(6)   ,
  PRINT_CNT  VARCHAR(2)   ,
  NUM_DISP_FLAG  VARCHAR(1)   ,
  BA_CODE  VARCHAR(12)   ,
  BA_TYPE  VARCHAR(3)   ,
  FARE_NO  VARCHAR(2)   ,
  PAYMENT_SET  VARCHAR(1)   ,
  PAYMENT_NO  VARCHAR(9)   ,
  PAYMENT_NO1  VARCHAR(23)   ,
  PAYMENT_NO2  VARCHAR(23)   ,
  PAYMENT_NO3  VARCHAR(23)   ,
  EMAIL_USE  VARCHAR(1)   ,
  EMAIL_ADDRESS  VARCHAR(60)   ,
  MACHINE_TYPE  VARCHAR(1)   ,
  MAIL_MESSAGE  VARCHAR(148)   ,
  DELIVERY_EMAIL_USE  VARCHAR(1)   ,
  DELIVERY_EMAIL_ADDRESS  VARCHAR(60)   ,
  DELIVERY_EMAIL_MESSAGE  VARCHAR(318)   ,
  APS_USE  VARCHAR(1)   ,
  QR_PRINT_FLG  VARCHAR(1)   ,
  APS_BILL_PRICE  VARCHAR(7)   ,
  APS_CTAX_PRICE  VARCHAR(7)   ,
  APS_ZIP_CODE  VARCHAR(8)   ,
  APS_ADDRESS  VARCHAR(64)   ,
  APS_ADDRESS2  VARCHAR(32)   ,
  APS_OFFICE1  VARCHAR(50)   ,
  APS_OFFICE2  VARCHAR(50)   ,
  APS_NAME  VARCHAR(32)   ,
  APS_KANA  VARCHAR(50)   ,
  APS_QNAME  VARCHAR(32)   ,
  APS_QZIP_CODE  VARCHAR(8)   ,
  APS_QADDRESS  VARCHAR(64)   ,
  APS_QADDRESS2  VARCHAR(32)   ,
  APS_QTEL  VARCHAR(15)   ,
  APS_NO  VARCHAR(20)   ,
  APS_PRODUCT_NAME  VARCHAR(50)   ,
  APS_REMARK  VARCHAR(28)   ,
  PRIMARY KEY (
    USER_ID,
    DELIVERY_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'DELIVERY_DEPOSIT_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS DELIVERY_DEPOSIT_WORK_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  PAYMENT_CATEGORY  VARCHAR(1)   ,
  CUSTOMER_CODE  VARCHAR(23)   ,
  DELIVERY_SLIP_ID  VARCHAR(12)   ,
  DATA_CATEGORY  VARCHAR(2)   ,
  CHANGE_COUNT  VARCHAR(2)   ,
  SERVICE_CATEGORY  VARCHAR(12)   ,
  SETTLE_CATEGORY  VARCHAR(2)   ,
  DELIVERY_DATE  DATE   ,
  PRODUCT_PRICE  DECIMAL(15,3)   ,
  COD_PRICE  DECIMAL(12,3)   ,
  SERVICE_PRICE  DECIMAL(12,3)   ,
  SPLIT_PRICE  DECIMAL(12,3)   ,
  STAMP_PRICE  DECIMAL(12,3)   ,
  RG_DATE  DATE   ,
  RG_SLIP_ID  VARCHAR(12)   
) ENGINE=INNODB;

SELECT 'BANK_DEPOSIT_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS BANK_DEPOSIT_WORK_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  COLUMN1  VARCHAR(60)   ,
  PAYMENT_DATE  DATE   ,
  COLUMN2  VARCHAR(60)   ,
  PAYMENT_TYPE  VARCHAR(60)   ,
  PAYMENT_NAME  VARCHAR(60)   ,
  PAYMENT_PRICE  DECIMAL(15,3)   ,
  LINE_NO  INT   
) ENGINE=INNODB;

SELECT 'DISCOUNT_MST_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_MST_XXXXX
(
  DISCOUNT_ID  VARCHAR(20)   ,
  DISCOUNT_NAME  VARCHAR(60)   NOT NULL,
  REMARKS  VARCHAR(120)   ,
  USE_FLAG  CHAR(1)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DISCOUNT_ID
  )
) ENGINE=INNODB;

SELECT 'DISCOUNT_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DISCOUNT_ID  VARCHAR(20)   ,
  DISCOUNT_NAME  VARCHAR(60)   NOT NULL,
  REMARKS  VARCHAR(120)   ,
  USE_FLAG  CHAR(1)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DISCOUNT_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_TRN_XXXXX
(
  DISCOUNT_DATA_ID  INT UNSIGNED   ,
  DISCOUNT_ID  VARCHAR(20)   NOT NULL,
  LINE_NO  INT   NOT NULL,
  DATA_FROM  DECIMAL(12,3)   NOT NULL,
  DATA_TO  DECIMAL(12,3)   NOT NULL,
  DISCOUNT_RATE  DECIMAL(6,3)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DISCOUNT_DATA_ID
  )
) ENGINE=INNODB;

SELECT 'DISCOUNT_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DISCOUNT_DATA_ID  INT UNSIGNED   ,
  DISCOUNT_ID  VARCHAR(20)   NOT NULL,
  LINE_NO  INT   NOT NULL,
  DATA_FROM  DECIMAL(12,3)   NOT NULL,
  DATA_TO  DECIMAL(12,3)   NOT NULL,
  DISCOUNT_RATE  DECIMAL(6,3)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DISCOUNT_REL_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_REL_XXXXX
(
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  DISCOUNT_ID  VARCHAR(20)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    PRODUCT_CODE,
    DISCOUNT_ID
  )
) ENGINE=INNODB;

SELECT 'DISCOUNT_REL_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DISCOUNT_REL_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  PRODUCT_CODE  VARCHAR(20)   NOT NULL,
  DISCOUNT_ID  VARCHAR(20)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'BATCH_LOG';
CREATE TABLE IF NOT EXISTS BATCH_LOG
(
  DOMAIN_ID  VARCHAR(5)   ,
  FUNC_NAME  VARCHAR(255)   ,
  DATETM  DATETIME   ,
  STATUS_CODE  INT   ,
  DISCRIPTION  VARCHAR(255)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   
) ENGINE=MyISAM;

SELECT 'DOMAIN_MST';
CREATE TABLE IF NOT EXISTS DOMAIN_MST
(
  DOMAIN_ID  VARCHAR(5)   ,
  MANAGER_NAME  VARCHAR(60)   ,
  TELNO  VARCHAR(15)   ,
  EMAIL  VARCHAR(255)   ,
  REMARKS  VARCHAR(256)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DOMAIN_ID
  )
) ENGINE=INNODB;

SELECT 'MENU_MST_XXXXX';
CREATE TABLE IF NOT EXISTS MENU_MST_XXXXX
(
  MENU_ID  VARCHAR(5)   ,
  CAPTION  VARCHAR(20)   ,
  DESCRIPTION  VARCHAR(256)   ,
  URL  VARCHAR(256)   ,
  PARENT_ID  VARCHAR(5)   ,
  SEQ  INT   ,
  VALID_TYPE  CHAR(1)   ,
  FONT_COLOR  VARCHAR(6)   ,
  BG_COLOR  VARCHAR(6)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    MENU_ID
  )
) ENGINE=INNODB;

SELECT 'REPORT_TEMPLATE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS REPORT_TEMPLATE_MST_XXXXX
(
  REPORT_ID  VARCHAR(5)   ,
  DESCRIPTION  VARCHAR(256)   ,
  PATH  VARCHAR(256)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    REPORT_ID
  )
) ENGINE=INNODB;

SELECT 'DEPT_MST_XXXXX';
CREATE TABLE IF NOT EXISTS DEPT_MST_XXXXX
(
  DEPT_ID  VARCHAR(30)   ,
  NAME  VARCHAR(60)   ,
  PARENT_ID  VARCHAR(30)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DEPT_ID
  )
) ENGINE=INNODB;

SELECT 'DEPT_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DEPT_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DEPT_ID  VARCHAR(30)   ,
  NAME  VARCHAR(60)   ,
  PARENT_ID  VARCHAR(30)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'USER_MST_XXXXX';
CREATE TABLE IF NOT EXISTS USER_MST_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  NAME_KNJ  VARCHAR(60)   ,
  NAME_KANA  VARCHAR(60)   ,
  DEPT_ID  VARCHAR(30)   ,
  EMAIL  VARCHAR(255)   ,
  PASSWORD  VARCHAR(256)   ,
  EXPIRE_DATE  DATE   ,
  FAIL_COUNT INT(11),
  LOCK_FLG CHAR(1),
  LOCK_DATETM DATETIME,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    USER_ID
  )
) ENGINE=INNODB;

SELECT 'USER_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS USER_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  USER_ID  VARCHAR(30)   ,
  NAME_KNJ  VARCHAR(60)   ,
  NAME_KANA  VARCHAR(60)   ,
  DEPT_ID  VARCHAR(30)   ,
  EMAIL  VARCHAR(255)   ,
  PASSWORD  VARCHAR(256)   ,
  EXPIRE_DATE  DATE   ,
  FAIL_COUNT INT(11),
  LOCK_FLG CHAR(1),
  LOCK_DATETM DATETIME,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ROLE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS ROLE_MST_XXXXX
(
  ROLE_ID  VARCHAR(30)   ,
  NAME  VARCHAR(60)   ,
  REMARKS  VARCHAR(256)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ROLE_ID
  )
) ENGINE=INNODB;

SELECT 'ROLE_CFG_XXXXX';
CREATE TABLE IF NOT EXISTS ROLE_CFG_XXXXX
(
  ROLE_ID  VARCHAR(30)   ,
  MENU_ID  VARCHAR(4)   ,
  VALID_FLAG  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ROLE_ID,
    MENU_ID
  )
) ENGINE=INNODB;

SELECT 'GRANT_ROLE_XXXXX';
CREATE TABLE IF NOT EXISTS GRANT_ROLE_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  ROLE_ID  VARCHAR(4)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    USER_ID,
    ROLE_ID
  )
) ENGINE=INNODB;

SELECT 'GRANT_ROLE_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS GRANT_ROLE_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  USER_ID  VARCHAR(30)   ,
  ROLE_ID  VARCHAR(4)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DETAIL_DISP_ITEM_MST_XXXXX';
CREATE TABLE IF NOT EXISTS DETAIL_DISP_ITEM_MST_XXXXX
(
  DETAIL_ID  VARCHAR(10)   ,
  TARGET  CHAR(1)   ,
  ITEM_ID  VARCHAR(255)   ,
  ITEM_NAME  VARCHAR(30)   ,
  SEQ  INT   ,
  ESSL_FLAG  CHAR(1)   ,
  DISP_FLAG  CHAR(1)   ,
  SORT_FLAG  CHAR(1)   ,
  DETAIL_FLAG  CHAR(1)   ,
  COL_WIDTH  INT   ,
  TEXT_ALIGN  VARCHAR(10)   ,
  FORMAT_TYPE  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DETAIL_ID,
    TARGET,
    ITEM_ID
  )
) ENGINE=INNODB;

SELECT 'DETAIL_DISP_ITEM_CFG_XXXXX';
CREATE TABLE IF NOT EXISTS DETAIL_DISP_ITEM_CFG_XXXXX
(
  USER_ID  VARCHAR(30)   ,
  DETAIL_ID  VARCHAR(10)   ,
  TARGET  CHAR(1)   ,
  ITEM_ID  VARCHAR(255)   ,
  SEQ  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    USER_ID,
    DETAIL_ID,
    TARGET,
    ITEM_ID
  )
) ENGINE=INNODB;

SELECT 'NEWS_MST_XXXXX';
CREATE TABLE IF NOT EXISTS NEWS_MST_XXXXX
(
  DESCRIPTION  VARCHAR(512)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   
) ENGINE=INNODB;

SELECT 'SCHEDULE_MST_XXXXX';
CREATE TABLE IF NOT EXISTS SCHEDULE_MST_XXXXX
(
  SCHEDULE_ID  INT UNSIGNED   ,
  SCHEDULE_NAME  VARCHAR(255)   ,
  COMMAND  VARCHAR(255)   ,
  EXEC_TYPE  SMALLINT   ,
  EXEC_DATE  SMALLINT   ,
  EXEC_TIME  TIME   ,
  VALID_FLAG  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SCHEDULE_ID
  )
) ENGINE=INNODB;

SELECT 'SCHEDULE_MST_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS SCHEDULE_MST_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SCHEDULE_ID  INT UNSIGNED   ,
  SCHEDULE_NAME  VARCHAR(255)   ,
  COMMAND  VARCHAR(255)   ,
  EXEC_TYPE  SMALLINT   ,
  EXEC_DATE  SMALLINT   ,
  EXEC_TIME  TIME   ,
  VALID_FLAG  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'FILE_INFO_XXXXX';
CREATE TABLE IF NOT EXISTS FILE_INFO_XXXXX
(
  FILE_ID  INT UNSIGNED   ,
  TITLE  VARCHAR(60)   ,
  FILE_NAME  VARCHAR(60)   ,
  REAL_FILE_NAME  VARCHAR(256)   ,
  FILE_SIZE  INT UNSIGNED   ,
  OPEN_LEVEL  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    FILE_ID
  )
) ENGINE=INNODB;

SELECT 'FILE_INFO_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS FILE_INFO_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  FILE_ID  INT UNSIGNED   ,
  TITLE  VARCHAR(60)   ,
  FILE_NAME  VARCHAR(60)   ,
  REAL_FILE_NAME  VARCHAR(256)   ,
  FILE_SIZE  INT UNSIGNED   ,
  OPEN_LEVEL  CHAR(1)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ONLINE_ORDER_REL_XXXXX';
CREATE TABLE IF NOT EXISTS ONLINE_ORDER_REL_XXXXX
(
  RO_SLIP_ID  INT UNSIGNED   NOT NULL,
  RO_LINE_ID  INT UNSIGNED   NOT NULL,
  ONLINE_ORDER_ID  VARCHAR(30)   NOT NULL,
  ONLINE_ITEM_ID  VARCHAR(30)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    RO_SLIP_ID,
    RO_LINE_ID,
    ONLINE_ORDER_ID,
    ONLINE_ITEM_ID
  )
) ENGINE=INNODB;

SELECT 'ONLINE_ORDER_REL_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ONLINE_ORDER_REL_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  RO_SLIP_ID  INT UNSIGNED   NOT NULL,
  RO_LINE_ID  INT UNSIGNED   NOT NULL,
  ONLINE_ORDER_ID  VARCHAR(30)   NOT NULL,
  ONLINE_ITEM_ID  VARCHAR(30)   NOT NULL,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'DELIVERY_DEPOSIT_REL_XXXXX';
CREATE TABLE IF NOT EXISTS DELIVERY_DEPOSIT_REL_XXXXX
(
  SALES_SLIP_ID  INT UNSIGNED   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  DELIVERY_SLIP_ID  VARCHAR(12)   ,
  DATA_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    SALES_SLIP_ID,
    DEPOSIT_SLIP_ID,
    DELIVERY_SLIP_ID,
    DATA_CATEGORY
  )
) ENGINE=INNODB;

SELECT 'DELIVERY_DEPOSIT_REL_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS DELIVERY_DEPOSIT_REL_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  SALES_SLIP_ID  INT UNSIGNED   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  DELIVERY_SLIP_ID  VARCHAR(12)   ,
  DATA_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'BANK_DEPOSIT_REL_XXXXX';
CREATE TABLE IF NOT EXISTS BANK_DEPOSIT_REL_XXXXX
(
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  PAYMENT_DATE  DATE   ,
  PAYMENT_NAME  VARCHAR(60)   ,
  LINE_NO  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    DEPOSIT_SLIP_ID,
    PAYMENT_DATE,
    PAYMENT_NAME
  )
) ENGINE=INNODB;

SELECT 'BANK_DEPOSIT_REL_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS BANK_DEPOSIT_REL_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  DEPOSIT_SLIP_ID  INT UNSIGNED   ,
  PAYMENT_DATE  DATE   ,
  PAYMENT_NAME  VARCHAR(60)   ,
  LINE_NO  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_RANK_SUMMARY_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_RANK_SUMMARY_XXXXX
(
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_CRE_USER  VARCHAR(30)   ,
  NAME_KNJ  VARCHAR(60)   ,
  RANK_CODE  VARCHAR(2)   ,
  RANK_NAME  VARCHAR(60)   ,
  SALES_PRICE_6  DECIMAL(15,3)   ,
  SALES_PRICE_5  DECIMAL(15,3)   ,
  SALES_PRICE_4  DECIMAL(15,3)   ,
  SALES_PRICE_3  DECIMAL(15,3)   ,
  SALES_PRICE_2  DECIMAL(15,3)   ,
  SALES_PRICE_1  DECIMAL(15,3)   ,
  SALES_PRICE_LSM  DECIMAL(15,3)   ,
  FIRST_SALES_DATE  DATE   ,
  LAST_SALES_DATE  DATE   ,
  ENROLL_TERM_SPAN  INT   ,
  DEFECT_TERM_SPAN  INT   ,
  CRE_DATETM  DATETIME   ,
  PRIMARY KEY (
    CUSTOMER_CODE
  )
) ENGINE=INNODB;

SELECT 'CUSTOMER_SALES_TEMP_XXXXX';
CREATE TABLE IF NOT EXISTS CUSTOMER_SALES_TEMP_XXXXX
(
  CUSTOMER_CODE  VARCHAR(15)   ,
  CUSTOMER_NAME  VARCHAR(60)   ,
  CUSTOMER_TEL  CHAR(15)   ,
  SALES_COUNT  INT   ,
  FIRST_SALES_DATE  DATE   ,
  LAST_SALES_DATE  DATE   ,
  ENROLL_TERM_SPAN  INT   ,
  DEFECT_TERM_SPAN  INT   ,
  SALES_PRICE_LSM  DECIMAL(15,3)   ,
  PRICE_LSM_AVERAGE  DECIMAL(15,3)   ,
  SALES_PRICE_TOTAL  DECIMAL(15,3)   ,
  PRICE_TOTAL_AVERAGE  DECIMAL(15,3)   ,
  CUSTOMER_UPD_FLAG  CHAR(1)   ,
  ADJUST_NAME_ID  INT   ,
  PRIMARY KEY (
    CUSTOMER_CODE
  )
) ENGINE=INNODB;

SELECT 'ENTRUST_EAD_SLIP_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS ENTRUST_EAD_SLIP_TRN_XXXXX
(
  ENTRUST_EAD_SLIP_ID  INT UNSIGNED   ,
  ENTRUST_EAD_DATE  DATE   ,
  ENTRUST_EAD_ANNUAL  SMALLINT   ,
  ENTRUST_EAD_MONTHLY  SMALLINT   ,
  ENTRUST_EAD_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  ENTRUST_EAD_CATEGORY  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  DISPATCH_ORDER_PRINT_COUNT  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ENTRUST_EAD_SLIP_ID
  )
) ENGINE=INNODB;

SELECT 'ENTRUST_EAD_SLIP_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ENTRUST_EAD_SLIP_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  ENTRUST_EAD_SLIP_ID  INT UNSIGNED   ,
  ENTRUST_EAD_DATE  DATE   ,
  ENTRUST_EAD_ANNUAL  SMALLINT   ,
  ENTRUST_EAD_MONTHLY  SMALLINT   ,
  ENTRUST_EAD_YM  INT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  ENTRUST_EAD_CATEGORY  VARCHAR(2)   ,
  REMARKS  VARCHAR(120)   ,
  PO_SLIP_ID  INT UNSIGNED   ,
  DISPATCH_ORDER_PRINT_COUNT  INT   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'ENTRUST_EAD_LINE_TRN_XXXXX';
CREATE TABLE IF NOT EXISTS ENTRUST_EAD_LINE_TRN_XXXXX
(
  ENTRUST_EAD_LINE_ID  INT UNSIGNED   ,
  ENTRUST_EAD_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  PO_LINE_ID  INT UNSIGNED   ,
  REL_ENTRUST_EAD_LINE_ID  INT UNSIGNED   ,
  ENTRUST_EAD_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    ENTRUST_EAD_LINE_ID
  )
) ENGINE=INNODB;

SELECT 'ENTRUST_EAD_LINE_TRN_HIST_XXXXX';
CREATE TABLE IF NOT EXISTS ENTRUST_EAD_LINE_TRN_HIST_XXXXX
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  ENTRUST_EAD_LINE_ID  INT UNSIGNED   ,
  ENTRUST_EAD_SLIP_ID  INT UNSIGNED   ,
  LINE_NO  SMALLINT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  PRODUCT_ABSTRACT  VARCHAR(60)   ,
  QUANTITY  DECIMAL(12,3)   ,
  REMARKS  VARCHAR(120)   ,
  PO_LINE_ID  INT UNSIGNED   ,
  REL_ENTRUST_EAD_LINE_ID  INT UNSIGNED   ,
  ENTRUST_EAD_CATEGORY  VARCHAR(2)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

SELECT 'STDDEV_DATE_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS STDDEV_DATE_WORK_XXXXX
(
  SALES_DATE  DATE   ,
  PRIMARY KEY (
    SALES_DATE
  )
) ENGINE=INNODB;

SELECT 'STDDEV_AGGREGATE_DATA_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS STDDEV_AGGREGATE_DATA_WORK_XXXXX
(
  SALES_DATE  DATE   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  PRIMARY KEY (
    SALES_DATE,
    PRODUCT_CODE
  )
) ENGINE=INNODB;

SELECT 'STDDEV_YM_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS STDDEV_YM_WORK_XXXXX
(
  SESSION_ID  VARCHAR(255)   ,
  YM  INT   ,
  PRIMARY KEY (
    SESSION_ID,
    YM
  )
) ENGINE=INNODB;

SELECT 'STDDEV_AGGREGATE_YM_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS STDDEV_AGGREGATE_YM_WORK_XXXXX
(
  SESSION_ID  VARCHAR(255)   ,
  YM  INT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  PRIMARY KEY (
    SESSION_ID,
    YM,
    PRODUCT_CODE
  )
) ENGINE=INNODB;

SELECT 'STDDEV_PRODUCT_SALES_YM_WORK_XXXXX';
CREATE TABLE IF NOT EXISTS STDDEV_PRODUCT_SALES_YM_WORK_XXXXX
(
  SESSION_ID  VARCHAR(255)   ,
  YM  INT   ,
  PRODUCT_CODE  VARCHAR(20)   ,
  QUANTITY  DECIMAL(12,3)   ,
  PRIMARY KEY (
    SESSION_ID,
    YM,
    PRODUCT_CODE
  )
) ENGINE=INNODB;

SELECT 'BILL_OLD_XXXXX';
CREATE TABLE IF NOT EXISTS BILL_OLD_XXXXX
(
  BILL_ID  INT UNSIGNED   ,
  STATUS  CHAR(1)   ,
  BILL_YEAR  SMALLINT   ,
  BILL_MONTH  SMALLINT   ,
  BILL_YM  INT   ,
  BILL_CUTOFF_DATE  DATE   ,
  CUTOFF_GROUP  CHAR(2)   ,
  PAYBACK_CYCLE_CATEGORY  VARCHAR(1)   ,
  CUTOFF_PDATE  DATETIME   ,
  REMARKS  VARCHAR(120)   ,
  BA_CODE  VARCHAR(15)   ,
  CUSTOMER_CODE  VARCHAR(15)   ,
  LAST_BILL_PRICE  DECIMAL(15,3)   ,
  DEPOSIT_PRICE  DECIMAL(15,3)   ,
  ADJ_PRICE  DECIMAL(15,3)   ,
  COV_PRICE  DECIMAL(15,3)   ,
  SALES_PRICE  DECIMAL(15,3)   ,
  CTAX_PRICE  DECIMAL(12,3)   ,
  RGU_PRICE  DECIMAL(15,3)   ,
  DCT_PRICE  DECIMAL(15,3)   ,
  ETC_PRICE  DECIMAL(15,3)   ,
  THIS_BILL_PRICE  DECIMAL(15,3)   ,
  SLIP_NUM  SMALLINT   ,
  COD_LAST_BILL_PRICE  DECIMAL(15,3)   ,
  COD_DEPOSIT_PRICE  DECIMAL(15,3)   ,
  COD_ADJ_PRICE  DECIMAL(15,3)   ,
  COD_COV_PRICE  DECIMAL(15,3)   ,
  COD_SALES_PRICE  DECIMAL(15,3)   ,
  COD_CTAX_PRICE  DECIMAL(12,3)   ,
  COD_RGU_PRICE  DECIMAL(15,3)   ,
  COD_DCT_PRICE  DECIMAL(15,3)   ,
  COD_ETC_PRICE  DECIMAL(15,3)   ,
  COD_THIS_BILL_PRICE  DECIMAL(15,3)   ,
  COD_SLIP_NUM  SMALLINT   ,
  USER_ID  VARCHAR(30)   ,
  USER_NAME  VARCHAR(60)   ,
  PAYBACK_PLAN_DATE  DATE   ,
  LAST_PRINT_DATE  DATE   ,
  BILL_PRINT_COUNT  INT   ,
  BILL_CRT_CATEGORY  VARCHAR(2)   ,
  LAST_SALES_DATE  DATE   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    BILL_ID
  )
) ENGINE=INNODB;

SELECT 'PASSWORD_MAKER_XXXXX';
CREATE TABLE IF NOT EXISTS PASSWORD_MAKER_XXXXX
(
  PASSWORD_MAKER_ID  VARCHAR(30)   ,
  USER_ID  VARCHAR(30)   ,
  PASSWORD VARCHAR(256),
  PASS_UPD_DATETM  DATETIME   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30),
  PRIMARY KEY (
    PASSWORD_MAKER_ID
  )
) ENGINE=INNODB;


DELIMITER //
SELECT 'MINE_MST_XXXXX'//
CREATE TRIGGER MINE_MST_XXXXX_INS AFTER INSERT ON MINE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.COMPANY_NAME,NEW.COMPANY_KANA,NEW.COMPANY_ABBR,NEW.COMPANY_CEO_NAME,NEW.COMPANY_CEO_TITLE,NEW.COMPANY_ZIP_CODE,NEW.COMPANY_ADDRESS_1,NEW.COMPANY_ADDRESS_2,NEW.COMPANY_TEL,NEW.COMPANY_FAX,NEW.COMPANY_EMAIL,NEW.COMPANY_WEB_SITE,NEW.CUTOFF_GROUP,NEW.CLOSE_MONTH,NEW.STOCK_HOLD_DAYS,NEW.STOCK_HOLD_TERM_CALC_CATEGORY,NEW.MIN_PO_LOT_CALC_DAYS,NEW.MIN_PO_LOT_NUM,NEW.MIN_PO_NUM,NEW.MAX_PO_NUM_CALC_DAYS,NEW.TAX_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRODUCT_FRACT_CATEGORY,NEW.UNIT_PRICE_DEC_ALIGNMENT,NEW.NUM_DEC_ALIGNMENT,NEW.PASSWORD_VALID_DAYS,NEW.LOGO_IMG_PATH,NEW.REMARKS,NEW.TAX_SHIFT_CATEGORY,NEW.STATS_DEC_ALIGNMENT,NEW.FIND_TERM_INIT_DAYS,NEW.TAX_FRACT_CATEGORY,NEW.DELIVERY_CUST_ID,NEW.DEFICIENCY_RATE,NEW.MAX_ENTRUST_PO_TIMELAG,NEW.SAFETY_COEFFICIENT,NEW.TOTAL_FAIL_COUNT,NEW.PASSWORD_HIST_COUNT,NEW.PASSWORD_LENGTH,NEW.PASSWORD_CHAR_TYPE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER MINE_MST_XXXXX_UPD AFTER UPDATE ON MINE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.COMPANY_NAME,NEW.COMPANY_KANA,NEW.COMPANY_ABBR,NEW.COMPANY_CEO_NAME,NEW.COMPANY_CEO_TITLE,NEW.COMPANY_ZIP_CODE,NEW.COMPANY_ADDRESS_1,NEW.COMPANY_ADDRESS_2,NEW.COMPANY_TEL,NEW.COMPANY_FAX,NEW.COMPANY_EMAIL,NEW.COMPANY_WEB_SITE,NEW.CUTOFF_GROUP,NEW.CLOSE_MONTH,NEW.STOCK_HOLD_DAYS,NEW.STOCK_HOLD_TERM_CALC_CATEGORY,NEW.MIN_PO_LOT_CALC_DAYS,NEW.MIN_PO_LOT_NUM,NEW.MIN_PO_NUM,NEW.MAX_PO_NUM_CALC_DAYS,NEW.TAX_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRODUCT_FRACT_CATEGORY,NEW.UNIT_PRICE_DEC_ALIGNMENT,NEW.NUM_DEC_ALIGNMENT,NEW.PASSWORD_VALID_DAYS,NEW.LOGO_IMG_PATH,NEW.REMARKS,NEW.TAX_SHIFT_CATEGORY,NEW.STATS_DEC_ALIGNMENT,NEW.FIND_TERM_INIT_DAYS,NEW.TAX_FRACT_CATEGORY,NEW.DELIVERY_CUST_ID,NEW.DEFICIENCY_RATE,NEW.MAX_ENTRUST_PO_TIMELAG,NEW.SAFETY_COEFFICIENT,NEW.TOTAL_FAIL_COUNT,NEW.PASSWORD_HIST_COUNT,NEW.PASSWORD_LENGTH,NEW.PASSWORD_CHAR_TYPE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER MINE_MST_XXXXX_DEL AFTER DELETE ON MINE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('MINE_MST');

INSERT INTO MINE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,COMPANY_NAME,COMPANY_KANA,COMPANY_ABBR,COMPANY_CEO_NAME,COMPANY_CEO_TITLE,COMPANY_ZIP_CODE,COMPANY_ADDRESS_1,COMPANY_ADDRESS_2,COMPANY_TEL,COMPANY_FAX,COMPANY_EMAIL,COMPANY_WEB_SITE,CUTOFF_GROUP,CLOSE_MONTH,STOCK_HOLD_DAYS,STOCK_HOLD_TERM_CALC_CATEGORY,MIN_PO_LOT_CALC_DAYS,MIN_PO_LOT_NUM,MIN_PO_NUM,MAX_PO_NUM_CALC_DAYS,TAX_CATEGORY,PRICE_FRACT_CATEGORY,PRODUCT_FRACT_CATEGORY,UNIT_PRICE_DEC_ALIGNMENT,NUM_DEC_ALIGNMENT,PASSWORD_VALID_DAYS,LOGO_IMG_PATH,REMARKS,TAX_SHIFT_CATEGORY,STATS_DEC_ALIGNMENT,FIND_TERM_INIT_DAYS,TAX_FRACT_CATEGORY,DELIVERY_CUST_ID,DEFICIENCY_RATE,MAX_ENTRUST_PO_TIMELAG,SAFETY_COEFFICIENT,TOTAL_FAIL_COUNT,PASSWORD_HIST_COUNT,PASSWORD_LENGTH,PASSWORD_CHAR_TYPE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.COMPANY_NAME,OLD.COMPANY_KANA,OLD.COMPANY_ABBR,OLD.COMPANY_CEO_NAME,OLD.COMPANY_CEO_TITLE,OLD.COMPANY_ZIP_CODE,OLD.COMPANY_ADDRESS_1,OLD.COMPANY_ADDRESS_2,OLD.COMPANY_TEL,OLD.COMPANY_FAX,OLD.COMPANY_EMAIL,OLD.COMPANY_WEB_SITE,OLD.CUTOFF_GROUP,OLD.CLOSE_MONTH,OLD.STOCK_HOLD_DAYS,OLD.STOCK_HOLD_TERM_CALC_CATEGORY,OLD.MIN_PO_LOT_CALC_DAYS,OLD.MIN_PO_LOT_NUM,OLD.MIN_PO_NUM,OLD.MAX_PO_NUM_CALC_DAYS,OLD.TAX_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.PRODUCT_FRACT_CATEGORY,OLD.UNIT_PRICE_DEC_ALIGNMENT,OLD.NUM_DEC_ALIGNMENT,OLD.PASSWORD_VALID_DAYS,OLD.LOGO_IMG_PATH,OLD.REMARKS,OLD.TAX_SHIFT_CATEGORY,OLD.STATS_DEC_ALIGNMENT,OLD.FIND_TERM_INIT_DAYS,OLD.TAX_FRACT_CATEGORY,OLD.DELIVERY_CUST_ID,OLD.DEFICIENCY_RATE,OLD.MAX_ENTRUST_PO_TIMELAG,OLD.SAFETY_COEFFICIENT,OLD.TOTAL_FAIL_COUNT,OLD.PASSWORD_HIST_COUNT,OLD.PASSWORD_LENGTH,OLD.PASSWORD_CHAR_TYPE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PRODUCT_MST_XXXXX'//
CREATE TRIGGER PRODUCT_MST_XXXXX_INS AFTER INSERT ON PRODUCT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_MST');

INSERT INTO PRODUCT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,PRODUCT_NAME,PRODUCT_KANA,ONLINE_PCODE,SUPPLIER_PCODE,SUPPLIER_CODE,RACK_CODE,SUPPLIER_PRICE_YEN,SUPPLIER_PRICE_DOL,RETAIL_PRICE,SO_RATE,UNIT_CATEGORY,PACK_QUANTITY,JAN_PCODE,WIDTH,WIDTH_UNIT_SIZE_CATEGORY,DEPTH,DEPTH_UNIT_SIZE_CATEGORY,HEIGHT,HEIGHT_UNIT_SIZE_CATEGORY,WEIGHT,WEIGHT_UNIT_SIZE_CATEGORY,LENGTH,LENGTH_UNIT_SIZE_CATEGORY,PO_LOT,LOT_UPD_FLAG,LEAD_TIME,PO_NUM,PO_UPD_FLAG,AVG_SHIP_COUNT,MAX_STOCK_NUM,STOCK_UPD_FLAG,TERM_SHIP_NUM,MAX_PO_NUM,MAX_PO_UPD_FLAG,FRACT_CATEGORY,TAX_CATEGORY,STOCK_CTL_CATEGORY,STOCK_ASSES_CATEGORY,PRODUCT_CATEGORY,PRODUCT_1,PRODUCT_2,PRODUCT_3,RO_MAX_NUM,PRODUCT_RANK,SET_TYPE_CATEGORY,PRODUCT_STATUS_CATEGORY,PRODUCT_STOCK_CATEGORY,PRODUCT_PURVAY_CATEGORY,PRODUCT_STANDARD_CATEGORY,CORE_NUM,NUM_1,NUM_2,NUM_3,NUM_4,NUM_5,DEC_1,DEC_2,DEC_3,DEC_4,DEC_5,DISCARD_DATE,REMARKS,EAD_REMARKS,COMMENT_DATA,LAST_RO_DATE,SALES_STANDARD_DEVIATION,MINE_SAFETY_STOCK,MINE_SAFETY_STOCK_UPD_FLAG,ENTRUST_SAFETY_STOCK,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PRODUCT_CODE,NEW.PRODUCT_NAME,NEW.PRODUCT_KANA,NEW.ONLINE_PCODE,NEW.SUPPLIER_PCODE,NEW.SUPPLIER_CODE,NEW.RACK_CODE,NEW.SUPPLIER_PRICE_YEN,NEW.SUPPLIER_PRICE_DOL,NEW.RETAIL_PRICE,NEW.SO_RATE,NEW.UNIT_CATEGORY,NEW.PACK_QUANTITY,NEW.JAN_PCODE,NEW.WIDTH,NEW.WIDTH_UNIT_SIZE_CATEGORY,NEW.DEPTH,NEW.DEPTH_UNIT_SIZE_CATEGORY,NEW.HEIGHT,NEW.HEIGHT_UNIT_SIZE_CATEGORY,NEW.WEIGHT,NEW.WEIGHT_UNIT_SIZE_CATEGORY,NEW.LENGTH,NEW.LENGTH_UNIT_SIZE_CATEGORY,NEW.PO_LOT,NEW.LOT_UPD_FLAG,NEW.LEAD_TIME,NEW.PO_NUM,NEW.PO_UPD_FLAG,NEW.AVG_SHIP_COUNT,NEW.MAX_STOCK_NUM,NEW.STOCK_UPD_FLAG,NEW.TERM_SHIP_NUM,NEW.MAX_PO_NUM,NEW.MAX_PO_UPD_FLAG,NEW.FRACT_CATEGORY,NEW.TAX_CATEGORY,NEW.STOCK_CTL_CATEGORY,NEW.STOCK_ASSES_CATEGORY,NEW.PRODUCT_CATEGORY,NEW.PRODUCT_1,NEW.PRODUCT_2,NEW.PRODUCT_3,NEW.RO_MAX_NUM,NEW.PRODUCT_RANK,NEW.SET_TYPE_CATEGORY,NEW.PRODUCT_STATUS_CATEGORY,NEW.PRODUCT_STOCK_CATEGORY,NEW.PRODUCT_PURVAY_CATEGORY,NEW.PRODUCT_STANDARD_CATEGORY,NEW.CORE_NUM,NEW.NUM_1,NEW.NUM_2,NEW.NUM_3,NEW.NUM_4,NEW.NUM_5,NEW.DEC_1,NEW.DEC_2,NEW.DEC_3,NEW.DEC_4,NEW.DEC_5,NEW.DISCARD_DATE,NEW.REMARKS,NEW.EAD_REMARKS,NEW.COMMENT_DATA,NEW.LAST_RO_DATE,NEW.SALES_STANDARD_DEVIATION,NEW.MINE_SAFETY_STOCK,NEW.MINE_SAFETY_STOCK_UPD_FLAG,NEW.ENTRUST_SAFETY_STOCK,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_MST_XXXXX_UPD AFTER UPDATE ON PRODUCT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_MST');

INSERT INTO PRODUCT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,PRODUCT_NAME,PRODUCT_KANA,ONLINE_PCODE,SUPPLIER_PCODE,SUPPLIER_CODE,RACK_CODE,SUPPLIER_PRICE_YEN,SUPPLIER_PRICE_DOL,RETAIL_PRICE,SO_RATE,UNIT_CATEGORY,PACK_QUANTITY,JAN_PCODE,WIDTH,WIDTH_UNIT_SIZE_CATEGORY,DEPTH,DEPTH_UNIT_SIZE_CATEGORY,HEIGHT,HEIGHT_UNIT_SIZE_CATEGORY,WEIGHT,WEIGHT_UNIT_SIZE_CATEGORY,LENGTH,LENGTH_UNIT_SIZE_CATEGORY,PO_LOT,LOT_UPD_FLAG,LEAD_TIME,PO_NUM,PO_UPD_FLAG,AVG_SHIP_COUNT,MAX_STOCK_NUM,STOCK_UPD_FLAG,TERM_SHIP_NUM,MAX_PO_NUM,MAX_PO_UPD_FLAG,FRACT_CATEGORY,TAX_CATEGORY,STOCK_CTL_CATEGORY,STOCK_ASSES_CATEGORY,PRODUCT_CATEGORY,PRODUCT_1,PRODUCT_2,PRODUCT_3,RO_MAX_NUM,PRODUCT_RANK,SET_TYPE_CATEGORY,PRODUCT_STATUS_CATEGORY,PRODUCT_STOCK_CATEGORY,PRODUCT_PURVAY_CATEGORY,PRODUCT_STANDARD_CATEGORY,CORE_NUM,NUM_1,NUM_2,NUM_3,NUM_4,NUM_5,DEC_1,DEC_2,DEC_3,DEC_4,DEC_5,DISCARD_DATE,REMARKS,EAD_REMARKS,COMMENT_DATA,LAST_RO_DATE,SALES_STANDARD_DEVIATION,MINE_SAFETY_STOCK,MINE_SAFETY_STOCK_UPD_FLAG,ENTRUST_SAFETY_STOCK,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PRODUCT_CODE,NEW.PRODUCT_NAME,NEW.PRODUCT_KANA,NEW.ONLINE_PCODE,NEW.SUPPLIER_PCODE,NEW.SUPPLIER_CODE,NEW.RACK_CODE,NEW.SUPPLIER_PRICE_YEN,NEW.SUPPLIER_PRICE_DOL,NEW.RETAIL_PRICE,NEW.SO_RATE,NEW.UNIT_CATEGORY,NEW.PACK_QUANTITY,NEW.JAN_PCODE,NEW.WIDTH,NEW.WIDTH_UNIT_SIZE_CATEGORY,NEW.DEPTH,NEW.DEPTH_UNIT_SIZE_CATEGORY,NEW.HEIGHT,NEW.HEIGHT_UNIT_SIZE_CATEGORY,NEW.WEIGHT,NEW.WEIGHT_UNIT_SIZE_CATEGORY,NEW.LENGTH,NEW.LENGTH_UNIT_SIZE_CATEGORY,NEW.PO_LOT,NEW.LOT_UPD_FLAG,NEW.LEAD_TIME,NEW.PO_NUM,NEW.PO_UPD_FLAG,NEW.AVG_SHIP_COUNT,NEW.MAX_STOCK_NUM,NEW.STOCK_UPD_FLAG,NEW.TERM_SHIP_NUM,NEW.MAX_PO_NUM,NEW.MAX_PO_UPD_FLAG,NEW.FRACT_CATEGORY,NEW.TAX_CATEGORY,NEW.STOCK_CTL_CATEGORY,NEW.STOCK_ASSES_CATEGORY,NEW.PRODUCT_CATEGORY,NEW.PRODUCT_1,NEW.PRODUCT_2,NEW.PRODUCT_3,NEW.RO_MAX_NUM,NEW.PRODUCT_RANK,NEW.SET_TYPE_CATEGORY,NEW.PRODUCT_STATUS_CATEGORY,NEW.PRODUCT_STOCK_CATEGORY,NEW.PRODUCT_PURVAY_CATEGORY,NEW.PRODUCT_STANDARD_CATEGORY,NEW.CORE_NUM,NEW.NUM_1,NEW.NUM_2,NEW.NUM_3,NEW.NUM_4,NEW.NUM_5,NEW.DEC_1,NEW.DEC_2,NEW.DEC_3,NEW.DEC_4,NEW.DEC_5,NEW.DISCARD_DATE,NEW.REMARKS,NEW.EAD_REMARKS,NEW.COMMENT_DATA,NEW.LAST_RO_DATE,NEW.SALES_STANDARD_DEVIATION,NEW.MINE_SAFETY_STOCK,NEW.MINE_SAFETY_STOCK_UPD_FLAG,NEW.ENTRUST_SAFETY_STOCK,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_MST_XXXXX_DEL AFTER DELETE ON PRODUCT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_MST');

INSERT INTO PRODUCT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,PRODUCT_NAME,PRODUCT_KANA,ONLINE_PCODE,SUPPLIER_PCODE,SUPPLIER_CODE,RACK_CODE,SUPPLIER_PRICE_YEN,SUPPLIER_PRICE_DOL,RETAIL_PRICE,SO_RATE,UNIT_CATEGORY,PACK_QUANTITY,JAN_PCODE,WIDTH,WIDTH_UNIT_SIZE_CATEGORY,DEPTH,DEPTH_UNIT_SIZE_CATEGORY,HEIGHT,HEIGHT_UNIT_SIZE_CATEGORY,WEIGHT,WEIGHT_UNIT_SIZE_CATEGORY,LENGTH,LENGTH_UNIT_SIZE_CATEGORY,PO_LOT,LOT_UPD_FLAG,LEAD_TIME,PO_NUM,PO_UPD_FLAG,AVG_SHIP_COUNT,MAX_STOCK_NUM,STOCK_UPD_FLAG,TERM_SHIP_NUM,MAX_PO_NUM,MAX_PO_UPD_FLAG,FRACT_CATEGORY,TAX_CATEGORY,STOCK_CTL_CATEGORY,STOCK_ASSES_CATEGORY,PRODUCT_CATEGORY,PRODUCT_1,PRODUCT_2,PRODUCT_3,RO_MAX_NUM,PRODUCT_RANK,SET_TYPE_CATEGORY,PRODUCT_STATUS_CATEGORY,PRODUCT_STOCK_CATEGORY,PRODUCT_PURVAY_CATEGORY,PRODUCT_STANDARD_CATEGORY,CORE_NUM,NUM_1,NUM_2,NUM_3,NUM_4,NUM_5,DEC_1,DEC_2,DEC_3,DEC_4,DEC_5,DISCARD_DATE,REMARKS,EAD_REMARKS,COMMENT_DATA,LAST_RO_DATE,SALES_STANDARD_DEVIATION,MINE_SAFETY_STOCK,MINE_SAFETY_STOCK_UPD_FLAG,ENTRUST_SAFETY_STOCK,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PRODUCT_CODE,OLD.PRODUCT_NAME,OLD.PRODUCT_KANA,OLD.ONLINE_PCODE,OLD.SUPPLIER_PCODE,OLD.SUPPLIER_CODE,OLD.RACK_CODE,OLD.SUPPLIER_PRICE_YEN,OLD.SUPPLIER_PRICE_DOL,OLD.RETAIL_PRICE,OLD.SO_RATE,OLD.UNIT_CATEGORY,OLD.PACK_QUANTITY,OLD.JAN_PCODE,OLD.WIDTH,OLD.WIDTH_UNIT_SIZE_CATEGORY,OLD.DEPTH,OLD.DEPTH_UNIT_SIZE_CATEGORY,OLD.HEIGHT,OLD.HEIGHT_UNIT_SIZE_CATEGORY,OLD.WEIGHT,OLD.WEIGHT_UNIT_SIZE_CATEGORY,OLD.LENGTH,OLD.LENGTH_UNIT_SIZE_CATEGORY,OLD.PO_LOT,OLD.LOT_UPD_FLAG,OLD.LEAD_TIME,OLD.PO_NUM,OLD.PO_UPD_FLAG,OLD.AVG_SHIP_COUNT,OLD.MAX_STOCK_NUM,OLD.STOCK_UPD_FLAG,OLD.TERM_SHIP_NUM,OLD.MAX_PO_NUM,OLD.MAX_PO_UPD_FLAG,OLD.FRACT_CATEGORY,OLD.TAX_CATEGORY,OLD.STOCK_CTL_CATEGORY,OLD.STOCK_ASSES_CATEGORY,OLD.PRODUCT_CATEGORY,OLD.PRODUCT_1,OLD.PRODUCT_2,OLD.PRODUCT_3,OLD.RO_MAX_NUM,OLD.PRODUCT_RANK,OLD.SET_TYPE_CATEGORY,OLD.PRODUCT_STATUS_CATEGORY,OLD.PRODUCT_STOCK_CATEGORY,OLD.PRODUCT_PURVAY_CATEGORY,OLD.PRODUCT_STANDARD_CATEGORY,OLD.CORE_NUM,OLD.NUM_1,OLD.NUM_2,OLD.NUM_3,OLD.NUM_4,OLD.NUM_5,OLD.DEC_1,OLD.DEC_2,OLD.DEC_3,OLD.DEC_4,OLD.DEC_5,OLD.DISCARD_DATE,OLD.REMARKS,OLD.EAD_REMARKS,OLD.COMMENT_DATA,OLD.LAST_RO_DATE,OLD.SALES_STANDARD_DEVIATION,OLD.MINE_SAFETY_STOCK,OLD.MINE_SAFETY_STOCK_UPD_FLAG,OLD.ENTRUST_SAFETY_STOCK,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PRODUCT_CLASS_MST_XXXXX'//
CREATE TRIGGER PRODUCT_CLASS_MST_XXXXX_INS AFTER INSERT ON PRODUCT_CLASS_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_CLASS_MST');

INSERT INTO PRODUCT_CLASS_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CLASS_CODE_1,CLASS_CODE_2,CLASS_CODE_3,CLASS_NAME,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.CLASS_CODE_1,NEW.CLASS_CODE_2,NEW.CLASS_CODE_3,NEW.CLASS_NAME,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_CLASS_MST_XXXXX_UPD AFTER UPDATE ON PRODUCT_CLASS_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_CLASS_MST');

INSERT INTO PRODUCT_CLASS_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CLASS_CODE_1,CLASS_CODE_2,CLASS_CODE_3,CLASS_NAME,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.CLASS_CODE_1,NEW.CLASS_CODE_2,NEW.CLASS_CODE_3,NEW.CLASS_NAME,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_CLASS_MST_XXXXX_DEL AFTER DELETE ON PRODUCT_CLASS_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_CLASS_MST');

INSERT INTO PRODUCT_CLASS_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CLASS_CODE_1,CLASS_CODE_2,CLASS_CODE_3,CLASS_NAME,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.CLASS_CODE_1,OLD.CLASS_CODE_2,OLD.CLASS_CODE_3,OLD.CLASS_NAME,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


DELIMITER //
SELECT 'PRODUCT_SET_MST_XXXXX'//
CREATE TRIGGER PRODUCT_SET_MST_XXXXX_INS AFTER INSERT ON PRODUCT_SET_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_SET_MST');

INSERT INTO PRODUCT_SET_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SET_PRODUCT_CODE,PRODUCT_CODE,QUANTITY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SET_PRODUCT_CODE,NEW.PRODUCT_CODE,NEW.QUANTITY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_SET_MST_XXXXX_UPD AFTER UPDATE ON PRODUCT_SET_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_SET_MST');

INSERT INTO PRODUCT_SET_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SET_PRODUCT_CODE,PRODUCT_CODE,QUANTITY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SET_PRODUCT_CODE,NEW.PRODUCT_CODE,NEW.QUANTITY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_SET_MST_XXXXX_DEL AFTER DELETE ON PRODUCT_SET_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_SET_MST');

INSERT INTO PRODUCT_SET_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SET_PRODUCT_CODE,PRODUCT_CODE,QUANTITY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SET_PRODUCT_CODE,OLD.PRODUCT_CODE,OLD.QUANTITY,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


DELIMITER //
SELECT 'RACK_MST_XXXXX'//
CREATE TRIGGER RACK_MST_XXXXX_INS AFTER INSERT ON RACK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.WAREHOUSE_CODE,NEW.RACK_CODE,NEW.RACK_NAME,NEW.RACK_CATEGORY,NEW.MULTI_FLAG,NEW.ZIP_CODE,NEW.ADDRESS_1,NEW.ADDRESS_2,NEW.RACK_PC_NAME,NEW.RACK_TEL,NEW.RACK_FAX,NEW.RACK_EMAIL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RACK_MST_XXXXX_UPD AFTER UPDATE ON RACK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.RACK_CODE,NEW.RACK_NAME,NEW.RACK_CATEGORY,NEW.MULTI_FLAG,NEW.ZIP_CODE,NEW.ADDRESS_1,NEW.ADDRESS_2,NEW.RACK_PC_NAME,NEW.RACK_TEL,NEW.RACK_FAX,NEW.RACK_EMAIL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RACK_MST_XXXXX_DEL AFTER DELETE ON RACK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.WAREHOUSE_CODE,OLD.RACK_CODE,OLD.RACK_NAME,OLD.RACK_CATEGORY,OLD.MULTI_FLAG,OLD.ZIP_CODE,OLD.ADDRESS_1,OLD.ADDRESS_2,OLD.RACK_PC_NAME,OLD.RACK_TEL,OLD.RACK_FAX,OLD.RACK_EMAIL,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


DELIMITER //
SELECT 'WAREHOUSE_MST_XXXXX'//
CREATE TRIGGER WAREHOUSE_MST_XXXXX_INS AFTER INSERT ON WAREHOUSE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'INSERT', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.WAREHOUSE_NAME,NEW.WAREHOUSE_ZIP_CODE,NEW.WAREHOUSE_ADDRESS_1,NEW.WAREHOUSE_ADDRESS_2,NEW.WAREHOUSE_TEL,NEW.WAREHOUSE_FAX,NEW.MANAGER_NAME,NEW.MANAGER_KANA,NEW.MANAGER_TEL,NEW.MANAGER_FAX,NEW.MANAGER_EMAIL,NEW.WAREHOUSE_STATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER WAREHOUSE_MST_XXXXX_UPD AFTER UPDATE ON WAREHOUSE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.WAREHOUSE_NAME,NEW.WAREHOUSE_ZIP_CODE,NEW.WAREHOUSE_ADDRESS_1,NEW.WAREHOUSE_ADDRESS_2,NEW.WAREHOUSE_TEL,NEW.WAREHOUSE_FAX,NEW.MANAGER_NAME,NEW.MANAGER_KANA,NEW.MANAGER_TEL,NEW.MANAGER_FAX,NEW.MANAGER_EMAIL,NEW.WAREHOUSE_STATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER WAREHOUSE_MST_XXXXX_DEL AFTER DELETE ON WAREHOUSE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'DELETE', OLD.UPD_FUNC, now(), OLD.UPD_USER,OLD.WAREHOUSE_CODE,OLD.WAREHOUSE_NAME,OLD.WAREHOUSE_ZIP_CODE,OLD.WAREHOUSE_ADDRESS_1,OLD.WAREHOUSE_ADDRESS_2,OLD.WAREHOUSE_TEL,OLD.WAREHOUSE_FAX,OLD.MANAGER_NAME,OLD.MANAGER_KANA,OLD.MANAGER_TEL,OLD.MANAGER_FAX,OLD.MANAGER_EMAIL,OLD.WAREHOUSE_STATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


DELIMITER //
SELECT 'CUSTOMER_MST_XXXXX'//
CREATE TRIGGER CUSTOMER_MST_XXXXX_INS AFTER INSERT ON CUSTOMER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_MST');

INSERT INTO CUSTOMER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_KANA,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,CUSTOMER_BUSINESS_CATEGORY,CUSTOMER_JOB_CATEGORY,CUSTOMER_RO_CATEGORY,CUSTOMER_RANK_CATEGORY,CUSTOMER_UPD_FLAG,SALES_CM_CATEGORY,TAX_SHIFT_CATEGORY,RATE,MAX_CREDIT_LIMIT,LAST_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_TYPE_CATEGORY,PAYBACK_CYCLE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,TEMP_DELIVERY_SLIP_FLAG,PAYMENT_NAME,REMARKS,FIRST_SALES_DATE,LAST_SALES_DATE,SALES_PRICE_TOTAL,SALES_PRICE_LSM,COMMENT_DATA,LAST_SALES_CUTOFF_DATE,BILL_PRINT_UNIT,BILL_DATE_PRINT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_KANA,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.CUSTOMER_BUSINESS_CATEGORY,NEW.CUSTOMER_JOB_CATEGORY,NEW.CUSTOMER_RO_CATEGORY,NEW.CUSTOMER_RANK_CATEGORY,NEW.CUSTOMER_UPD_FLAG,NEW.SALES_CM_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.RATE,NEW.MAX_CREDIT_LIMIT,NEW.LAST_CUTOFF_DATE,NEW.CUTOFF_GROUP,NEW.PAYBACK_TYPE_CATEGORY,NEW.PAYBACK_CYCLE_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.TEMP_DELIVERY_SLIP_FLAG,NEW.PAYMENT_NAME,NEW.REMARKS,NEW.FIRST_SALES_DATE,NEW.LAST_SALES_DATE,NEW.SALES_PRICE_TOTAL,NEW.SALES_PRICE_LSM,NEW.COMMENT_DATA,NEW.LAST_SALES_CUTOFF_DATE,NEW.BILL_PRINT_UNIT,NEW.BILL_DATE_PRINT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_MST_XXXXX_UPD AFTER UPDATE ON CUSTOMER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_MST');

INSERT INTO CUSTOMER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_KANA,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,CUSTOMER_BUSINESS_CATEGORY,CUSTOMER_JOB_CATEGORY,CUSTOMER_RO_CATEGORY,CUSTOMER_RANK_CATEGORY,CUSTOMER_UPD_FLAG,SALES_CM_CATEGORY,TAX_SHIFT_CATEGORY,RATE,MAX_CREDIT_LIMIT,LAST_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_TYPE_CATEGORY,PAYBACK_CYCLE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,TEMP_DELIVERY_SLIP_FLAG,PAYMENT_NAME,REMARKS,FIRST_SALES_DATE,LAST_SALES_DATE,SALES_PRICE_TOTAL,SALES_PRICE_LSM,COMMENT_DATA,LAST_SALES_CUTOFF_DATE,BILL_PRINT_UNIT,BILL_DATE_PRINT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_KANA,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.CUSTOMER_BUSINESS_CATEGORY,NEW.CUSTOMER_JOB_CATEGORY,NEW.CUSTOMER_RO_CATEGORY,NEW.CUSTOMER_RANK_CATEGORY,NEW.CUSTOMER_UPD_FLAG,NEW.SALES_CM_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.RATE,NEW.MAX_CREDIT_LIMIT,NEW.LAST_CUTOFF_DATE,NEW.CUTOFF_GROUP,NEW.PAYBACK_TYPE_CATEGORY,NEW.PAYBACK_CYCLE_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.TEMP_DELIVERY_SLIP_FLAG,NEW.PAYMENT_NAME,NEW.REMARKS,NEW.FIRST_SALES_DATE,NEW.LAST_SALES_DATE,NEW.SALES_PRICE_TOTAL,NEW.SALES_PRICE_LSM,NEW.COMMENT_DATA,NEW.LAST_SALES_CUTOFF_DATE,NEW.BILL_PRINT_UNIT,NEW.BILL_DATE_PRINT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_MST_XXXXX_DEL AFTER DELETE ON CUSTOMER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_MST');

INSERT INTO CUSTOMER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_KANA,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,CUSTOMER_BUSINESS_CATEGORY,CUSTOMER_JOB_CATEGORY,CUSTOMER_RO_CATEGORY,CUSTOMER_RANK_CATEGORY,CUSTOMER_UPD_FLAG,SALES_CM_CATEGORY,TAX_SHIFT_CATEGORY,RATE,MAX_CREDIT_LIMIT,LAST_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_TYPE_CATEGORY,PAYBACK_CYCLE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,TEMP_DELIVERY_SLIP_FLAG,PAYMENT_NAME,REMARKS,FIRST_SALES_DATE,LAST_SALES_DATE,SALES_PRICE_TOTAL,SALES_PRICE_LSM,COMMENT_DATA,LAST_SALES_CUTOFF_DATE,BILL_PRINT_UNIT,BILL_DATE_PRINT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.CUSTOMER_KANA,OLD.CUSTOMER_OFFICE_NAME,OLD.CUSTOMER_OFFICE_KANA,OLD.CUSTOMER_ABBR,OLD.CUSTOMER_DEPT_NAME,OLD.CUSTOMER_ZIP_CODE,OLD.CUSTOMER_ADDRESS_1,OLD.CUSTOMER_ADDRESS_2,OLD.CUSTOMER_PC_POST,OLD.CUSTOMER_PC_NAME,OLD.CUSTOMER_PC_KANA,OLD.CUSTOMER_PC_PRE_CATEGORY,OLD.CUSTOMER_TEL,OLD.CUSTOMER_FAX,OLD.CUSTOMER_EMAIL,OLD.CUSTOMER_URL,OLD.CUSTOMER_BUSINESS_CATEGORY,OLD.CUSTOMER_JOB_CATEGORY,OLD.CUSTOMER_RO_CATEGORY,OLD.CUSTOMER_RANK_CATEGORY,OLD.CUSTOMER_UPD_FLAG,OLD.SALES_CM_CATEGORY,OLD.TAX_SHIFT_CATEGORY,OLD.RATE,OLD.MAX_CREDIT_LIMIT,OLD.LAST_CUTOFF_DATE,OLD.CUTOFF_GROUP,OLD.PAYBACK_TYPE_CATEGORY,OLD.PAYBACK_CYCLE_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.TEMP_DELIVERY_SLIP_FLAG,OLD.PAYMENT_NAME,OLD.REMARKS,OLD.FIRST_SALES_DATE,OLD.LAST_SALES_DATE,OLD.SALES_PRICE_TOTAL,OLD.SALES_PRICE_LSM,OLD.COMMENT_DATA,OLD.LAST_SALES_CUTOFF_DATE,OLD.BILL_PRINT_UNIT,OLD.BILL_DATE_PRINT,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DELIVERY_MST_XXXXX'//
CREATE TRIGGER DELIVERY_MST_XXXXX_INS AFTER INSERT ON DELIVERY_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_MST');

INSERT INTO DELIVERY_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DELIVERY_MST_XXXXX_UPD AFTER UPDATE ON DELIVERY_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_MST');

INSERT INTO DELIVERY_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DELIVERY_MST_XXXXX_DEL AFTER DELETE ON DELIVERY_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_MST');

INSERT INTO DELIVERY_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'CUSTOMER_REL_XXXXX'//
CREATE TRIGGER CUSTOMER_REL_XXXXX_INS AFTER INSERT ON CUSTOMER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_REL');

INSERT INTO CUSTOMER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,REL_CODE,CUST_REL_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.CUSTOMER_CODE,NEW.REL_CODE,NEW.CUST_REL_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_REL_XXXXX_UPD AFTER UPDATE ON CUSTOMER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_REL');

INSERT INTO CUSTOMER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,REL_CODE,CUST_REL_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.CUSTOMER_CODE,NEW.REL_CODE,NEW.CUST_REL_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_REL_XXXXX_DEL AFTER DELETE ON CUSTOMER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_REL');

INSERT INTO CUSTOMER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CUSTOMER_CODE,REL_CODE,CUST_REL_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.CUSTOMER_CODE,OLD.REL_CODE,OLD.CUST_REL_CATEGORY,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SUPPLIER_MST_XXXXX'//
CREATE TRIGGER SUPPLIER_MST_XXXXX_INS AFTER INSERT ON SUPPLIER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_MST');

INSERT INTO SUPPLIER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_DEPT_NAME,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,SUPPLIER_CM_CATEGORY,TAX_SHIFT_CATEGORY,PAYMENT_TYPE_CATEGORY,PAYMENT_CYCLE_CATEGORY,LAST_CUTOFF_DATE,PAYMENT_DATE,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PO_SLIP_COMEOUT_CATEGORY,SERVICE_CHARGE_CATEGORY,TRANSFER_TYPE_CATEGORY,NATIONAL_CATEGORY,RATE_ID,FOB_NAME,REMARKS,COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.SUPPLIER_CM_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.PAYMENT_TYPE_CATEGORY,NEW.PAYMENT_CYCLE_CATEGORY,NEW.LAST_CUTOFF_DATE,NEW.PAYMENT_DATE,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PO_SLIP_COMEOUT_CATEGORY,NEW.SERVICE_CHARGE_CATEGORY,NEW.TRANSFER_TYPE_CATEGORY,NEW.NATIONAL_CATEGORY,NEW.RATE_ID,NEW.FOB_NAME,NEW.REMARKS,NEW.COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_MST_XXXXX_UPD AFTER UPDATE ON SUPPLIER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_MST');

INSERT INTO SUPPLIER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_DEPT_NAME,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,SUPPLIER_CM_CATEGORY,TAX_SHIFT_CATEGORY,PAYMENT_TYPE_CATEGORY,PAYMENT_CYCLE_CATEGORY,LAST_CUTOFF_DATE,PAYMENT_DATE,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PO_SLIP_COMEOUT_CATEGORY,SERVICE_CHARGE_CATEGORY,TRANSFER_TYPE_CATEGORY,NATIONAL_CATEGORY,RATE_ID,FOB_NAME,REMARKS,COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.SUPPLIER_CM_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.PAYMENT_TYPE_CATEGORY,NEW.PAYMENT_CYCLE_CATEGORY,NEW.LAST_CUTOFF_DATE,NEW.PAYMENT_DATE,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PO_SLIP_COMEOUT_CATEGORY,NEW.SERVICE_CHARGE_CATEGORY,NEW.TRANSFER_TYPE_CATEGORY,NEW.NATIONAL_CATEGORY,NEW.RATE_ID,NEW.FOB_NAME,NEW.REMARKS,NEW.COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_MST_XXXXX_DEL AFTER DELETE ON SUPPLIER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_MST');

INSERT INTO SUPPLIER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_DEPT_NAME,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,SUPPLIER_CM_CATEGORY,TAX_SHIFT_CATEGORY,PAYMENT_TYPE_CATEGORY,PAYMENT_CYCLE_CATEGORY,LAST_CUTOFF_DATE,PAYMENT_DATE,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PO_SLIP_COMEOUT_CATEGORY,SERVICE_CHARGE_CATEGORY,TRANSFER_TYPE_CATEGORY,NATIONAL_CATEGORY,RATE_ID,FOB_NAME,REMARKS,COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.SUPPLIER_KANA,OLD.SUPPLIER_ABBR,OLD.SUPPLIER_ZIP_CODE,OLD.SUPPLIER_ADDRESS_1,OLD.SUPPLIER_ADDRESS_2,OLD.SUPPLIER_DEPT_NAME,OLD.SUPPLIER_PC_NAME,OLD.SUPPLIER_PC_KANA,OLD.SUPPLIER_PC_PRE_CATEGORY,OLD.SUPPLIER_PC_POST,OLD.SUPPLIER_TEL,OLD.SUPPLIER_FAX,OLD.SUPPLIER_EMAIL,OLD.SUPPLIER_URL,OLD.SUPPLIER_CM_CATEGORY,OLD.TAX_SHIFT_CATEGORY,OLD.PAYMENT_TYPE_CATEGORY,OLD.PAYMENT_CYCLE_CATEGORY,OLD.LAST_CUTOFF_DATE,OLD.PAYMENT_DATE,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.PO_SLIP_COMEOUT_CATEGORY,OLD.SERVICE_CHARGE_CATEGORY,OLD.TRANSFER_TYPE_CATEGORY,OLD.NATIONAL_CATEGORY,OLD.RATE_ID,OLD.FOB_NAME,OLD.REMARKS,OLD.COMMENT_DATA,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'CATEGORY_TRN_XXXXX'//
CREATE TRIGGER CATEGORY_TRN_XXXXX_INS AFTER INSERT ON CATEGORY_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CATEGORY_TRN');

INSERT INTO CATEGORY_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CATEGORY_ID,CATEGORY_CODE,CATEGORY_CODE_NAME,CATEGORY_STR,CATEGORY_NUM,CATEGORY_FLT,CATEGORY_BOOL,CATEGORY_DSP,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.CATEGORY_ID,NEW.CATEGORY_CODE,NEW.CATEGORY_CODE_NAME,NEW.CATEGORY_STR,NEW.CATEGORY_NUM,NEW.CATEGORY_FLT,NEW.CATEGORY_BOOL,NEW.CATEGORY_DSP,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CATEGORY_TRN_XXXXX_UPD AFTER UPDATE ON CATEGORY_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CATEGORY_TRN');

INSERT INTO CATEGORY_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CATEGORY_ID,CATEGORY_CODE,CATEGORY_CODE_NAME,CATEGORY_STR,CATEGORY_NUM,CATEGORY_FLT,CATEGORY_BOOL,CATEGORY_DSP,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.CATEGORY_ID,NEW.CATEGORY_CODE,NEW.CATEGORY_CODE_NAME,NEW.CATEGORY_STR,NEW.CATEGORY_NUM,NEW.CATEGORY_FLT,NEW.CATEGORY_BOOL,NEW.CATEGORY_DSP,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CATEGORY_TRN_XXXXX_DEL AFTER DELETE ON CATEGORY_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CATEGORY_TRN');

INSERT INTO CATEGORY_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,CATEGORY_ID,CATEGORY_CODE,CATEGORY_CODE_NAME,CATEGORY_STR,CATEGORY_NUM,CATEGORY_FLT,CATEGORY_BOOL,CATEGORY_DSP,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.CATEGORY_ID,OLD.CATEGORY_CODE,OLD.CATEGORY_CODE_NAME,OLD.CATEGORY_STR,OLD.CATEGORY_NUM,OLD.CATEGORY_FLT,OLD.CATEGORY_BOOL,OLD.CATEGORY_DSP,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'TAX_RATE_MST_XXXXX'//
CREATE TRIGGER TAX_RATE_MST_XXXXX_INS AFTER INSERT ON TAX_RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('TAX_RATE_MST');

INSERT INTO TAX_RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,TAX_TYPE_CATEGORY,START_DATE,TAX_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.TAX_TYPE_CATEGORY,NEW.START_DATE,NEW.TAX_RATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER TAX_RATE_MST_XXXXX_UPD AFTER UPDATE ON TAX_RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('TAX_RATE_MST');

INSERT INTO TAX_RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,TAX_TYPE_CATEGORY,START_DATE,TAX_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.TAX_TYPE_CATEGORY,NEW.START_DATE,NEW.TAX_RATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER TAX_RATE_MST_XXXXX_DEL AFTER DELETE ON TAX_RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('TAX_RATE_MST');

INSERT INTO TAX_RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,TAX_TYPE_CATEGORY,START_DATE,TAX_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.TAX_TYPE_CATEGORY,OLD.START_DATE,OLD.TAX_RATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'BANK_MST_XXXXX'//
CREATE TRIGGER BANK_MST_XXXXX_INS AFTER INSERT ON BANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.BANK_ID,NEW.ACCOUNT_OWNER_NAME,NEW.ACCOUNT_OWNER_KANA,NEW.BANK_CODE,NEW.BANK_NAME,NEW.STORE_CODE,NEW.STORE_NAME,NEW.DWB_TYPE,NEW.ACCOUNT_NUM,NEW.REMARKS,NEW.VALID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_MST_XXXXX_UPD AFTER UPDATE ON BANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.BANK_ID,NEW.ACCOUNT_OWNER_NAME,NEW.ACCOUNT_OWNER_KANA,NEW.BANK_CODE,NEW.BANK_NAME,NEW.STORE_CODE,NEW.STORE_NAME,NEW.DWB_TYPE,NEW.ACCOUNT_NUM,NEW.REMARKS,NEW.VALID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_MST_XXXXX_DEL AFTER DELETE ON BANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_MST');

INSERT INTO BANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BANK_ID,ACCOUNT_OWNER_NAME,ACCOUNT_OWNER_KANA,BANK_CODE,BANK_NAME,STORE_CODE,STORE_NAME,DWB_TYPE,ACCOUNT_NUM,REMARKS,VALID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.BANK_ID,OLD.ACCOUNT_OWNER_NAME,OLD.ACCOUNT_OWNER_KANA,OLD.BANK_CODE,OLD.BANK_NAME,OLD.STORE_CODE,OLD.STORE_NAME,OLD.DWB_TYPE,OLD.ACCOUNT_NUM,OLD.REMARKS,OLD.VALID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'RATE_MST_XXXXX'//
CREATE TRIGGER RATE_MST_XXXXX_INS AFTER INSERT ON RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_MST');

INSERT INTO RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,NAME,SIGN,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RATE_ID,NEW.NAME,NEW.SIGN,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RATE_MST_XXXXX_UPD AFTER UPDATE ON RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_MST');

INSERT INTO RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,NAME,SIGN,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RATE_ID,NEW.NAME,NEW.SIGN,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RATE_MST_XXXXX_DEL AFTER DELETE ON RATE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_MST');

INSERT INTO RATE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,NAME,SIGN,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RATE_ID,OLD.NAME,OLD.SIGN,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'RATE_TRN_XXXXX'//
CREATE TRIGGER RATE_TRN_XXXXX_INS AFTER INSERT ON RATE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_TRN');

INSERT INTO RATE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,START_DATE,RATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RATE_ID,NEW.START_DATE,NEW.RATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RATE_TRN_XXXXX_UPD AFTER UPDATE ON RATE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_TRN');

INSERT INTO RATE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,START_DATE,RATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RATE_ID,NEW.START_DATE,NEW.RATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RATE_TRN_XXXXX_DEL AFTER DELETE ON RATE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RATE_TRN');

INSERT INTO RATE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RATE_ID,START_DATE,RATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RATE_ID,OLD.START_DATE,OLD.RATE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'CUSTOMER_RANK_MST_XXXXX'//
CREATE TRIGGER CUSTOMER_RANK_MST_XXXXX_INS AFTER INSERT ON CUSTOMER_RANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_RANK_MST');

INSERT INTO CUSTOMER_RANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RANK_CODE,RANK_NAME,RANK_RATE,RO_COUNT_FROM,RO_COUNT_TO,ENROLL_TERM_FROM,ENROLL_TERM_TO,DEFECT_TERM_FROM,DEFECT_TERM_TO,RO_MONTHLY_AVG_FROM,RO_MONTHLY_AVG_TO,POSTAGE_TYPE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RANK_CODE,NEW.RANK_NAME,NEW.RANK_RATE,NEW.RO_COUNT_FROM,NEW.RO_COUNT_TO,NEW.ENROLL_TERM_FROM,NEW.ENROLL_TERM_TO,NEW.DEFECT_TERM_FROM,NEW.DEFECT_TERM_TO,NEW.RO_MONTHLY_AVG_FROM,NEW.RO_MONTHLY_AVG_TO,NEW.POSTAGE_TYPE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_RANK_MST_XXXXX_UPD AFTER UPDATE ON CUSTOMER_RANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_RANK_MST');

INSERT INTO CUSTOMER_RANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RANK_CODE,RANK_NAME,RANK_RATE,RO_COUNT_FROM,RO_COUNT_TO,ENROLL_TERM_FROM,ENROLL_TERM_TO,DEFECT_TERM_FROM,DEFECT_TERM_TO,RO_MONTHLY_AVG_FROM,RO_MONTHLY_AVG_TO,POSTAGE_TYPE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RANK_CODE,NEW.RANK_NAME,NEW.RANK_RATE,NEW.RO_COUNT_FROM,NEW.RO_COUNT_TO,NEW.ENROLL_TERM_FROM,NEW.ENROLL_TERM_TO,NEW.DEFECT_TERM_FROM,NEW.DEFECT_TERM_TO,NEW.RO_MONTHLY_AVG_FROM,NEW.RO_MONTHLY_AVG_TO,NEW.POSTAGE_TYPE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER CUSTOMER_RANK_MST_XXXXX_DEL AFTER DELETE ON CUSTOMER_RANK_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('CUSTOMER_RANK_MST');

INSERT INTO CUSTOMER_RANK_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RANK_CODE,RANK_NAME,RANK_RATE,RO_COUNT_FROM,RO_COUNT_TO,ENROLL_TERM_FROM,ENROLL_TERM_TO,DEFECT_TERM_FROM,DEFECT_TERM_TO,RO_MONTHLY_AVG_FROM,RO_MONTHLY_AVG_TO,POSTAGE_TYPE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RANK_CODE,OLD.RANK_NAME,OLD.RANK_RATE,OLD.RO_COUNT_FROM,OLD.RO_COUNT_TO,OLD.ENROLL_TERM_FROM,OLD.ENROLL_TERM_TO,OLD.DEFECT_TERM_FROM,OLD.DEFECT_TERM_TO,OLD.RO_MONTHLY_AVG_FROM,OLD.RO_MONTHLY_AVG_TO,OLD.POSTAGE_TYPE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PRODUCT_STOCK_TRN_XXXXX'//
CREATE TRIGGER PRODUCT_STOCK_TRN_XXXXX_INS AFTER INSERT ON PRODUCT_STOCK_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_STOCK_TRN');

INSERT INTO PRODUCT_STOCK_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RACK_CODE,PRODUCT_CODE,STOCK_PDATE,STOCK_ANNUAL,STOCK_MONTHLY,STOCK_YM,STOCK_NUM,ENTER_NUM,DISPATCH_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RACK_CODE,NEW.PRODUCT_CODE,NEW.STOCK_PDATE,NEW.STOCK_ANNUAL,NEW.STOCK_MONTHLY,NEW.STOCK_YM,NEW.STOCK_NUM,NEW.ENTER_NUM,NEW.DISPATCH_NUM,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_STOCK_TRN_XXXXX_UPD AFTER UPDATE ON PRODUCT_STOCK_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_STOCK_TRN');

INSERT INTO PRODUCT_STOCK_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RACK_CODE,PRODUCT_CODE,STOCK_PDATE,STOCK_ANNUAL,STOCK_MONTHLY,STOCK_YM,STOCK_NUM,ENTER_NUM,DISPATCH_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RACK_CODE,NEW.PRODUCT_CODE,NEW.STOCK_PDATE,NEW.STOCK_ANNUAL,NEW.STOCK_MONTHLY,NEW.STOCK_YM,NEW.STOCK_NUM,NEW.ENTER_NUM,NEW.DISPATCH_NUM,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PRODUCT_STOCK_TRN_XXXXX_DEL AFTER DELETE ON PRODUCT_STOCK_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PRODUCT_STOCK_TRN');

INSERT INTO PRODUCT_STOCK_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RACK_CODE,PRODUCT_CODE,STOCK_PDATE,STOCK_ANNUAL,STOCK_MONTHLY,STOCK_YM,STOCK_NUM,ENTER_NUM,DISPATCH_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RACK_CODE,OLD.PRODUCT_CODE,OLD.STOCK_PDATE,OLD.STOCK_ANNUAL,OLD.STOCK_MONTHLY,OLD.STOCK_YM,OLD.STOCK_NUM,OLD.ENTER_NUM,OLD.DISPATCH_NUM,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ESTIMATE_SHEET_TRN_XXXXX'//
CREATE TRIGGER ESTIMATE_SHEET_TRN_XXXXX_INS AFTER INSERT ON ESTIMATE_SHEET_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ESTIMATE_SHEET_ID,NEW.ESTIMATE_ANNUAL,NEW.ESTIMATE_MONTHLY,NEW.ESTIMATE_YM,NEW.ESTIMATE_DATE,NEW.DELIVERY_INFO,NEW.VALID_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.TITLE,NEW.ESTIMATE_CONDITION,NEW.SUBMIT_NAME,NEW.SUBMIT_PRE_CATEGORY,NEW.SUBMIT_PRE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_NAME,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.ESTIMATE_TOTAL,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.MEMO,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_SHEET_TRN_XXXXX_UPD AFTER UPDATE ON ESTIMATE_SHEET_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ESTIMATE_SHEET_ID,NEW.ESTIMATE_ANNUAL,NEW.ESTIMATE_MONTHLY,NEW.ESTIMATE_YM,NEW.ESTIMATE_DATE,NEW.DELIVERY_INFO,NEW.VALID_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.TITLE,NEW.ESTIMATE_CONDITION,NEW.SUBMIT_NAME,NEW.SUBMIT_PRE_CATEGORY,NEW.SUBMIT_PRE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_NAME,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.ESTIMATE_TOTAL,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.MEMO,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_SHEET_TRN_XXXXX_DEL AFTER DELETE ON ESTIMATE_SHEET_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_SHEET_TRN');

INSERT INTO ESTIMATE_SHEET_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_SHEET_ID,ESTIMATE_ANNUAL,ESTIMATE_MONTHLY,ESTIMATE_YM,ESTIMATE_DATE,DELIVERY_INFO,VALID_DATE,USER_ID,USER_NAME,REMARKS,TITLE,ESTIMATE_CONDITION,SUBMIT_NAME,SUBMIT_PRE_CATEGORY,SUBMIT_PRE,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_NAME,DELIVERY_OFFICE_NAME,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,ESTIMATE_TOTAL,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,MEMO,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ESTIMATE_SHEET_ID,OLD.ESTIMATE_ANNUAL,OLD.ESTIMATE_MONTHLY,OLD.ESTIMATE_YM,OLD.ESTIMATE_DATE,OLD.DELIVERY_INFO,OLD.VALID_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.TITLE,OLD.ESTIMATE_CONDITION,OLD.SUBMIT_NAME,OLD.SUBMIT_PRE_CATEGORY,OLD.SUBMIT_PRE,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.DELIVERY_NAME,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.COST_TOTAL,OLD.RETAIL_PRICE_TOTAL,OLD.ESTIMATE_TOTAL,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.MEMO,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ESTIMATE_LINE_TRN_XXXXX'//
CREATE TRIGGER ESTIMATE_LINE_TRN_XXXXX_INS AFTER INSERT ON ESTIMATE_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_LINE_TRN');

INSERT INTO ESTIMATE_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_LINE_ID,ESTIMATE_SHEET_ID,LINE_NO,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_COST,UNIT_RETAIL_PRICE,COST,RETAIL_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ESTIMATE_LINE_ID,NEW.ESTIMATE_SHEET_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_COST,NEW.UNIT_RETAIL_PRICE,NEW.COST,NEW.RETAIL_PRICE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_LINE_TRN_XXXXX_UPD AFTER UPDATE ON ESTIMATE_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_LINE_TRN');

INSERT INTO ESTIMATE_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_LINE_ID,ESTIMATE_SHEET_ID,LINE_NO,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_COST,UNIT_RETAIL_PRICE,COST,RETAIL_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ESTIMATE_LINE_ID,NEW.ESTIMATE_SHEET_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_COST,NEW.UNIT_RETAIL_PRICE,NEW.COST,NEW.RETAIL_PRICE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ESTIMATE_LINE_TRN_XXXXX_DEL AFTER DELETE ON ESTIMATE_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ESTIMATE_LINE_TRN');

INSERT INTO ESTIMATE_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ESTIMATE_LINE_ID,ESTIMATE_SHEET_ID,LINE_NO,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_COST,UNIT_RETAIL_PRICE,COST,RETAIL_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ESTIMATE_LINE_ID,OLD.ESTIMATE_SHEET_ID,OLD.LINE_NO,OLD.PRODUCT_CODE,OLD.CUSTOMER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.UNIT_COST,OLD.UNIT_RETAIL_PRICE,OLD.COST,OLD.RETAIL_PRICE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'RO_SLIP_TRN_XXXXX'//
CREATE TRIGGER RO_SLIP_TRN_XXXXX_INS AFTER INSERT ON RO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RO_SLIP_ID,NEW.STATUS,NEW.RO_ANNUAL,NEW.RO_MONTHLY,NEW.RO_YM,NEW.RO_DATE,NEW.SHIP_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.ESTIMATE_SHEET_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_COUNT,NEW.COD_SC,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON RO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RO_SLIP_ID,NEW.STATUS,NEW.RO_ANNUAL,NEW.RO_MONTHLY,NEW.RO_YM,NEW.RO_DATE,NEW.SHIP_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.ESTIMATE_SHEET_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.COST_TOTAL,NEW.RETAIL_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_COUNT,NEW.COD_SC,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_SLIP_TRN_XXXXX_DEL AFTER DELETE ON RO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_SLIP_TRN');

INSERT INTO RO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,STATUS,RO_ANNUAL,RO_MONTHLY,RO_YM,RO_DATE,SHIP_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,USER_ID,USER_NAME,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,ESTIMATE_SHEET_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,COST_TOTAL,RETAIL_PRICE_TOTAL,PRICE_TOTAL,PRINT_COUNT,COD_SC,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RO_SLIP_ID,OLD.STATUS,OLD.RO_ANNUAL,OLD.RO_MONTHLY,OLD.RO_YM,OLD.RO_DATE,OLD.SHIP_DATE,OLD.DELIVERY_DATE,OLD.RECEPT_NO,OLD.CUSTOMER_SLIP_NO,OLD.SALES_CM_CATEGORY,OLD.CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.ESTIMATE_SHEET_ID,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.COST_TOTAL,OLD.RETAIL_PRICE_TOTAL,OLD.PRICE_TOTAL,OLD.PRINT_COUNT,OLD.COD_SC,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.DC_CATEGORY,OLD.DC_NAME,OLD.DC_TIMEZONE_CATEGORY,OLD.DC_TIMEZONE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'RO_LINE_TRN_XXXXX'//
CREATE TRIGGER RO_LINE_TRN_XXXXX_INS AFTER INSERT ON RO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_LINE_TRN');

INSERT INTO RO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_LINE_ID,STATUS,RO_SLIP_ID,LINE_NO,ESTIMATE_LINE_ID,LAST_SHIP_DATE,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,REMARKS,EAD_REMARKS,REST_QUANTITY,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RO_LINE_ID,NEW.STATUS,NEW.RO_SLIP_ID,NEW.LINE_NO,NEW.ESTIMATE_LINE_ID,NEW.LAST_SHIP_DATE,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.REMARKS,NEW.EAD_REMARKS,NEW.REST_QUANTITY,NEW.RACK_CODE_SRC,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_LINE_TRN_XXXXX_UPD AFTER UPDATE ON RO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_LINE_TRN');

INSERT INTO RO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_LINE_ID,STATUS,RO_SLIP_ID,LINE_NO,ESTIMATE_LINE_ID,LAST_SHIP_DATE,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,REMARKS,EAD_REMARKS,REST_QUANTITY,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RO_LINE_ID,NEW.STATUS,NEW.RO_SLIP_ID,NEW.LINE_NO,NEW.ESTIMATE_LINE_ID,NEW.LAST_SHIP_DATE,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.REMARKS,NEW.EAD_REMARKS,NEW.REST_QUANTITY,NEW.RACK_CODE_SRC,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RO_LINE_TRN_XXXXX_DEL AFTER DELETE ON RO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RO_LINE_TRN');

INSERT INTO RO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_LINE_ID,STATUS,RO_SLIP_ID,LINE_NO,ESTIMATE_LINE_ID,LAST_SHIP_DATE,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,REMARKS,EAD_REMARKS,REST_QUANTITY,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RO_LINE_ID,OLD.STATUS,OLD.RO_SLIP_ID,OLD.LINE_NO,OLD.ESTIMATE_LINE_ID,OLD.LAST_SHIP_DATE,OLD.PRODUCT_CODE,OLD.CUSTOMER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.UNIT_PRICE,OLD.UNIT_CATEGORY,OLD.UNIT_NAME,OLD.PACK_QUANTITY,OLD.UNIT_RETAIL_PRICE,OLD.RETAIL_PRICE,OLD.UNIT_COST,OLD.COST,OLD.TAX_CATEGORY,OLD.CTAX_RATE,OLD.CTAX_PRICE,OLD.REMARKS,OLD.EAD_REMARKS,OLD.REST_QUANTITY,OLD.RACK_CODE_SRC,OLD.PRODUCT_REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SALES_SLIP_TRN_XXXXX'//
CREATE TRIGGER SALES_SLIP_TRN_XXXXX_INS AFTER INSERT ON SALES_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SALES_SLIP_ID,NEW.STATUS,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.BILL_ID,NEW.SALES_BILL_ID,NEW.BILL_DATE,NEW.BILL_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.SALES_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATEGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.GM_TOTAL,NEW.COD_SC,NEW.BILL_PRINT_COUNT,NEW.DELIVERY_PRINT_COUNT,NEW.TEMP_DELIVERY_PRINT_COUNT,NEW.SHIPPING_PRINT_COUNT,NEW.SI_PRINT_COUNT,NEW.ESTIMATE_PRINT_COUNT,NEW.DELBOR_PRINT_COUNT,NEW.PO_PRINT_COUNT,NEW.ADLABEL,NEW.DISCLAIMER,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.ART_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON SALES_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SALES_SLIP_ID,NEW.STATUS,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.BILL_ID,NEW.SALES_BILL_ID,NEW.BILL_DATE,NEW.BILL_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.SALES_DATE,NEW.DELIVERY_DATE,NEW.RECEPT_NO,NEW.CUSTOMER_SLIP_NO,NEW.SALES_CM_CATEGORY,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.DC_CATEGORY,NEW.DC_NAME,NEW.DC_TIMEZONE_CATEGORY,NEW.DC_TIMEZONE,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATEGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.GM_TOTAL,NEW.COD_SC,NEW.BILL_PRINT_COUNT,NEW.DELIVERY_PRINT_COUNT,NEW.TEMP_DELIVERY_PRINT_COUNT,NEW.SHIPPING_PRINT_COUNT,NEW.SI_PRINT_COUNT,NEW.ESTIMATE_PRINT_COUNT,NEW.DELBOR_PRINT_COUNT,NEW.PO_PRINT_COUNT,NEW.ADLABEL,NEW.DISCLAIMER,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.ART_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_SLIP_TRN_XXXXX_DEL AFTER DELETE ON SALES_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_SLIP_TRN');

INSERT INTO SALES_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,STATUS,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,BILL_ID,SALES_BILL_ID,BILL_DATE,BILL_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,SALES_DATE,DELIVERY_DATE,RECEPT_NO,CUSTOMER_SLIP_NO,SALES_CM_CATEGORY,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,USER_ID,USER_NAME,REMARKS,PICKING_REMARKS,DC_CATEGORY,DC_NAME,DC_TIMEZONE_CATEGORY,DC_TIMEZONE,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_PC_POST,CUSTOMER_PC_NAME,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATEGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,CTAX_RATE,PRICE_TOTAL,GM_TOTAL,COD_SC,BILL_PRINT_COUNT,DELIVERY_PRINT_COUNT,TEMP_DELIVERY_PRINT_COUNT,SHIPPING_PRINT_COUNT,SI_PRINT_COUNT,ESTIMATE_PRINT_COUNT,DELBOR_PRINT_COUNT,PO_PRINT_COUNT,ADLABEL,DISCLAIMER,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,ART_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SALES_SLIP_ID,OLD.STATUS,OLD.SALES_ANNUAL,OLD.SALES_MONTHLY,OLD.SALES_YM,OLD.RO_SLIP_ID,OLD.BILL_ID,OLD.SALES_BILL_ID,OLD.BILL_DATE,OLD.BILL_CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.BILL_CUTOFF_DATE,OLD.BILL_CUTOFF_PDATE,OLD.SALES_DATE,OLD.DELIVERY_DATE,OLD.RECEPT_NO,OLD.CUSTOMER_SLIP_NO,OLD.SALES_CM_CATEGORY,OLD.SALES_CUTOFF_DATE,OLD.SALES_CUTOFF_PDATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.PICKING_REMARKS,OLD.DC_CATEGORY,OLD.DC_NAME,OLD.DC_TIMEZONE_CATEGORY,OLD.DC_TIMEZONE,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.CUSTOMER_OFFICE_NAME,OLD.CUSTOMER_OFFICE_KANA,OLD.CUSTOMER_ABBR,OLD.CUSTOMER_DEPT_NAME,OLD.CUSTOMER_ZIP_CODE,OLD.CUSTOMER_ADDRESS_1,OLD.CUSTOMER_ADDRESS_2,OLD.CUSTOMER_PC_POST,OLD.CUSTOMER_PC_NAME,OLD.CUSTOMER_PC_KANA,OLD.CUSTOMER_PC_PRE_CATEGORY,OLD.CUSTOMER_PC_PRE,OLD.CUSTOMER_TEL,OLD.CUSTOMER_FAX,OLD.CUSTOMER_EMAIL,OLD.CUSTOMER_URL,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.BA_CODE,OLD.BA_NAME,OLD.BA_KANA,OLD.BA_OFFICE_NAME,OLD.BA_OFFICE_KANA,OLD.BA_DEPT_NAME,OLD.BA_ZIP_CODE,OLD.BA_ADDRESS_1,OLD.BA_ADDRESS_2,OLD.BA_PC_NAME,OLD.BA_PC_KANA,OLD.BA_PC_PRE_CATEGORY,OLD.BA_PC_PRE,OLD.BA_TEL,OLD.BA_FAX,OLD.BA_EMAIL,OLD.BA_URL,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_PRICE_TOTAL,OLD.CTAX_RATE,OLD.PRICE_TOTAL,OLD.GM_TOTAL,OLD.COD_SC,OLD.BILL_PRINT_COUNT,OLD.DELIVERY_PRINT_COUNT,OLD.TEMP_DELIVERY_PRINT_COUNT,OLD.SHIPPING_PRINT_COUNT,OLD.SI_PRINT_COUNT,OLD.ESTIMATE_PRINT_COUNT,OLD.DELBOR_PRINT_COUNT,OLD.PO_PRINT_COUNT,OLD.ADLABEL,OLD.DISCLAIMER,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.ART_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SALES_LINE_TRN_XXXXX'//
CREATE TRIGGER SALES_LINE_TRN_XXXXX_INS AFTER INSERT ON SALES_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_LINE_TRN');

INSERT INTO SALES_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_LINE_ID,STATUS,SALES_SLIP_ID,LINE_NO,RO_LINE_ID,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,DELIVERY_PROCESS_CATEGORY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,REMARKS,EAD_REMARKS,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SALES_LINE_ID,NEW.STATUS,NEW.SALES_SLIP_ID,NEW.LINE_NO,NEW.RO_LINE_ID,NEW.SALES_DETAIL_CATEGORY,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.DELIVERY_PROCESS_CATEGORY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.GM,NEW.REMARKS,NEW.EAD_REMARKS,NEW.RACK_CODE_SRC,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_LINE_TRN_XXXXX_UPD AFTER UPDATE ON SALES_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_LINE_TRN');

INSERT INTO SALES_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_LINE_ID,STATUS,SALES_SLIP_ID,LINE_NO,RO_LINE_ID,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,DELIVERY_PROCESS_CATEGORY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,REMARKS,EAD_REMARKS,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SALES_LINE_ID,NEW.STATUS,NEW.SALES_SLIP_ID,NEW.LINE_NO,NEW.RO_LINE_ID,NEW.SALES_DETAIL_CATEGORY,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.DELIVERY_PROCESS_CATEGORY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.GM,NEW.REMARKS,NEW.EAD_REMARKS,NEW.RACK_CODE_SRC,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SALES_LINE_TRN_XXXXX_DEL AFTER DELETE ON SALES_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SALES_LINE_TRN');

INSERT INTO SALES_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_LINE_ID,STATUS,SALES_SLIP_ID,LINE_NO,RO_LINE_ID,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,DELIVERY_PROCESS_CATEGORY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,REMARKS,EAD_REMARKS,RACK_CODE_SRC,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SALES_LINE_ID,OLD.STATUS,OLD.SALES_SLIP_ID,OLD.LINE_NO,OLD.RO_LINE_ID,OLD.SALES_DETAIL_CATEGORY,OLD.PRODUCT_CODE,OLD.CUSTOMER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.DELIVERY_PROCESS_CATEGORY,OLD.UNIT_PRICE,OLD.UNIT_CATEGORY,OLD.UNIT_NAME,OLD.PACK_QUANTITY,OLD.UNIT_RETAIL_PRICE,OLD.RETAIL_PRICE,OLD.UNIT_COST,OLD.COST,OLD.TAX_CATEGORY,OLD.CTAX_RATE,OLD.CTAX_PRICE,OLD.GM,OLD.REMARKS,OLD.EAD_REMARKS,OLD.RACK_CODE_SRC,OLD.PRODUCT_REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PICKING_LIST_TRN_XXXXX'//
CREATE TRIGGER PICKING_LIST_TRN_XXXXX_INS AFTER INSERT ON PICKING_LIST_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LIST_TRN');

INSERT INTO PICKING_LIST_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LIST_ID,RO_DATE,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,SALES_SLIP_ID,RECEPT_NO,SALES_CM_CATEGORY,PICKING_REMARKS,REMARKS,CUSTOMER_REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_PC_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_PC_POST,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,PRICE_TOTAL,PRINT_DATE,COD_SC,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PICKING_LIST_ID,NEW.RO_DATE,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.SALES_SLIP_ID,NEW.RECEPT_NO,NEW.SALES_CM_CATEGORY,NEW.PICKING_REMARKS,NEW.REMARKS,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_DATE,NEW.COD_SC,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PICKING_LIST_TRN_XXXXX_UPD AFTER UPDATE ON PICKING_LIST_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LIST_TRN');

INSERT INTO PICKING_LIST_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LIST_ID,RO_DATE,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,SALES_SLIP_ID,RECEPT_NO,SALES_CM_CATEGORY,PICKING_REMARKS,REMARKS,CUSTOMER_REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_PC_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_PC_POST,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,PRICE_TOTAL,PRINT_DATE,COD_SC,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PICKING_LIST_ID,NEW.RO_DATE,NEW.SALES_ANNUAL,NEW.SALES_MONTHLY,NEW.SALES_YM,NEW.RO_SLIP_ID,NEW.SALES_SLIP_ID,NEW.RECEPT_NO,NEW.SALES_CM_CATEGORY,NEW.PICKING_REMARKS,NEW.REMARKS,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUSTOMER_PC_NAME,NEW.CUSTOMER_ZIP_CODE,NEW.CUSTOMER_ADDRESS_1,NEW.CUSTOMER_ADDRESS_2,NEW.CUSTOMER_OFFICE_NAME,NEW.CUSTOMER_OFFICE_KANA,NEW.CUSTOMER_ABBR,NEW.CUSTOMER_DEPT_NAME,NEW.CUSTOMER_PC_POST,NEW.CUSTOMER_PC_KANA,NEW.CUSTOMER_PC_PRE_CATEGORY,NEW.CUSTOMER_PC_PRE,NEW.CUSTOMER_TEL,NEW.CUSTOMER_FAX,NEW.CUSTOMER_EMAIL,NEW.CUSTOMER_URL,NEW.DELIVERY_CODE,NEW.DELIVERY_NAME,NEW.DELIVERY_KANA,NEW.DELIVERY_OFFICE_NAME,NEW.DELIVERY_OFFICE_KANA,NEW.DELIVERY_DEPT_NAME,NEW.DELIVERY_ZIP_CODE,NEW.DELIVERY_ADDRESS_1,NEW.DELIVERY_ADDRESS_2,NEW.DELIVERY_PC_NAME,NEW.DELIVERY_PC_KANA,NEW.DELIVERY_PC_PRE_CATEGORY,NEW.DELIVERY_PC_PRE,NEW.DELIVERY_TEL,NEW.DELIVERY_FAX,NEW.DELIVERY_EMAIL,NEW.DELIVERY_URL,NEW.BA_CODE,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_PRICE_TOTAL,NEW.PRICE_TOTAL,NEW.PRINT_DATE,NEW.COD_SC,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PICKING_LIST_TRN_XXXXX_DEL AFTER DELETE ON PICKING_LIST_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LIST_TRN');

INSERT INTO PICKING_LIST_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LIST_ID,RO_DATE,SALES_ANNUAL,SALES_MONTHLY,SALES_YM,RO_SLIP_ID,SALES_SLIP_ID,RECEPT_NO,SALES_CM_CATEGORY,PICKING_REMARKS,REMARKS,CUSTOMER_REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUSTOMER_PC_NAME,CUSTOMER_ZIP_CODE,CUSTOMER_ADDRESS_1,CUSTOMER_ADDRESS_2,CUSTOMER_OFFICE_NAME,CUSTOMER_OFFICE_KANA,CUSTOMER_ABBR,CUSTOMER_DEPT_NAME,CUSTOMER_PC_POST,CUSTOMER_PC_KANA,CUSTOMER_PC_PRE_CATEGORY,CUSTOMER_PC_PRE,CUSTOMER_TEL,CUSTOMER_FAX,CUSTOMER_EMAIL,CUSTOMER_URL,DELIVERY_CODE,DELIVERY_NAME,DELIVERY_KANA,DELIVERY_OFFICE_NAME,DELIVERY_OFFICE_KANA,DELIVERY_DEPT_NAME,DELIVERY_ZIP_CODE,DELIVERY_ADDRESS_1,DELIVERY_ADDRESS_2,DELIVERY_PC_NAME,DELIVERY_PC_KANA,DELIVERY_PC_PRE_CATEGORY,DELIVERY_PC_PRE,DELIVERY_TEL,DELIVERY_FAX,DELIVERY_EMAIL,DELIVERY_URL,BA_CODE,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_PRICE_TOTAL,PRICE_TOTAL,PRINT_DATE,COD_SC,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PICKING_LIST_ID,OLD.RO_DATE,OLD.SALES_ANNUAL,OLD.SALES_MONTHLY,OLD.SALES_YM,OLD.RO_SLIP_ID,OLD.SALES_SLIP_ID,OLD.RECEPT_NO,OLD.SALES_CM_CATEGORY,OLD.PICKING_REMARKS,OLD.REMARKS,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.CUSTOMER_PC_NAME,OLD.CUSTOMER_ZIP_CODE,OLD.CUSTOMER_ADDRESS_1,OLD.CUSTOMER_ADDRESS_2,OLD.CUSTOMER_OFFICE_NAME,OLD.CUSTOMER_OFFICE_KANA,OLD.CUSTOMER_ABBR,OLD.CUSTOMER_DEPT_NAME,OLD.CUSTOMER_PC_POST,OLD.CUSTOMER_PC_KANA,OLD.CUSTOMER_PC_PRE_CATEGORY,OLD.CUSTOMER_PC_PRE,OLD.CUSTOMER_TEL,OLD.CUSTOMER_FAX,OLD.CUSTOMER_EMAIL,OLD.CUSTOMER_URL,OLD.DELIVERY_CODE,OLD.DELIVERY_NAME,OLD.DELIVERY_KANA,OLD.DELIVERY_OFFICE_NAME,OLD.DELIVERY_OFFICE_KANA,OLD.DELIVERY_DEPT_NAME,OLD.DELIVERY_ZIP_CODE,OLD.DELIVERY_ADDRESS_1,OLD.DELIVERY_ADDRESS_2,OLD.DELIVERY_PC_NAME,OLD.DELIVERY_PC_KANA,OLD.DELIVERY_PC_PRE_CATEGORY,OLD.DELIVERY_PC_PRE,OLD.DELIVERY_TEL,OLD.DELIVERY_FAX,OLD.DELIVERY_EMAIL,OLD.DELIVERY_URL,OLD.BA_CODE,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_PRICE_TOTAL,OLD.PRICE_TOTAL,OLD.PRINT_DATE,OLD.COD_SC,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PICKING_LINE_TRN_XXXXX'//
CREATE TRIGGER PICKING_LINE_TRN_XXXXX_INS AFTER INSERT ON PICKING_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LINE_TRN');

INSERT INTO PICKING_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LINE_ID,PICKING_LIST_ID,SALES_LINE_ID,RO_LINE_ID,LINE_NO,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,RACK_CODE_SRC,STOCK_NUM,REMARKS,PICKING_REMARKS,SET_TYPE_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PICKING_LINE_ID,NEW.PICKING_LIST_ID,NEW.SALES_LINE_ID,NEW.RO_LINE_ID,NEW.LINE_NO,NEW.SALES_DETAIL_CATEGORY,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.GM,NEW.RACK_CODE_SRC,NEW.STOCK_NUM,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.SET_TYPE_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PICKING_LINE_TRN_XXXXX_UPD AFTER UPDATE ON PICKING_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LINE_TRN');

INSERT INTO PICKING_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LINE_ID,PICKING_LIST_ID,SALES_LINE_ID,RO_LINE_ID,LINE_NO,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,RACK_CODE_SRC,STOCK_NUM,REMARKS,PICKING_REMARKS,SET_TYPE_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PICKING_LINE_ID,NEW.PICKING_LIST_ID,NEW.SALES_LINE_ID,NEW.RO_LINE_ID,NEW.LINE_NO,NEW.SALES_DETAIL_CATEGORY,NEW.PRODUCT_CODE,NEW.CUSTOMER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.UNIT_CATEGORY,NEW.UNIT_NAME,NEW.PACK_QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.UNIT_COST,NEW.COST,NEW.TAX_CATEGORY,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.GM,NEW.RACK_CODE_SRC,NEW.STOCK_NUM,NEW.REMARKS,NEW.PICKING_REMARKS,NEW.SET_TYPE_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PICKING_LINE_TRN_XXXXX_DEL AFTER DELETE ON PICKING_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PICKING_LINE_TRN');

INSERT INTO PICKING_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PICKING_LINE_ID,PICKING_LIST_ID,SALES_LINE_ID,RO_LINE_ID,LINE_NO,SALES_DETAIL_CATEGORY,PRODUCT_CODE,CUSTOMER_PCODE,PRODUCT_ABSTRACT,QUANTITY,UNIT_PRICE,UNIT_CATEGORY,UNIT_NAME,PACK_QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,UNIT_COST,COST,TAX_CATEGORY,CTAX_RATE,CTAX_PRICE,GM,RACK_CODE_SRC,STOCK_NUM,REMARKS,PICKING_REMARKS,SET_TYPE_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PICKING_LINE_ID,OLD.PICKING_LIST_ID,OLD.SALES_LINE_ID,OLD.RO_LINE_ID,OLD.LINE_NO,OLD.SALES_DETAIL_CATEGORY,OLD.PRODUCT_CODE,OLD.CUSTOMER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.UNIT_PRICE,OLD.UNIT_CATEGORY,OLD.UNIT_NAME,OLD.PACK_QUANTITY,OLD.UNIT_RETAIL_PRICE,OLD.RETAIL_PRICE,OLD.UNIT_COST,OLD.COST,OLD.TAX_CATEGORY,OLD.CTAX_RATE,OLD.CTAX_PRICE,OLD.GM,OLD.RACK_CODE_SRC,OLD.STOCK_NUM,OLD.REMARKS,OLD.PICKING_REMARKS,OLD.SET_TYPE_CATEGORY,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'BILL_TRN_XXXXX'//
CREATE TRIGGER BILL_TRN_XXXXX_INS AFTER INSERT ON BILL_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BILL_TRN');

INSERT INTO BILL_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BILL_ID,STATUS,BILL_YEAR,BILL_MONTH,BILL_YM,BILL_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,CUTOFF_PDATE,REMARKS,BA_CODE,CUSTOMER_CODE,LAST_BILL_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_BILL_PRICE,SLIP_NUM,COD_LAST_BILL_PRICE,COD_DEPOSIT_PRICE,COD_ADJ_PRICE,COD_COV_PRICE,COD_SALES_PRICE,COD_CTAX_PRICE,COD_RGU_PRICE,COD_DCT_PRICE,COD_ETC_PRICE,COD_THIS_BILL_PRICE,COD_SLIP_NUM,USER_ID,USER_NAME,PAYBACK_PLAN_DATE,LAST_PRINT_DATE,BILL_PRINT_COUNT,BILL_CRT_CATEGORY,LAST_SALES_DATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.BILL_ID,NEW.STATUS,NEW.BILL_YEAR,NEW.BILL_MONTH,NEW.BILL_YM,NEW.BILL_CUTOFF_DATE,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.CUTOFF_PDATE,NEW.REMARKS,NEW.BA_CODE,NEW.CUSTOMER_CODE,NEW.LAST_BILL_PRICE,NEW.DEPOSIT_PRICE,NEW.ADJ_PRICE,NEW.COV_PRICE,NEW.SALES_PRICE,NEW.CTAX_PRICE,NEW.RGU_PRICE,NEW.DCT_PRICE,NEW.ETC_PRICE,NEW.THIS_BILL_PRICE,NEW.SLIP_NUM,NEW.COD_LAST_BILL_PRICE,NEW.COD_DEPOSIT_PRICE,NEW.COD_ADJ_PRICE,NEW.COD_COV_PRICE,NEW.COD_SALES_PRICE,NEW.COD_CTAX_PRICE,NEW.COD_RGU_PRICE,NEW.COD_DCT_PRICE,NEW.COD_ETC_PRICE,NEW.COD_THIS_BILL_PRICE,NEW.COD_SLIP_NUM,NEW.USER_ID,NEW.USER_NAME,NEW.PAYBACK_PLAN_DATE,NEW.LAST_PRINT_DATE,NEW.BILL_PRINT_COUNT,NEW.BILL_CRT_CATEGORY,NEW.LAST_SALES_DATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BILL_TRN_XXXXX_UPD AFTER UPDATE ON BILL_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BILL_TRN');

INSERT INTO BILL_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BILL_ID,STATUS,BILL_YEAR,BILL_MONTH,BILL_YM,BILL_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,CUTOFF_PDATE,REMARKS,BA_CODE,CUSTOMER_CODE,LAST_BILL_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_BILL_PRICE,SLIP_NUM,COD_LAST_BILL_PRICE,COD_DEPOSIT_PRICE,COD_ADJ_PRICE,COD_COV_PRICE,COD_SALES_PRICE,COD_CTAX_PRICE,COD_RGU_PRICE,COD_DCT_PRICE,COD_ETC_PRICE,COD_THIS_BILL_PRICE,COD_SLIP_NUM,USER_ID,USER_NAME,PAYBACK_PLAN_DATE,LAST_PRINT_DATE,BILL_PRINT_COUNT,BILL_CRT_CATEGORY,LAST_SALES_DATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.BILL_ID,NEW.STATUS,NEW.BILL_YEAR,NEW.BILL_MONTH,NEW.BILL_YM,NEW.BILL_CUTOFF_DATE,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.CUTOFF_PDATE,NEW.REMARKS,NEW.BA_CODE,NEW.CUSTOMER_CODE,NEW.LAST_BILL_PRICE,NEW.DEPOSIT_PRICE,NEW.ADJ_PRICE,NEW.COV_PRICE,NEW.SALES_PRICE,NEW.CTAX_PRICE,NEW.RGU_PRICE,NEW.DCT_PRICE,NEW.ETC_PRICE,NEW.THIS_BILL_PRICE,NEW.SLIP_NUM,NEW.COD_LAST_BILL_PRICE,NEW.COD_DEPOSIT_PRICE,NEW.COD_ADJ_PRICE,NEW.COD_COV_PRICE,NEW.COD_SALES_PRICE,NEW.COD_CTAX_PRICE,NEW.COD_RGU_PRICE,NEW.COD_DCT_PRICE,NEW.COD_ETC_PRICE,NEW.COD_THIS_BILL_PRICE,NEW.COD_SLIP_NUM,NEW.USER_ID,NEW.USER_NAME,NEW.PAYBACK_PLAN_DATE,NEW.LAST_PRINT_DATE,NEW.BILL_PRINT_COUNT,NEW.BILL_CRT_CATEGORY,NEW.LAST_SALES_DATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BILL_TRN_XXXXX_DEL AFTER DELETE ON BILL_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BILL_TRN');

INSERT INTO BILL_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,BILL_ID,STATUS,BILL_YEAR,BILL_MONTH,BILL_YM,BILL_CUTOFF_DATE,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,CUTOFF_PDATE,REMARKS,BA_CODE,CUSTOMER_CODE,LAST_BILL_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_BILL_PRICE,SLIP_NUM,COD_LAST_BILL_PRICE,COD_DEPOSIT_PRICE,COD_ADJ_PRICE,COD_COV_PRICE,COD_SALES_PRICE,COD_CTAX_PRICE,COD_RGU_PRICE,COD_DCT_PRICE,COD_ETC_PRICE,COD_THIS_BILL_PRICE,COD_SLIP_NUM,USER_ID,USER_NAME,PAYBACK_PLAN_DATE,LAST_PRINT_DATE,BILL_PRINT_COUNT,BILL_CRT_CATEGORY,LAST_SALES_DATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.BILL_ID,OLD.STATUS,OLD.BILL_YEAR,OLD.BILL_MONTH,OLD.BILL_YM,OLD.BILL_CUTOFF_DATE,OLD.CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.CUTOFF_PDATE,OLD.REMARKS,OLD.BA_CODE,OLD.CUSTOMER_CODE,OLD.LAST_BILL_PRICE,OLD.DEPOSIT_PRICE,OLD.ADJ_PRICE,OLD.COV_PRICE,OLD.SALES_PRICE,OLD.CTAX_PRICE,OLD.RGU_PRICE,OLD.DCT_PRICE,OLD.ETC_PRICE,OLD.THIS_BILL_PRICE,OLD.SLIP_NUM,OLD.COD_LAST_BILL_PRICE,OLD.COD_DEPOSIT_PRICE,OLD.COD_ADJ_PRICE,OLD.COD_COV_PRICE,OLD.COD_SALES_PRICE,OLD.COD_CTAX_PRICE,OLD.COD_RGU_PRICE,OLD.COD_DCT_PRICE,OLD.COD_ETC_PRICE,OLD.COD_THIS_BILL_PRICE,OLD.COD_SLIP_NUM,OLD.USER_ID,OLD.USER_NAME,OLD.PAYBACK_PLAN_DATE,OLD.LAST_PRINT_DATE,OLD.BILL_PRINT_COUNT,OLD.BILL_CRT_CATEGORY,OLD.LAST_SALES_DATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DEPOSIT_SLIP_TRN_XXXXX'//
CREATE TRIGGER DEPOSIT_SLIP_TRN_XXXXX_INS AFTER INSERT ON DEPOSIT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_SLIP_TRN');

INSERT INTO DEPOSIT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,STATUS,DEPOSIT_DATE,INPUT_PDATE,DEPOSIT_ANNUAL,DEPOSIT_MONTHLY,DEPOSIT_YM,USER_ID,USER_NAME,DEPOSIT_ABSTRACT,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATRGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,SALES_CM_CATEGORY,DEPOSIT_CATEGORY,DEPOSIT_TOTAL,BILL_ID,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,ART_ID,SALES_SLIP_ID,DEPOSIT_METHOD_TYPE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DEPOSIT_SLIP_ID,NEW.STATUS,NEW.DEPOSIT_DATE,NEW.INPUT_PDATE,NEW.DEPOSIT_ANNUAL,NEW.DEPOSIT_MONTHLY,NEW.DEPOSIT_YM,NEW.USER_ID,NEW.USER_NAME,NEW.DEPOSIT_ABSTRACT,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATRGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.SALES_CM_CATEGORY,NEW.DEPOSIT_CATEGORY,NEW.DEPOSIT_TOTAL,NEW.BILL_ID,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.ART_ID,NEW.SALES_SLIP_ID,NEW.DEPOSIT_METHOD_TYPE_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPOSIT_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON DEPOSIT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_SLIP_TRN');

INSERT INTO DEPOSIT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,STATUS,DEPOSIT_DATE,INPUT_PDATE,DEPOSIT_ANNUAL,DEPOSIT_MONTHLY,DEPOSIT_YM,USER_ID,USER_NAME,DEPOSIT_ABSTRACT,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATRGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,SALES_CM_CATEGORY,DEPOSIT_CATEGORY,DEPOSIT_TOTAL,BILL_ID,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,ART_ID,SALES_SLIP_ID,DEPOSIT_METHOD_TYPE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DEPOSIT_SLIP_ID,NEW.STATUS,NEW.DEPOSIT_DATE,NEW.INPUT_PDATE,NEW.DEPOSIT_ANNUAL,NEW.DEPOSIT_MONTHLY,NEW.DEPOSIT_YM,NEW.USER_ID,NEW.USER_NAME,NEW.DEPOSIT_ABSTRACT,NEW.REMARKS,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.BA_CODE,NEW.BA_NAME,NEW.BA_KANA,NEW.BA_OFFICE_NAME,NEW.BA_OFFICE_KANA,NEW.BA_DEPT_NAME,NEW.BA_ZIP_CODE,NEW.BA_ADDRESS_1,NEW.BA_ADDRESS_2,NEW.BA_PC_NAME,NEW.BA_PC_KANA,NEW.BA_PC_PRE_CATRGORY,NEW.BA_PC_PRE,NEW.BA_TEL,NEW.BA_FAX,NEW.BA_EMAIL,NEW.BA_URL,NEW.SALES_CM_CATEGORY,NEW.DEPOSIT_CATEGORY,NEW.DEPOSIT_TOTAL,NEW.BILL_ID,NEW.BILL_CUTOFF_DATE,NEW.BILL_CUTOFF_PDATE,NEW.ART_ID,NEW.SALES_SLIP_ID,NEW.DEPOSIT_METHOD_TYPE_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CUSTOMER_REMARKS,NEW.CUSTOMER_COMMENT_DATA,NEW.SALES_CUTOFF_DATE,NEW.SALES_CUTOFF_PDATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPOSIT_SLIP_TRN_XXXXX_DEL AFTER DELETE ON DEPOSIT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_SLIP_TRN');

INSERT INTO DEPOSIT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,STATUS,DEPOSIT_DATE,INPUT_PDATE,DEPOSIT_ANNUAL,DEPOSIT_MONTHLY,DEPOSIT_YM,USER_ID,USER_NAME,DEPOSIT_ABSTRACT,REMARKS,CUSTOMER_CODE,CUSTOMER_NAME,CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,BA_CODE,BA_NAME,BA_KANA,BA_OFFICE_NAME,BA_OFFICE_KANA,BA_DEPT_NAME,BA_ZIP_CODE,BA_ADDRESS_1,BA_ADDRESS_2,BA_PC_NAME,BA_PC_KANA,BA_PC_PRE_CATRGORY,BA_PC_PRE,BA_TEL,BA_FAX,BA_EMAIL,BA_URL,SALES_CM_CATEGORY,DEPOSIT_CATEGORY,DEPOSIT_TOTAL,BILL_ID,BILL_CUTOFF_DATE,BILL_CUTOFF_PDATE,ART_ID,SALES_SLIP_ID,DEPOSIT_METHOD_TYPE_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CUSTOMER_REMARKS,CUSTOMER_COMMENT_DATA,SALES_CUTOFF_DATE,SALES_CUTOFF_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DEPOSIT_SLIP_ID,OLD.STATUS,OLD.DEPOSIT_DATE,OLD.INPUT_PDATE,OLD.DEPOSIT_ANNUAL,OLD.DEPOSIT_MONTHLY,OLD.DEPOSIT_YM,OLD.USER_ID,OLD.USER_NAME,OLD.DEPOSIT_ABSTRACT,OLD.REMARKS,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.BA_CODE,OLD.BA_NAME,OLD.BA_KANA,OLD.BA_OFFICE_NAME,OLD.BA_OFFICE_KANA,OLD.BA_DEPT_NAME,OLD.BA_ZIP_CODE,OLD.BA_ADDRESS_1,OLD.BA_ADDRESS_2,OLD.BA_PC_NAME,OLD.BA_PC_KANA,OLD.BA_PC_PRE_CATRGORY,OLD.BA_PC_PRE,OLD.BA_TEL,OLD.BA_FAX,OLD.BA_EMAIL,OLD.BA_URL,OLD.SALES_CM_CATEGORY,OLD.DEPOSIT_CATEGORY,OLD.DEPOSIT_TOTAL,OLD.BILL_ID,OLD.BILL_CUTOFF_DATE,OLD.BILL_CUTOFF_PDATE,OLD.ART_ID,OLD.SALES_SLIP_ID,OLD.DEPOSIT_METHOD_TYPE_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CUSTOMER_REMARKS,OLD.CUSTOMER_COMMENT_DATA,OLD.SALES_CUTOFF_DATE,OLD.SALES_CUTOFF_PDATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DEPOSIT_LINE_TRN_XXXXX'//
CREATE TRIGGER DEPOSIT_LINE_TRN_XXXXX_INS AFTER INSERT ON DEPOSIT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_LINE_TRN');

INSERT INTO DEPOSIT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_LINE_ID,STATUS,DEPOSIT_SLIP_ID,LINE_NO,DEPOSIT_CATEGORY,PRICE,INST_DATE,INST_NO,BANK_ID,BANK_INFO,REMARKS,SALES_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DEPOSIT_LINE_ID,NEW.STATUS,NEW.DEPOSIT_SLIP_ID,NEW.LINE_NO,NEW.DEPOSIT_CATEGORY,NEW.PRICE,NEW.INST_DATE,NEW.INST_NO,NEW.BANK_ID,NEW.BANK_INFO,NEW.REMARKS,NEW.SALES_LINE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPOSIT_LINE_TRN_XXXXX_UPD AFTER UPDATE ON DEPOSIT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_LINE_TRN');

INSERT INTO DEPOSIT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_LINE_ID,STATUS,DEPOSIT_SLIP_ID,LINE_NO,DEPOSIT_CATEGORY,PRICE,INST_DATE,INST_NO,BANK_ID,BANK_INFO,REMARKS,SALES_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DEPOSIT_LINE_ID,NEW.STATUS,NEW.DEPOSIT_SLIP_ID,NEW.LINE_NO,NEW.DEPOSIT_CATEGORY,NEW.PRICE,NEW.INST_DATE,NEW.INST_NO,NEW.BANK_ID,NEW.BANK_INFO,NEW.REMARKS,NEW.SALES_LINE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPOSIT_LINE_TRN_XXXXX_DEL AFTER DELETE ON DEPOSIT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPOSIT_LINE_TRN');

INSERT INTO DEPOSIT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_LINE_ID,STATUS,DEPOSIT_SLIP_ID,LINE_NO,DEPOSIT_CATEGORY,PRICE,INST_DATE,INST_NO,BANK_ID,BANK_INFO,REMARKS,SALES_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DEPOSIT_LINE_ID,OLD.STATUS,OLD.DEPOSIT_SLIP_ID,OLD.LINE_NO,OLD.DEPOSIT_CATEGORY,OLD.PRICE,OLD.INST_DATE,OLD.INST_NO,OLD.BANK_ID,OLD.BANK_INFO,OLD.REMARKS,OLD.SALES_LINE_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PO_SLIP_TRN_XXXXX'//
CREATE TRIGGER PO_SLIP_TRN_XXXXX_INS AFTER INSERT ON PO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PO_SLIP_ID,NEW.STATUS,NEW.PO_DATE,NEW.PO_ANNUAL,NEW.PO_MONTHLY,NEW.PO_YM,NEW.DELIVERY_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_PRE,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.TRANSPORT_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.RATE_ID,NEW.SUPPLIER_CM_CATEGORY,NEW.PRICE_TOTAL,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.FE_PRICE_TOTAL,NEW.PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON PO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PO_SLIP_ID,NEW.STATUS,NEW.PO_DATE,NEW.PO_ANNUAL,NEW.PO_MONTHLY,NEW.PO_YM,NEW.DELIVERY_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.REMARKS,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_KANA,NEW.SUPPLIER_ABBR,NEW.SUPPLIER_DEPT_NAME,NEW.SUPPLIER_ZIP_CODE,NEW.SUPPLIER_ADDRESS_1,NEW.SUPPLIER_ADDRESS_2,NEW.SUPPLIER_PC_NAME,NEW.SUPPLIER_PC_KANA,NEW.SUPPLIER_PC_PRE_CATEGORY,NEW.SUPPLIER_PC_PRE,NEW.SUPPLIER_PC_POST,NEW.SUPPLIER_TEL,NEW.SUPPLIER_FAX,NEW.SUPPLIER_EMAIL,NEW.SUPPLIER_URL,NEW.TRANSPORT_CATEGORY,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.RATE_ID,NEW.SUPPLIER_CM_CATEGORY,NEW.PRICE_TOTAL,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.FE_PRICE_TOTAL,NEW.PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_SLIP_TRN_XXXXX_DEL AFTER DELETE ON PO_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_SLIP_TRN');

INSERT INTO PO_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_SLIP_ID,STATUS,PO_DATE,PO_ANNUAL,PO_MONTHLY,PO_YM,DELIVERY_DATE,USER_ID,USER_NAME,REMARKS,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_KANA,SUPPLIER_ABBR,SUPPLIER_DEPT_NAME,SUPPLIER_ZIP_CODE,SUPPLIER_ADDRESS_1,SUPPLIER_ADDRESS_2,SUPPLIER_PC_NAME,SUPPLIER_PC_KANA,SUPPLIER_PC_PRE_CATEGORY,SUPPLIER_PC_PRE,SUPPLIER_PC_POST,SUPPLIER_TEL,SUPPLIER_FAX,SUPPLIER_EMAIL,SUPPLIER_URL,TRANSPORT_CATEGORY,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,RATE_ID,SUPPLIER_CM_CATEGORY,PRICE_TOTAL,CTAX_TOTAL,CTAX_RATE,FE_PRICE_TOTAL,PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PO_SLIP_ID,OLD.STATUS,OLD.PO_DATE,OLD.PO_ANNUAL,OLD.PO_MONTHLY,OLD.PO_YM,OLD.DELIVERY_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.REMARKS,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.SUPPLIER_KANA,OLD.SUPPLIER_ABBR,OLD.SUPPLIER_DEPT_NAME,OLD.SUPPLIER_ZIP_CODE,OLD.SUPPLIER_ADDRESS_1,OLD.SUPPLIER_ADDRESS_2,OLD.SUPPLIER_PC_NAME,OLD.SUPPLIER_PC_KANA,OLD.SUPPLIER_PC_PRE_CATEGORY,OLD.SUPPLIER_PC_PRE,OLD.SUPPLIER_PC_POST,OLD.SUPPLIER_TEL,OLD.SUPPLIER_FAX,OLD.SUPPLIER_EMAIL,OLD.SUPPLIER_URL,OLD.TRANSPORT_CATEGORY,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.RATE_ID,OLD.SUPPLIER_CM_CATEGORY,OLD.PRICE_TOTAL,OLD.CTAX_TOTAL,OLD.CTAX_RATE,OLD.FE_PRICE_TOTAL,OLD.PRINT_COUNT,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PO_LINE_TRN_XXXXX'//
CREATE TRIGGER PO_LINE_TRN_XXXXX_INS AFTER INSERT ON PO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_LINE_TRN');

INSERT INTO PO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_LINE_ID,STATUS,PO_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,QUANTITY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,SUPPLIER_CM_CATEGORY,UNIT_PRICE,PRICE,CTAX_PRICE,CTAX_RATE,DOL_UNIT_PRICE,DOL_PRICE,RATE,DELIVERY_DATE,REMARKS,REST_QUANTITY,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PO_LINE_ID,NEW.STATUS,NEW.PO_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.SUPPLIER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.TEMP_UNIT_PRICE_CATEGORY,NEW.TAX_CATEGORY,NEW.SUPPLIER_CM_CATEGORY,NEW.UNIT_PRICE,NEW.PRICE,NEW.CTAX_PRICE,NEW.CTAX_RATE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.DELIVERY_DATE,NEW.REMARKS,NEW.REST_QUANTITY,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_LINE_TRN_XXXXX_UPD AFTER UPDATE ON PO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_LINE_TRN');

INSERT INTO PO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_LINE_ID,STATUS,PO_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,QUANTITY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,SUPPLIER_CM_CATEGORY,UNIT_PRICE,PRICE,CTAX_PRICE,CTAX_RATE,DOL_UNIT_PRICE,DOL_PRICE,RATE,DELIVERY_DATE,REMARKS,REST_QUANTITY,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PO_LINE_ID,NEW.STATUS,NEW.PO_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.SUPPLIER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.TEMP_UNIT_PRICE_CATEGORY,NEW.TAX_CATEGORY,NEW.SUPPLIER_CM_CATEGORY,NEW.UNIT_PRICE,NEW.PRICE,NEW.CTAX_PRICE,NEW.CTAX_RATE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.DELIVERY_DATE,NEW.REMARKS,NEW.REST_QUANTITY,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PO_LINE_TRN_XXXXX_DEL AFTER DELETE ON PO_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PO_LINE_TRN');

INSERT INTO PO_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PO_LINE_ID,STATUS,PO_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,QUANTITY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,SUPPLIER_CM_CATEGORY,UNIT_PRICE,PRICE,CTAX_PRICE,CTAX_RATE,DOL_UNIT_PRICE,DOL_PRICE,RATE,DELIVERY_DATE,REMARKS,REST_QUANTITY,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PO_LINE_ID,OLD.STATUS,OLD.PO_SLIP_ID,OLD.LINE_NO,OLD.PRODUCT_CODE,OLD.SUPPLIER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.TEMP_UNIT_PRICE_CATEGORY,OLD.TAX_CATEGORY,OLD.SUPPLIER_CM_CATEGORY,OLD.UNIT_PRICE,OLD.PRICE,OLD.CTAX_PRICE,OLD.CTAX_RATE,OLD.DOL_UNIT_PRICE,OLD.DOL_PRICE,OLD.RATE,OLD.DELIVERY_DATE,OLD.REMARKS,OLD.REST_QUANTITY,OLD.PRODUCT_REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SUPPLIER_SLIP_TRN_XXXXX'//
CREATE TRIGGER SUPPLIER_SLIP_TRN_XXXXX_INS AFTER INSERT ON SUPPLIER_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SUPPLIER_SLIP_ID,NEW.STATUS,NEW.SUPPLIER_DATE,NEW.SUPPLIER_ANNUAL,NEW.SUPPLIER_MONTHLY,NEW.SUPPLIER_YM,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_CM_CATEGORY,NEW.DELIVERY_DATE,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.PAYMENT_SLIP_ID,NEW.SUPPLIER_PAYMENT_DATE,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON SUPPLIER_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SUPPLIER_SLIP_ID,NEW.STATUS,NEW.SUPPLIER_DATE,NEW.SUPPLIER_ANNUAL,NEW.SUPPLIER_MONTHLY,NEW.SUPPLIER_YM,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.SUPPLIER_CM_CATEGORY,NEW.DELIVERY_DATE,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.CTAX_TOTAL,NEW.CTAX_RATE,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.PAYMENT_SLIP_ID,NEW.SUPPLIER_PAYMENT_DATE,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_SLIP_TRN_XXXXX_DEL AFTER DELETE ON SUPPLIER_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_SLIP_TRN');

INSERT INTO SUPPLIER_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_SLIP_ID,STATUS,SUPPLIER_DATE,SUPPLIER_ANNUAL,SUPPLIER_MONTHLY,SUPPLIER_YM,USER_ID,USER_NAME,SUPPLIER_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,SUPPLIER_CM_CATEGORY,DELIVERY_DATE,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,CTAX_TOTAL,CTAX_RATE,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,PAYMENT_SLIP_ID,SUPPLIER_PAYMENT_DATE,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SUPPLIER_SLIP_ID,OLD.STATUS,OLD.SUPPLIER_DATE,OLD.SUPPLIER_ANNUAL,OLD.SUPPLIER_MONTHLY,OLD.SUPPLIER_YM,OLD.USER_ID,OLD.USER_NAME,OLD.SUPPLIER_SLIP_CATEGORY,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.SUPPLIER_CM_CATEGORY,OLD.DELIVERY_DATE,OLD.RATE_ID,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.CTAX_TOTAL,OLD.CTAX_RATE,OLD.PRICE_TOTAL,OLD.FE_PRICE_TOTAL,OLD.PO_SLIP_ID,OLD.PAYMENT_SLIP_ID,OLD.SUPPLIER_PAYMENT_DATE,OLD.PAYMENT_CUTOFF_DATE,OLD.PAYMENT_PDATE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SUPPLIER_LINE_TRN_XXXXX'//
CREATE TRIGGER SUPPLIER_LINE_TRN_XXXXX_INS AFTER INSERT ON SUPPLIER_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_LINE_TRN');

INSERT INTO SUPPLIER_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_LINE_ID,STATUS,SUPPLIER_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,SUPPLIER_DETAIL_CATEGORY,DELIVERY_PROCESS_CATEGORY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,DELIVERY_DATE,QUANTITY,UNIT_PRICE,PRICE,CTAX_RATE,CTAX_PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,REMARKS,RACK_CODE,RACK_NAME,PO_LINE_ID,PAYMENT_LINE_ID,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SUPPLIER_LINE_ID,NEW.STATUS,NEW.SUPPLIER_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.SUPPLIER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.SUPPLIER_DETAIL_CATEGORY,NEW.DELIVERY_PROCESS_CATEGORY,NEW.TEMP_UNIT_PRICE_CATEGORY,NEW.TAX_CATEGORY,NEW.DELIVERY_DATE,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.PRICE,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.REMARKS,NEW.RACK_CODE,NEW.RACK_NAME,NEW.PO_LINE_ID,NEW.PAYMENT_LINE_ID,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_LINE_TRN_XXXXX_UPD AFTER UPDATE ON SUPPLIER_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_LINE_TRN');

INSERT INTO SUPPLIER_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_LINE_ID,STATUS,SUPPLIER_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,SUPPLIER_DETAIL_CATEGORY,DELIVERY_PROCESS_CATEGORY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,DELIVERY_DATE,QUANTITY,UNIT_PRICE,PRICE,CTAX_RATE,CTAX_PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,REMARKS,RACK_CODE,RACK_NAME,PO_LINE_ID,PAYMENT_LINE_ID,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SUPPLIER_LINE_ID,NEW.STATUS,NEW.SUPPLIER_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.SUPPLIER_PCODE,NEW.PRODUCT_ABSTRACT,NEW.SUPPLIER_DETAIL_CATEGORY,NEW.DELIVERY_PROCESS_CATEGORY,NEW.TEMP_UNIT_PRICE_CATEGORY,NEW.TAX_CATEGORY,NEW.DELIVERY_DATE,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.PRICE,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.REMARKS,NEW.RACK_CODE,NEW.RACK_NAME,NEW.PO_LINE_ID,NEW.PAYMENT_LINE_ID,NEW.PRODUCT_REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SUPPLIER_LINE_TRN_XXXXX_DEL AFTER DELETE ON SUPPLIER_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SUPPLIER_LINE_TRN');

INSERT INTO SUPPLIER_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SUPPLIER_LINE_ID,STATUS,SUPPLIER_SLIP_ID,LINE_NO,PRODUCT_CODE,SUPPLIER_PCODE,PRODUCT_ABSTRACT,SUPPLIER_DETAIL_CATEGORY,DELIVERY_PROCESS_CATEGORY,TEMP_UNIT_PRICE_CATEGORY,TAX_CATEGORY,DELIVERY_DATE,QUANTITY,UNIT_PRICE,PRICE,CTAX_RATE,CTAX_PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,REMARKS,RACK_CODE,RACK_NAME,PO_LINE_ID,PAYMENT_LINE_ID,PRODUCT_REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SUPPLIER_LINE_ID,OLD.STATUS,OLD.SUPPLIER_SLIP_ID,OLD.LINE_NO,OLD.PRODUCT_CODE,OLD.SUPPLIER_PCODE,OLD.PRODUCT_ABSTRACT,OLD.SUPPLIER_DETAIL_CATEGORY,OLD.DELIVERY_PROCESS_CATEGORY,OLD.TEMP_UNIT_PRICE_CATEGORY,OLD.TAX_CATEGORY,OLD.DELIVERY_DATE,OLD.QUANTITY,OLD.UNIT_PRICE,OLD.PRICE,OLD.CTAX_RATE,OLD.CTAX_PRICE,OLD.DOL_UNIT_PRICE,OLD.DOL_PRICE,OLD.RATE,OLD.REMARKS,OLD.RACK_CODE,OLD.RACK_NAME,OLD.PO_LINE_ID,OLD.PAYMENT_LINE_ID,OLD.PRODUCT_REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'EAD_SLIP_TRN_XXXXX'//
CREATE TRIGGER EAD_SLIP_TRN_XXXXX_INS AFTER INSERT ON EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_SLIP_TRN');

INSERT INTO EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_SLIP_ID,EAD_DATE,EAD_ANNUAL,EAD_MONTHLY,EAD_YM,USER_ID,USER_NAME,EAD_SLIP_CATEGORY,EAD_CATEGORY,REMARKS,SRC_FUNC,SALES_SLIP_ID,SUPPLIER_SLIP_ID,MOVE_DEPOSIT_SLIP_ID,STOCK_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.EAD_SLIP_ID,NEW.EAD_DATE,NEW.EAD_ANNUAL,NEW.EAD_MONTHLY,NEW.EAD_YM,NEW.USER_ID,NEW.USER_NAME,NEW.EAD_SLIP_CATEGORY,NEW.EAD_CATEGORY,NEW.REMARKS,NEW.SRC_FUNC,NEW.SALES_SLIP_ID,NEW.SUPPLIER_SLIP_ID,NEW.MOVE_DEPOSIT_SLIP_ID,NEW.STOCK_PDATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER EAD_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_SLIP_TRN');

INSERT INTO EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_SLIP_ID,EAD_DATE,EAD_ANNUAL,EAD_MONTHLY,EAD_YM,USER_ID,USER_NAME,EAD_SLIP_CATEGORY,EAD_CATEGORY,REMARKS,SRC_FUNC,SALES_SLIP_ID,SUPPLIER_SLIP_ID,MOVE_DEPOSIT_SLIP_ID,STOCK_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.EAD_SLIP_ID,NEW.EAD_DATE,NEW.EAD_ANNUAL,NEW.EAD_MONTHLY,NEW.EAD_YM,NEW.USER_ID,NEW.USER_NAME,NEW.EAD_SLIP_CATEGORY,NEW.EAD_CATEGORY,NEW.REMARKS,NEW.SRC_FUNC,NEW.SALES_SLIP_ID,NEW.SUPPLIER_SLIP_ID,NEW.MOVE_DEPOSIT_SLIP_ID,NEW.STOCK_PDATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER EAD_SLIP_TRN_XXXXX_DEL AFTER DELETE ON EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_SLIP_TRN');

INSERT INTO EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_SLIP_ID,EAD_DATE,EAD_ANNUAL,EAD_MONTHLY,EAD_YM,USER_ID,USER_NAME,EAD_SLIP_CATEGORY,EAD_CATEGORY,REMARKS,SRC_FUNC,SALES_SLIP_ID,SUPPLIER_SLIP_ID,MOVE_DEPOSIT_SLIP_ID,STOCK_PDATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.EAD_SLIP_ID,OLD.EAD_DATE,OLD.EAD_ANNUAL,OLD.EAD_MONTHLY,OLD.EAD_YM,OLD.USER_ID,OLD.USER_NAME,OLD.EAD_SLIP_CATEGORY,OLD.EAD_CATEGORY,OLD.REMARKS,OLD.SRC_FUNC,OLD.SALES_SLIP_ID,OLD.SUPPLIER_SLIP_ID,OLD.MOVE_DEPOSIT_SLIP_ID,OLD.STOCK_PDATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'EAD_LINE_TRN_XXXXX'//
CREATE TRIGGER EAD_LINE_TRN_XXXXX_INS AFTER INSERT ON EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_LINE_TRN');

INSERT INTO EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_LINE_ID,EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,RACK_CODE,RACK_NAME,QUANTITY,REMARKS,SALES_LINE_ID,SUPPLIER_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.EAD_LINE_ID,NEW.EAD_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.RACK_CODE,NEW.RACK_NAME,NEW.QUANTITY,NEW.REMARKS,NEW.SALES_LINE_ID,NEW.SUPPLIER_LINE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER EAD_LINE_TRN_XXXXX_UPD AFTER UPDATE ON EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_LINE_TRN');

INSERT INTO EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_LINE_ID,EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,RACK_CODE,RACK_NAME,QUANTITY,REMARKS,SALES_LINE_ID,SUPPLIER_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.EAD_LINE_ID,NEW.EAD_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.RACK_CODE,NEW.RACK_NAME,NEW.QUANTITY,NEW.REMARKS,NEW.SALES_LINE_ID,NEW.SUPPLIER_LINE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER EAD_LINE_TRN_XXXXX_DEL AFTER DELETE ON EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('EAD_LINE_TRN');

INSERT INTO EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,EAD_LINE_ID,EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,RACK_CODE,RACK_NAME,QUANTITY,REMARKS,SALES_LINE_ID,SUPPLIER_LINE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.EAD_LINE_ID,OLD.EAD_SLIP_ID,OLD.LINE_NO,OLD.PRODUCT_CODE,OLD.PRODUCT_ABSTRACT,OLD.RACK_CODE,OLD.RACK_NAME,OLD.QUANTITY,OLD.REMARKS,OLD.SALES_LINE_ID,OLD.SUPPLIER_LINE_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PAYMENT_SLIP_TRN_XXXXX'//
CREATE TRIGGER PAYMENT_SLIP_TRN_XXXXX_INS AFTER INSERT ON PAYMENT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_SLIP_TRN');

INSERT INTO PAYMENT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_SLIP_ID,STATUS,PAYMENT_DATE,PAYMENT_ANNUAL,PAYMENT_MONTHLY,PAYMENT_YM,USER_ID,USER_NAME,PAYMENT_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,SUPPLIER_SLIP_ID,APT_BALANCE_ID,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PAYMENT_SLIP_ID,NEW.STATUS,NEW.PAYMENT_DATE,NEW.PAYMENT_ANNUAL,NEW.PAYMENT_MONTHLY,NEW.PAYMENT_YM,NEW.USER_ID,NEW.USER_NAME,NEW.PAYMENT_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.SUPPLIER_SLIP_ID,NEW.APT_BALANCE_ID,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PAYMENT_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON PAYMENT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_SLIP_TRN');

INSERT INTO PAYMENT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_SLIP_ID,STATUS,PAYMENT_DATE,PAYMENT_ANNUAL,PAYMENT_MONTHLY,PAYMENT_YM,USER_ID,USER_NAME,PAYMENT_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,SUPPLIER_SLIP_ID,APT_BALANCE_ID,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PAYMENT_SLIP_ID,NEW.STATUS,NEW.PAYMENT_DATE,NEW.PAYMENT_ANNUAL,NEW.PAYMENT_MONTHLY,NEW.PAYMENT_YM,NEW.USER_ID,NEW.USER_NAME,NEW.PAYMENT_SLIP_CATEGORY,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.RATE_ID,NEW.TAX_SHIFT_CATEGORY,NEW.TAX_FRACT_CATEGORY,NEW.PRICE_FRACT_CATEGORY,NEW.PRICE_TOTAL,NEW.FE_PRICE_TOTAL,NEW.PO_SLIP_ID,NEW.SUPPLIER_SLIP_ID,NEW.APT_BALANCE_ID,NEW.PAYMENT_CUTOFF_DATE,NEW.PAYMENT_PDATE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PAYMENT_SLIP_TRN_XXXXX_DEL AFTER DELETE ON PAYMENT_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_SLIP_TRN');

INSERT INTO PAYMENT_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_SLIP_ID,STATUS,PAYMENT_DATE,PAYMENT_ANNUAL,PAYMENT_MONTHLY,PAYMENT_YM,USER_ID,USER_NAME,PAYMENT_SLIP_CATEGORY,SUPPLIER_CODE,SUPPLIER_NAME,RATE_ID,TAX_SHIFT_CATEGORY,TAX_FRACT_CATEGORY,PRICE_FRACT_CATEGORY,PRICE_TOTAL,FE_PRICE_TOTAL,PO_SLIP_ID,SUPPLIER_SLIP_ID,APT_BALANCE_ID,PAYMENT_CUTOFF_DATE,PAYMENT_PDATE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PAYMENT_SLIP_ID,OLD.STATUS,OLD.PAYMENT_DATE,OLD.PAYMENT_ANNUAL,OLD.PAYMENT_MONTHLY,OLD.PAYMENT_YM,OLD.USER_ID,OLD.USER_NAME,OLD.PAYMENT_SLIP_CATEGORY,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.RATE_ID,OLD.TAX_SHIFT_CATEGORY,OLD.TAX_FRACT_CATEGORY,OLD.PRICE_FRACT_CATEGORY,OLD.PRICE_TOTAL,OLD.FE_PRICE_TOTAL,OLD.PO_SLIP_ID,OLD.SUPPLIER_SLIP_ID,OLD.APT_BALANCE_ID,OLD.PAYMENT_CUTOFF_DATE,OLD.PAYMENT_PDATE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'PAYMENT_LINE_TRN_XXXXX'//
CREATE TRIGGER PAYMENT_LINE_TRN_XXXXX_INS AFTER INSERT ON PAYMENT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_LINE_TRN');

INSERT INTO PAYMENT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_LINE_ID,STATUS,PAYMENT_SLIP_ID,LINE_NO,PAYMENT_CATEGORY,PRODUCT_CODE,PRODUCT_ABSTRACT,SUPPLIER_DATE,QUANTITY,UNIT_PRICE,PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,CTAX_RATE,CTAX_PRICE,PO_LINE_ID,SUPPLIER_LINE_ID,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PAYMENT_LINE_ID,NEW.STATUS,NEW.PAYMENT_SLIP_ID,NEW.LINE_NO,NEW.PAYMENT_CATEGORY,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.SUPPLIER_DATE,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.PO_LINE_ID,NEW.SUPPLIER_LINE_ID,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PAYMENT_LINE_TRN_XXXXX_UPD AFTER UPDATE ON PAYMENT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_LINE_TRN');

INSERT INTO PAYMENT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_LINE_ID,STATUS,PAYMENT_SLIP_ID,LINE_NO,PAYMENT_CATEGORY,PRODUCT_CODE,PRODUCT_ABSTRACT,SUPPLIER_DATE,QUANTITY,UNIT_PRICE,PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,CTAX_RATE,CTAX_PRICE,PO_LINE_ID,SUPPLIER_LINE_ID,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PAYMENT_LINE_ID,NEW.STATUS,NEW.PAYMENT_SLIP_ID,NEW.LINE_NO,NEW.PAYMENT_CATEGORY,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.SUPPLIER_DATE,NEW.QUANTITY,NEW.UNIT_PRICE,NEW.PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.RATE,NEW.CTAX_RATE,NEW.CTAX_PRICE,NEW.PO_LINE_ID,NEW.SUPPLIER_LINE_ID,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER PAYMENT_LINE_TRN_XXXXX_DEL AFTER DELETE ON PAYMENT_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('PAYMENT_LINE_TRN');

INSERT INTO PAYMENT_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PAYMENT_LINE_ID,STATUS,PAYMENT_SLIP_ID,LINE_NO,PAYMENT_CATEGORY,PRODUCT_CODE,PRODUCT_ABSTRACT,SUPPLIER_DATE,QUANTITY,UNIT_PRICE,PRICE,DOL_UNIT_PRICE,DOL_PRICE,RATE,CTAX_RATE,CTAX_PRICE,PO_LINE_ID,SUPPLIER_LINE_ID,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PAYMENT_LINE_ID,OLD.STATUS,OLD.PAYMENT_SLIP_ID,OLD.LINE_NO,OLD.PAYMENT_CATEGORY,OLD.PRODUCT_CODE,OLD.PRODUCT_ABSTRACT,OLD.SUPPLIER_DATE,OLD.QUANTITY,OLD.UNIT_PRICE,OLD.PRICE,OLD.DOL_UNIT_PRICE,OLD.DOL_PRICE,OLD.RATE,OLD.CTAX_RATE,OLD.CTAX_PRICE,OLD.PO_LINE_ID,OLD.SUPPLIER_LINE_ID,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ART_BALANCE_TRN_XXXXX'//
CREATE TRIGGER ART_BALANCE_TRN_XXXXX_INS AFTER INSERT ON ART_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ART_BALANCE_TRN');

INSERT INTO ART_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ART_BALANCE_ID,ART_ANNUAL,ART_MONTHLY,ART_YM,ART_CUTOFF_DATE,USER_ID,USER_NAME,BA_CODE,BA_NAME,CUSTOMER_CODE,CUSTOMER_NAME,SALES_CM_CATEGORY,LAST_ART_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_ART_PRICE,GM_PRICE,ART_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,SALES_SLIP_NUM,ART_CUTOFF_PDATE,DEPOSIT_CASH,DEPOSIT_CHECK,DEPOSIT_TRANSFER,DEPOSIT_SC,DEPOSIT_INST,DEPOSIT_SETOFF,DEPOSIT_ETC,FAMILY_CATEGORY,DELIVERY_PLACE_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ART_BALANCE_ID,NEW.ART_ANNUAL,NEW.ART_MONTHLY,NEW.ART_YM,NEW.ART_CUTOFF_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.BA_CODE,NEW.BA_NAME,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.SALES_CM_CATEGORY,NEW.LAST_ART_PRICE,NEW.DEPOSIT_PRICE,NEW.ADJ_PRICE,NEW.COV_PRICE,NEW.SALES_PRICE,NEW.CTAX_PRICE,NEW.RGU_PRICE,NEW.DCT_PRICE,NEW.ETC_PRICE,NEW.THIS_ART_PRICE,NEW.GM_PRICE,NEW.ART_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.SALES_SLIP_NUM,NEW.ART_CUTOFF_PDATE,NEW.DEPOSIT_CASH,NEW.DEPOSIT_CHECK,NEW.DEPOSIT_TRANSFER,NEW.DEPOSIT_SC,NEW.DEPOSIT_INST,NEW.DEPOSIT_SETOFF,NEW.DEPOSIT_ETC,NEW.FAMILY_CATEGORY,NEW.DELIVERY_PLACE_NUM,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ART_BALANCE_TRN_XXXXX_UPD AFTER UPDATE ON ART_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ART_BALANCE_TRN');

INSERT INTO ART_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ART_BALANCE_ID,ART_ANNUAL,ART_MONTHLY,ART_YM,ART_CUTOFF_DATE,USER_ID,USER_NAME,BA_CODE,BA_NAME,CUSTOMER_CODE,CUSTOMER_NAME,SALES_CM_CATEGORY,LAST_ART_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_ART_PRICE,GM_PRICE,ART_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,SALES_SLIP_NUM,ART_CUTOFF_PDATE,DEPOSIT_CASH,DEPOSIT_CHECK,DEPOSIT_TRANSFER,DEPOSIT_SC,DEPOSIT_INST,DEPOSIT_SETOFF,DEPOSIT_ETC,FAMILY_CATEGORY,DELIVERY_PLACE_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ART_BALANCE_ID,NEW.ART_ANNUAL,NEW.ART_MONTHLY,NEW.ART_YM,NEW.ART_CUTOFF_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.BA_CODE,NEW.BA_NAME,NEW.CUSTOMER_CODE,NEW.CUSTOMER_NAME,NEW.SALES_CM_CATEGORY,NEW.LAST_ART_PRICE,NEW.DEPOSIT_PRICE,NEW.ADJ_PRICE,NEW.COV_PRICE,NEW.SALES_PRICE,NEW.CTAX_PRICE,NEW.RGU_PRICE,NEW.DCT_PRICE,NEW.ETC_PRICE,NEW.THIS_ART_PRICE,NEW.GM_PRICE,NEW.ART_CUTOFF_GROUP,NEW.PAYBACK_CYCLE_CATEGORY,NEW.SALES_SLIP_NUM,NEW.ART_CUTOFF_PDATE,NEW.DEPOSIT_CASH,NEW.DEPOSIT_CHECK,NEW.DEPOSIT_TRANSFER,NEW.DEPOSIT_SC,NEW.DEPOSIT_INST,NEW.DEPOSIT_SETOFF,NEW.DEPOSIT_ETC,NEW.FAMILY_CATEGORY,NEW.DELIVERY_PLACE_NUM,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ART_BALANCE_TRN_XXXXX_DEL AFTER DELETE ON ART_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ART_BALANCE_TRN');

INSERT INTO ART_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ART_BALANCE_ID,ART_ANNUAL,ART_MONTHLY,ART_YM,ART_CUTOFF_DATE,USER_ID,USER_NAME,BA_CODE,BA_NAME,CUSTOMER_CODE,CUSTOMER_NAME,SALES_CM_CATEGORY,LAST_ART_PRICE,DEPOSIT_PRICE,ADJ_PRICE,COV_PRICE,SALES_PRICE,CTAX_PRICE,RGU_PRICE,DCT_PRICE,ETC_PRICE,THIS_ART_PRICE,GM_PRICE,ART_CUTOFF_GROUP,PAYBACK_CYCLE_CATEGORY,SALES_SLIP_NUM,ART_CUTOFF_PDATE,DEPOSIT_CASH,DEPOSIT_CHECK,DEPOSIT_TRANSFER,DEPOSIT_SC,DEPOSIT_INST,DEPOSIT_SETOFF,DEPOSIT_ETC,FAMILY_CATEGORY,DELIVERY_PLACE_NUM,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ART_BALANCE_ID,OLD.ART_ANNUAL,OLD.ART_MONTHLY,OLD.ART_YM,OLD.ART_CUTOFF_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.BA_CODE,OLD.BA_NAME,OLD.CUSTOMER_CODE,OLD.CUSTOMER_NAME,OLD.SALES_CM_CATEGORY,OLD.LAST_ART_PRICE,OLD.DEPOSIT_PRICE,OLD.ADJ_PRICE,OLD.COV_PRICE,OLD.SALES_PRICE,OLD.CTAX_PRICE,OLD.RGU_PRICE,OLD.DCT_PRICE,OLD.ETC_PRICE,OLD.THIS_ART_PRICE,OLD.GM_PRICE,OLD.ART_CUTOFF_GROUP,OLD.PAYBACK_CYCLE_CATEGORY,OLD.SALES_SLIP_NUM,OLD.ART_CUTOFF_PDATE,OLD.DEPOSIT_CASH,OLD.DEPOSIT_CHECK,OLD.DEPOSIT_TRANSFER,OLD.DEPOSIT_SC,OLD.DEPOSIT_INST,OLD.DEPOSIT_SETOFF,OLD.DEPOSIT_ETC,OLD.FAMILY_CATEGORY,OLD.DELIVERY_PLACE_NUM,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'APT_BALANCE_TRN_XXXXX'//
CREATE TRIGGER APT_BALANCE_TRN_XXXXX_INS AFTER INSERT ON APT_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('APT_BALANCE_TRN');

INSERT INTO APT_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,APT_BALANCE_ID,APT_ANNUAL,APT_MONTHLY,APT_YM,APT_CUTOFF_DATE,USER_ID,USER_NAME,SUPPLIER_CODE,SUPPLIER_NAME,PRODUCT_CODE,PRODUCT_NAME,SUPPLIER_PCODE,QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,DOL_UNIT_PRICE,DOL_PRICE,PO_SLIP_ID,PO_LINE_ID,SUPPLIER_SLIP_ID,SUPPLIER_LINE_ID,SUPPLIER_DATE,UNPAID_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.APT_BALANCE_ID,NEW.APT_ANNUAL,NEW.APT_MONTHLY,NEW.APT_YM,NEW.APT_CUTOFF_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.PRODUCT_CODE,NEW.PRODUCT_NAME,NEW.SUPPLIER_PCODE,NEW.QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.PO_SLIP_ID,NEW.PO_LINE_ID,NEW.SUPPLIER_SLIP_ID,NEW.SUPPLIER_LINE_ID,NEW.SUPPLIER_DATE,NEW.UNPAID_PRICE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER APT_BALANCE_TRN_XXXXX_UPD AFTER UPDATE ON APT_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('APT_BALANCE_TRN');

INSERT INTO APT_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,APT_BALANCE_ID,APT_ANNUAL,APT_MONTHLY,APT_YM,APT_CUTOFF_DATE,USER_ID,USER_NAME,SUPPLIER_CODE,SUPPLIER_NAME,PRODUCT_CODE,PRODUCT_NAME,SUPPLIER_PCODE,QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,DOL_UNIT_PRICE,DOL_PRICE,PO_SLIP_ID,PO_LINE_ID,SUPPLIER_SLIP_ID,SUPPLIER_LINE_ID,SUPPLIER_DATE,UNPAID_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.APT_BALANCE_ID,NEW.APT_ANNUAL,NEW.APT_MONTHLY,NEW.APT_YM,NEW.APT_CUTOFF_DATE,NEW.USER_ID,NEW.USER_NAME,NEW.SUPPLIER_CODE,NEW.SUPPLIER_NAME,NEW.PRODUCT_CODE,NEW.PRODUCT_NAME,NEW.SUPPLIER_PCODE,NEW.QUANTITY,NEW.UNIT_RETAIL_PRICE,NEW.RETAIL_PRICE,NEW.DOL_UNIT_PRICE,NEW.DOL_PRICE,NEW.PO_SLIP_ID,NEW.PO_LINE_ID,NEW.SUPPLIER_SLIP_ID,NEW.SUPPLIER_LINE_ID,NEW.SUPPLIER_DATE,NEW.UNPAID_PRICE,NEW.REMARKS,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER APT_BALANCE_TRN_XXXXX_DEL AFTER DELETE ON APT_BALANCE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('APT_BALANCE_TRN');

INSERT INTO APT_BALANCE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,APT_BALANCE_ID,APT_ANNUAL,APT_MONTHLY,APT_YM,APT_CUTOFF_DATE,USER_ID,USER_NAME,SUPPLIER_CODE,SUPPLIER_NAME,PRODUCT_CODE,PRODUCT_NAME,SUPPLIER_PCODE,QUANTITY,UNIT_RETAIL_PRICE,RETAIL_PRICE,DOL_UNIT_PRICE,DOL_PRICE,PO_SLIP_ID,PO_LINE_ID,SUPPLIER_SLIP_ID,SUPPLIER_LINE_ID,SUPPLIER_DATE,UNPAID_PRICE,REMARKS,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.APT_BALANCE_ID,OLD.APT_ANNUAL,OLD.APT_MONTHLY,OLD.APT_YM,OLD.APT_CUTOFF_DATE,OLD.USER_ID,OLD.USER_NAME,OLD.SUPPLIER_CODE,OLD.SUPPLIER_NAME,OLD.PRODUCT_CODE,OLD.PRODUCT_NAME,OLD.SUPPLIER_PCODE,OLD.QUANTITY,OLD.UNIT_RETAIL_PRICE,OLD.RETAIL_PRICE,OLD.DOL_UNIT_PRICE,OLD.DOL_PRICE,OLD.PO_SLIP_ID,OLD.PO_LINE_ID,OLD.SUPPLIER_SLIP_ID,OLD.SUPPLIER_LINE_ID,OLD.SUPPLIER_DATE,OLD.UNPAID_PRICE,OLD.REMARKS,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DISCOUNT_MST_XXXXX'//
CREATE TRIGGER DISCOUNT_MST_XXXXX_INS AFTER INSERT ON DISCOUNT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_MST');

INSERT INTO DISCOUNT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_ID,DISCOUNT_NAME,REMARKS,USE_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DISCOUNT_ID,NEW.DISCOUNT_NAME,NEW.REMARKS,NEW.USE_FLAG,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_MST_XXXXX_UPD AFTER UPDATE ON DISCOUNT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_MST');

INSERT INTO DISCOUNT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_ID,DISCOUNT_NAME,REMARKS,USE_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DISCOUNT_ID,NEW.DISCOUNT_NAME,NEW.REMARKS,NEW.USE_FLAG,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_MST_XXXXX_DEL AFTER DELETE ON DISCOUNT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_MST');

INSERT INTO DISCOUNT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_ID,DISCOUNT_NAME,REMARKS,USE_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DISCOUNT_ID,OLD.DISCOUNT_NAME,OLD.REMARKS,OLD.USE_FLAG,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DISCOUNT_TRN_XXXXX'//
CREATE TRIGGER DISCOUNT_TRN_XXXXX_INS AFTER INSERT ON DISCOUNT_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_TRN');

INSERT INTO DISCOUNT_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_DATA_ID,DISCOUNT_ID,LINE_NO,DATA_FROM,DATA_TO,DISCOUNT_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DISCOUNT_DATA_ID,NEW.DISCOUNT_ID,NEW.LINE_NO,NEW.DATA_FROM,NEW.DATA_TO,NEW.DISCOUNT_RATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_TRN_XXXXX_UPD AFTER UPDATE ON DISCOUNT_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_TRN');

INSERT INTO DISCOUNT_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_DATA_ID,DISCOUNT_ID,LINE_NO,DATA_FROM,DATA_TO,DISCOUNT_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DISCOUNT_DATA_ID,NEW.DISCOUNT_ID,NEW.LINE_NO,NEW.DATA_FROM,NEW.DATA_TO,NEW.DISCOUNT_RATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_TRN_XXXXX_DEL AFTER DELETE ON DISCOUNT_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_TRN');

INSERT INTO DISCOUNT_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DISCOUNT_DATA_ID,DISCOUNT_ID,LINE_NO,DATA_FROM,DATA_TO,DISCOUNT_RATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DISCOUNT_DATA_ID,OLD.DISCOUNT_ID,OLD.LINE_NO,OLD.DATA_FROM,OLD.DATA_TO,OLD.DISCOUNT_RATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DISCOUNT_REL_XXXXX'//
CREATE TRIGGER DISCOUNT_REL_XXXXX_INS AFTER INSERT ON DISCOUNT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_REL');

INSERT INTO DISCOUNT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,DISCOUNT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.PRODUCT_CODE,NEW.DISCOUNT_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_REL_XXXXX_UPD AFTER UPDATE ON DISCOUNT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_REL');

INSERT INTO DISCOUNT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,DISCOUNT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.PRODUCT_CODE,NEW.DISCOUNT_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DISCOUNT_REL_XXXXX_DEL AFTER DELETE ON DISCOUNT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DISCOUNT_REL');

INSERT INTO DISCOUNT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,PRODUCT_CODE,DISCOUNT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.PRODUCT_CODE,OLD.DISCOUNT_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DEPT_MST_XXXXX'//
CREATE TRIGGER DEPT_MST_XXXXX_INS AFTER INSERT ON DEPT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPT_MST');

INSERT INTO DEPT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPT_ID,NAME,PARENT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DEPT_ID,NEW.NAME,NEW.PARENT_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPT_MST_XXXXX_UPD AFTER UPDATE ON DEPT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPT_MST');

INSERT INTO DEPT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPT_ID,NAME,PARENT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DEPT_ID,NEW.NAME,NEW.PARENT_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DEPT_MST_XXXXX_DEL AFTER DELETE ON DEPT_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DEPT_MST');

INSERT INTO DEPT_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPT_ID,NAME,PARENT_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DEPT_ID,OLD.NAME,OLD.PARENT_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'USER_MST_XXXXX'//
CREATE TRIGGER USER_MST_XXXXX_INS AFTER INSERT ON USER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.USER_ID,NEW.NAME_KNJ,NEW.NAME_KANA,NEW.DEPT_ID,NEW.EMAIL,NEW.PASSWORD,NEW.EXPIRE_DATE,NEW.FAIL_COUNT,NEW.LOCK_FLG,NEW.LOCK_DATETM,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER USER_MST_XXXXX_UPD AFTER UPDATE ON USER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.USER_ID,NEW.NAME_KNJ,NEW.NAME_KANA,NEW.DEPT_ID,NEW.EMAIL,NEW.PASSWORD,NEW.EXPIRE_DATE,NEW.FAIL_COUNT,NEW.LOCK_FLG,NEW.LOCK_DATETM,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER USER_MST_XXXXX_DEL AFTER DELETE ON USER_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('USER_MST');

INSERT INTO USER_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,NAME_KNJ,NAME_KANA,DEPT_ID,EMAIL,PASSWORD,EXPIRE_DATE,FAIL_COUNT,LOCK_FLG,LOCK_DATETM,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.USER_ID,OLD.NAME_KNJ,OLD.NAME_KANA,OLD.DEPT_ID,OLD.EMAIL,OLD.PASSWORD,OLD.EXPIRE_DATE,OLD.FAIL_COUNT,OLD.LOCK_FLG,OLD.LOCK_DATETM,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;




DELIMITER //
SELECT 'GRANT_ROLE_XXXXX'//
CREATE TRIGGER GRANT_ROLE_XXXXX_INS AFTER INSERT ON GRANT_ROLE_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('GRANT_ROLE');

INSERT INTO GRANT_ROLE_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,ROLE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.USER_ID,NEW.ROLE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER GRANT_ROLE_XXXXX_UPD AFTER UPDATE ON GRANT_ROLE_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('GRANT_ROLE');

INSERT INTO GRANT_ROLE_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,ROLE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.USER_ID,NEW.ROLE_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER GRANT_ROLE_XXXXX_DEL AFTER DELETE ON GRANT_ROLE_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('GRANT_ROLE');

INSERT INTO GRANT_ROLE_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,USER_ID,ROLE_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.USER_ID,OLD.ROLE_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'SCHEDULE_MST_XXXXX'//
CREATE TRIGGER SCHEDULE_MST_XXXXX_INS AFTER INSERT ON SCHEDULE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SCHEDULE_MST');

INSERT INTO SCHEDULE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SCHEDULE_ID,SCHEDULE_NAME,COMMAND,EXEC_TYPE,EXEC_DATE,EXEC_TIME,VALID_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SCHEDULE_ID,NEW.SCHEDULE_NAME,NEW.COMMAND,NEW.EXEC_TYPE,NEW.EXEC_DATE,NEW.EXEC_TIME,NEW.VALID_FLAG,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SCHEDULE_MST_XXXXX_UPD AFTER UPDATE ON SCHEDULE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SCHEDULE_MST');

INSERT INTO SCHEDULE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SCHEDULE_ID,SCHEDULE_NAME,COMMAND,EXEC_TYPE,EXEC_DATE,EXEC_TIME,VALID_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SCHEDULE_ID,NEW.SCHEDULE_NAME,NEW.COMMAND,NEW.EXEC_TYPE,NEW.EXEC_DATE,NEW.EXEC_TIME,NEW.VALID_FLAG,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER SCHEDULE_MST_XXXXX_DEL AFTER DELETE ON SCHEDULE_MST_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('SCHEDULE_MST');

INSERT INTO SCHEDULE_MST_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SCHEDULE_ID,SCHEDULE_NAME,COMMAND,EXEC_TYPE,EXEC_DATE,EXEC_TIME,VALID_FLAG,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SCHEDULE_ID,OLD.SCHEDULE_NAME,OLD.COMMAND,OLD.EXEC_TYPE,OLD.EXEC_DATE,OLD.EXEC_TIME,OLD.VALID_FLAG,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'FILE_INFO_XXXXX'//
CREATE TRIGGER FILE_INFO_XXXXX_INS AFTER INSERT ON FILE_INFO_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('FILE_INFO');

INSERT INTO FILE_INFO_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,FILE_ID,TITLE,FILE_NAME,REAL_FILE_NAME,FILE_SIZE,OPEN_LEVEL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.FILE_ID,NEW.TITLE,NEW.FILE_NAME,NEW.REAL_FILE_NAME,NEW.FILE_SIZE,NEW.OPEN_LEVEL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER FILE_INFO_XXXXX_UPD AFTER UPDATE ON FILE_INFO_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('FILE_INFO');

INSERT INTO FILE_INFO_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,FILE_ID,TITLE,FILE_NAME,REAL_FILE_NAME,FILE_SIZE,OPEN_LEVEL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.FILE_ID,NEW.TITLE,NEW.FILE_NAME,NEW.REAL_FILE_NAME,NEW.FILE_SIZE,NEW.OPEN_LEVEL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER FILE_INFO_XXXXX_DEL AFTER DELETE ON FILE_INFO_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('FILE_INFO');

INSERT INTO FILE_INFO_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,FILE_ID,TITLE,FILE_NAME,REAL_FILE_NAME,FILE_SIZE,OPEN_LEVEL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.FILE_ID,OLD.TITLE,OLD.FILE_NAME,OLD.REAL_FILE_NAME,OLD.FILE_SIZE,OLD.OPEN_LEVEL,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ONLINE_ORDER_REL_XXXXX'//
CREATE TRIGGER ONLINE_ORDER_REL_XXXXX_INS AFTER INSERT ON ONLINE_ORDER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ONLINE_ORDER_REL');

INSERT INTO ONLINE_ORDER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,RO_LINE_ID,ONLINE_ORDER_ID,ONLINE_ITEM_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.RO_SLIP_ID,NEW.RO_LINE_ID,NEW.ONLINE_ORDER_ID,NEW.ONLINE_ITEM_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ONLINE_ORDER_REL_XXXXX_UPD AFTER UPDATE ON ONLINE_ORDER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ONLINE_ORDER_REL');

INSERT INTO ONLINE_ORDER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,RO_LINE_ID,ONLINE_ORDER_ID,ONLINE_ITEM_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.RO_SLIP_ID,NEW.RO_LINE_ID,NEW.ONLINE_ORDER_ID,NEW.ONLINE_ITEM_ID,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ONLINE_ORDER_REL_XXXXX_DEL AFTER DELETE ON ONLINE_ORDER_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ONLINE_ORDER_REL');

INSERT INTO ONLINE_ORDER_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,RO_SLIP_ID,RO_LINE_ID,ONLINE_ORDER_ID,ONLINE_ITEM_ID,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.RO_SLIP_ID,OLD.RO_LINE_ID,OLD.ONLINE_ORDER_ID,OLD.ONLINE_ITEM_ID,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'DELIVERY_DEPOSIT_REL_XXXXX'//
CREATE TRIGGER DELIVERY_DEPOSIT_REL_XXXXX_INS AFTER INSERT ON DELIVERY_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_DEPOSIT_REL');

INSERT INTO DELIVERY_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,DEPOSIT_SLIP_ID,DELIVERY_SLIP_ID,DATA_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.SALES_SLIP_ID,NEW.DEPOSIT_SLIP_ID,NEW.DELIVERY_SLIP_ID,NEW.DATA_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DELIVERY_DEPOSIT_REL_XXXXX_UPD AFTER UPDATE ON DELIVERY_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_DEPOSIT_REL');

INSERT INTO DELIVERY_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,DEPOSIT_SLIP_ID,DELIVERY_SLIP_ID,DATA_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.SALES_SLIP_ID,NEW.DEPOSIT_SLIP_ID,NEW.DELIVERY_SLIP_ID,NEW.DATA_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER DELIVERY_DEPOSIT_REL_XXXXX_DEL AFTER DELETE ON DELIVERY_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('DELIVERY_DEPOSIT_REL');

INSERT INTO DELIVERY_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,SALES_SLIP_ID,DEPOSIT_SLIP_ID,DELIVERY_SLIP_ID,DATA_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.SALES_SLIP_ID,OLD.DEPOSIT_SLIP_ID,OLD.DELIVERY_SLIP_ID,OLD.DATA_CATEGORY,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'BANK_DEPOSIT_REL_XXXXX'//
CREATE TRIGGER BANK_DEPOSIT_REL_XXXXX_INS AFTER INSERT ON BANK_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_DEPOSIT_REL');

INSERT INTO BANK_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,PAYMENT_DATE,PAYMENT_NAME,LINE_NO,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.DEPOSIT_SLIP_ID,NEW.PAYMENT_DATE,NEW.PAYMENT_NAME,NEW.LINE_NO,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_DEPOSIT_REL_XXXXX_UPD AFTER UPDATE ON BANK_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_DEPOSIT_REL');

INSERT INTO BANK_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,PAYMENT_DATE,PAYMENT_NAME,LINE_NO,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.DEPOSIT_SLIP_ID,NEW.PAYMENT_DATE,NEW.PAYMENT_NAME,NEW.LINE_NO,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER BANK_DEPOSIT_REL_XXXXX_DEL AFTER DELETE ON BANK_DEPOSIT_REL_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('BANK_DEPOSIT_REL');

INSERT INTO BANK_DEPOSIT_REL_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,DEPOSIT_SLIP_ID,PAYMENT_DATE,PAYMENT_NAME,LINE_NO,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.DEPOSIT_SLIP_ID,OLD.PAYMENT_DATE,OLD.PAYMENT_NAME,OLD.LINE_NO,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ENTRUST_EAD_SLIP_TRN_XXXXX'//
CREATE TRIGGER ENTRUST_EAD_SLIP_TRN_XXXXX_INS AFTER INSERT ON ENTRUST_EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_SLIP_TRN');

INSERT INTO ENTRUST_EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_SLIP_ID,ENTRUST_EAD_DATE,ENTRUST_EAD_ANNUAL,ENTRUST_EAD_MONTHLY,ENTRUST_EAD_YM,USER_ID,USER_NAME,ENTRUST_EAD_CATEGORY,REMARKS,PO_SLIP_ID,DISPATCH_ORDER_PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ENTRUST_EAD_SLIP_ID,NEW.ENTRUST_EAD_DATE,NEW.ENTRUST_EAD_ANNUAL,NEW.ENTRUST_EAD_MONTHLY,NEW.ENTRUST_EAD_YM,NEW.USER_ID,NEW.USER_NAME,NEW.ENTRUST_EAD_CATEGORY,NEW.REMARKS,NEW.PO_SLIP_ID,NEW.DISPATCH_ORDER_PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ENTRUST_EAD_SLIP_TRN_XXXXX_UPD AFTER UPDATE ON ENTRUST_EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_SLIP_TRN');

INSERT INTO ENTRUST_EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_SLIP_ID,ENTRUST_EAD_DATE,ENTRUST_EAD_ANNUAL,ENTRUST_EAD_MONTHLY,ENTRUST_EAD_YM,USER_ID,USER_NAME,ENTRUST_EAD_CATEGORY,REMARKS,PO_SLIP_ID,DISPATCH_ORDER_PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ENTRUST_EAD_SLIP_ID,NEW.ENTRUST_EAD_DATE,NEW.ENTRUST_EAD_ANNUAL,NEW.ENTRUST_EAD_MONTHLY,NEW.ENTRUST_EAD_YM,NEW.USER_ID,NEW.USER_NAME,NEW.ENTRUST_EAD_CATEGORY,NEW.REMARKS,NEW.PO_SLIP_ID,NEW.DISPATCH_ORDER_PRINT_COUNT,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ENTRUST_EAD_SLIP_TRN_XXXXX_DEL AFTER DELETE ON ENTRUST_EAD_SLIP_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_SLIP_TRN');

INSERT INTO ENTRUST_EAD_SLIP_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_SLIP_ID,ENTRUST_EAD_DATE,ENTRUST_EAD_ANNUAL,ENTRUST_EAD_MONTHLY,ENTRUST_EAD_YM,USER_ID,USER_NAME,ENTRUST_EAD_CATEGORY,REMARKS,PO_SLIP_ID,DISPATCH_ORDER_PRINT_COUNT,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ENTRUST_EAD_SLIP_ID,OLD.ENTRUST_EAD_DATE,OLD.ENTRUST_EAD_ANNUAL,OLD.ENTRUST_EAD_MONTHLY,OLD.ENTRUST_EAD_YM,OLD.USER_ID,OLD.USER_NAME,OLD.ENTRUST_EAD_CATEGORY,OLD.REMARKS,OLD.PO_SLIP_ID,OLD.DISPATCH_ORDER_PRINT_COUNT,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

DELIMITER //
SELECT 'ENTRUST_EAD_LINE_TRN_XXXXX'//
CREATE TRIGGER ENTRUST_EAD_LINE_TRN_XXXXX_INS AFTER INSERT ON ENTRUST_EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_LINE_TRN');

INSERT INTO ENTRUST_EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_LINE_ID,ENTRUST_EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,QUANTITY,REMARKS,PO_LINE_ID,REL_ENTRUST_EAD_LINE_ID,ENTRUST_EAD_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.ENTRUST_EAD_LINE_ID,NEW.ENTRUST_EAD_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.REMARKS,NEW.PO_LINE_ID,NEW.REL_ENTRUST_EAD_LINE_ID,NEW.ENTRUST_EAD_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ENTRUST_EAD_LINE_TRN_XXXXX_UPD AFTER UPDATE ON ENTRUST_EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_LINE_TRN');

INSERT INTO ENTRUST_EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_LINE_ID,ENTRUST_EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,QUANTITY,REMARKS,PO_LINE_ID,REL_ENTRUST_EAD_LINE_ID,ENTRUST_EAD_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.ENTRUST_EAD_LINE_ID,NEW.ENTRUST_EAD_SLIP_ID,NEW.LINE_NO,NEW.PRODUCT_CODE,NEW.PRODUCT_ABSTRACT,NEW.QUANTITY,NEW.REMARKS,NEW.PO_LINE_ID,NEW.REL_ENTRUST_EAD_LINE_ID,NEW.ENTRUST_EAD_CATEGORY,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER ENTRUST_EAD_LINE_TRN_XXXXX_DEL AFTER DELETE ON ENTRUST_EAD_LINE_TRN_XXXXX FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('ENTRUST_EAD_LINE_TRN');

INSERT INTO ENTRUST_EAD_LINE_TRN_HIST_XXXXX(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,ENTRUST_EAD_LINE_ID,ENTRUST_EAD_SLIP_ID,LINE_NO,PRODUCT_CODE,PRODUCT_ABSTRACT,QUANTITY,REMARKS,PO_LINE_ID,REL_ENTRUST_EAD_LINE_ID,ENTRUST_EAD_CATEGORY,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.ENTRUST_EAD_LINE_ID,OLD.ENTRUST_EAD_SLIP_ID,OLD.LINE_NO,OLD.PRODUCT_CODE,OLD.PRODUCT_ABSTRACT,OLD.QUANTITY,OLD.REMARKS,OLD.PO_LINE_ID,OLD.REL_ENTRUST_EAD_LINE_ID,OLD.ENTRUST_EAD_CATEGORY,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


CREATE INDEX USER_ID ON ONLINE_ORDER_WORK_XXXXX(USER_ID);
CREATE INDEX SET_PRODUCT_CODE ON PRODUCT_SET_MST_XXXXX(SET_PRODUCT_CODE);
CREATE INDEX PRODUCT_CODE ON PRODUCT_SET_MST_XXXXX(PRODUCT_CODE);
CREATE INDEX OPEN_LEVEL ON FILE_INFO_XXXXX(OPEN_LEVEL);
CREATE INDEX USER_ID ON USER_MST_XXXXX(USER_ID);
CREATE INDEX DEPT_ID ON USER_MST_XXXXX(DEPT_ID);
CREATE INDEX UPD_DATETM ON USER_MST_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CRE_DATETM ON USER_MST_HIST_XXXXX(CRE_DATETM);
CREATE INDEX RATE_ID ON RATE_TRN_XXXXX(RATE_ID);
CREATE INDEX START_DATE ON RATE_TRN_XXXXX(START_DATE);
CREATE INDEX MENU_ID ON ROLE_CFG_XXXXX(MENU_ID);
CREATE INDEX ROLE_ID ON ROLE_CFG_XXXXX(ROLE_ID);
CREATE INDEX USER_ID ON GRANT_ROLE_XXXXX(USER_ID);
CREATE INDEX DISCOUNT_ID ON DISCOUNT_MST_XXXXX(DISCOUNT_ID);
CREATE INDEX BANK_CODE ON BANK_MST_XXXXX(BANK_CODE);
CREATE INDEX ACCOUNT_NUM ON BANK_MST_XXXXX(ACCOUNT_NUM);
CREATE INDEX STORE_CODE ON BANK_MST_XXXXX(STORE_CODE);
CREATE INDEX USER_ID ON ESTIMATE_SHEET_TRN_XXXXX(USER_ID);
CREATE INDEX VALID_DATE ON ESTIMATE_SHEET_TRN_XXXXX(VALID_DATE);
CREATE INDEX ESTIMATE_SHEET_ID ON ESTIMATE_SHEET_TRN_XXXXX(ESTIMATE_SHEET_ID);
CREATE INDEX ESTIMATE_DATE ON ESTIMATE_SHEET_TRN_XXXXX(ESTIMATE_DATE);
CREATE INDEX CUSTOMER_CODE ON ESTIMATE_SHEET_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX ESTIMATE_DATE ON ESTIMATE_SHEET_TRN_HIST_XXXXX(ESTIMATE_DATE);
CREATE INDEX UPD_DATETM ON ESTIMATE_SHEET_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX SUPPLIER_CODE ON SUPPLIER_MST_XXXXX(SUPPLIER_CODE);
CREATE INDEX UPD_DATETM ON SUPPLIER_MST_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CRE_DATETM ON SUPPLIER_MST_HIST_XXXXX(CRE_DATETM);
CREATE INDEX SUPPLIER_CODE ON SUPPLIER_MST_HIST_XXXXX(SUPPLIER_CODE);
CREATE INDEX SUPPLIER_CODE ON SUPPLIER_SLIP_TRN_XXXXX(SUPPLIER_CODE);
CREATE INDEX SUPPLIER_SLIP_ID ON SUPPLIER_SLIP_TRN_XXXXX(SUPPLIER_SLIP_ID);
CREATE INDEX SUPPLIER_DATE ON SUPPLIER_SLIP_TRN_XXXXX(SUPPLIER_DATE);
CREATE INDEX PO_SLIP_ID ON SUPPLIER_SLIP_TRN_XXXXX(PO_SLIP_ID);
CREATE INDEX UPD_DATETM ON SUPPLIER_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX SUPPLIER_CODE ON SUPPLIER_SLIP_TRN_HIST_XXXXX(SUPPLIER_CODE);
CREATE INDEX DELIVERY_DATE ON SUPPLIER_SLIP_TRN_HIST_XXXXX(DELIVERY_DATE);
CREATE INDEX PRODUCT_CODE ON SUPPLIER_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX PO_LINE_ID ON SUPPLIER_LINE_TRN_XXXXX(PO_LINE_ID);
CREATE INDEX PRODUCT_CODE ON SUPPLIER_LINE_TRN_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX PO_SLIP_ID ON PAYMENT_SLIP_TRN_XXXXX(PO_SLIP_ID);
CREATE INDEX SUPPLIER_CODE ON PAYMENT_SLIP_TRN_XXXXX(SUPPLIER_CODE);
CREATE INDEX SUPPLIER_SLIP_ID ON PAYMENT_SLIP_TRN_XXXXX(SUPPLIER_SLIP_ID);
CREATE INDEX PAYMENT_CUTOFF_DATE ON PAYMENT_SLIP_TRN_XXXXX(PAYMENT_CUTOFF_DATE);
CREATE INDEX PAYMENT_SLIP_ID ON PAYMENT_SLIP_TRN_XXXXX(PAYMENT_SLIP_ID);
CREATE INDEX PAYMENT_DATE ON PAYMENT_SLIP_TRN_XXXXX(PAYMENT_DATE);
CREATE INDEX UPD_DATETM ON PAYMENT_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX SUPPLIER_CODE ON PAYMENT_SLIP_TRN_HIST_XXXXX(SUPPLIER_CODE);
CREATE INDEX PAYMENT_DATE ON PAYMENT_SLIP_TRN_HIST_XXXXX(PAYMENT_DATE);
CREATE INDEX PRODUCT_CODE ON PAYMENT_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX SUPPLIER_LINE_ID ON PAYMENT_LINE_TRN_XXXXX(SUPPLIER_LINE_ID);
CREATE INDEX RO_SLIP_ID ON RO_SLIP_TRN_XXXXX(RO_SLIP_ID);
CREATE INDEX RO_DATE ON RO_SLIP_TRN_XXXXX(RO_DATE);
CREATE INDEX RECEPT_NO ON RO_SLIP_TRN_XXXXX(RECEPT_NO);
CREATE INDEX SHIP_DATE ON RO_SLIP_TRN_XXXXX(SHIP_DATE);
CREATE INDEX CUSTOMER_CODE ON RO_SLIP_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX DELIVERY_DATE ON RO_SLIP_TRN_XXXXX(DELIVERY_DATE);
CREATE INDEX UPD_DATETM ON RO_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CUSTOMER_CODE ON RO_SLIP_TRN_HIST_XXXXX(CUSTOMER_CODE);
CREATE INDEX REST_QUANTITY ON RO_LINE_TRN_XXXXX(REST_QUANTITY);
CREATE INDEX PRODUCT_CODE ON RO_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX LAST_SHIP_DATE ON RO_LINE_TRN_HIST_XXXXX(LAST_SHIP_DATE);
CREATE INDEX PRODUCT_CODE ON RO_LINE_TRN_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX JAN_PCODE ON PRODUCT_MST_XXXXX(JAN_PCODE);
CREATE INDEX RACK_CODE ON PRODUCT_MST_XXXXX(RACK_CODE);
CREATE INDEX SUPPLIER_CODE ON PRODUCT_MST_XXXXX(SUPPLIER_CODE);
CREATE INDEX SUPPLIER_PCODE ON PRODUCT_MST_XXXXX(SUPPLIER_PCODE);
CREATE INDEX PRODUCT_CODE ON PRODUCT_MST_XXXXX(PRODUCT_CODE);
CREATE INDEX PRODUCT_1 ON PRODUCT_MST_XXXXX(PRODUCT_1);
CREATE INDEX PRODUCT_2 ON PRODUCT_MST_XXXXX(PRODUCT_2);
CREATE INDEX PRODUCT_3 ON PRODUCT_MST_XXXXX(PRODUCT_3);
CREATE INDEX PO_NUM ON PRODUCT_MST_XXXXX(PO_NUM);
CREATE INDEX UPD_DATETM ON PRODUCT_MST_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CRE_DATETM ON PRODUCT_MST_HIST_XXXXX(CRE_DATETM);
CREATE INDEX PRODUCT_CODE ON PRODUCT_MST_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX STOCK_PDATE ON PRODUCT_STOCK_TRN_XXXXX(STOCK_PDATE);
CREATE INDEX PRODUCT_CODE ON PRODUCT_STOCK_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX RACK_CODE ON PRODUCT_STOCK_TRN_XXXXX(RACK_CODE);
CREATE INDEX STOCK_YM ON PRODUCT_STOCK_TRN_XXXXX(STOCK_YM);
CREATE INDEX CLASS_CODE_3 ON PRODUCT_CLASS_MST_XXXXX(CLASS_CODE_3);
CREATE INDEX CLASS_CODE_1 ON PRODUCT_CLASS_MST_XXXXX(CLASS_CODE_1);
CREATE INDEX CLASS_CODE_2 ON PRODUCT_CLASS_MST_XXXXX(CLASS_CODE_2);
CREATE INDEX THIS_BILL_PRICE ON BILL_TRN_XXXXX(THIS_BILL_PRICE);
CREATE INDEX LAST_PRINT_DATE ON BILL_TRN_XXXXX(LAST_PRINT_DATE);
CREATE INDEX LAST_SALES_DATE ON BILL_TRN_XXXXX(LAST_SALES_DATE);
CREATE INDEX BILL_ID ON BILL_TRN_XXXXX(BILL_ID);
CREATE INDEX BILL_CUTOFF_DATE ON BILL_TRN_XXXXX(BILL_CUTOFF_DATE);
CREATE INDEX CUSTOMER_CODE ON BILL_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX RACK_NAME ON RACK_MST_XXXXX(RACK_NAME);
CREATE INDEX RACK_CODE ON RACK_MST_XXXXX(RACK_CODE);
CREATE INDEX WAREHOUSE_CODE ON RACK_MST_XXXXX(WAREHOUSE_CODE);
CREATE INDEX WAREHOUSE_NAME ON WAREHOUSE_MST_XXXXX(WAREHOUSE_NAME);
CREATE INDEX WAREHOUSE_CODE ON WAREHOUSE_MST_XXXXX(WAREHOUSE_CODE);
CREATE INDEX CUSTOMER_CODE ON CUSTOMER_MST_XXXXX(CUSTOMER_CODE);
CREATE INDEX CUSTOMER_RANK_CATEGORY ON CUSTOMER_MST_XXXXX(CUSTOMER_RANK_CATEGORY);
CREATE INDEX CUSTOMER_NAME ON CUSTOMER_MST_XXXXX(CUSTOMER_NAME);
CREATE INDEX CUSTOMER_TEL ON CUSTOMER_MST_XXXXX(CUSTOMER_TEL);
CREATE INDEX UPD_DATETM ON CUSTOMER_MST_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CRE_DATETM ON CUSTOMER_MST_HIST_XXXXX(CRE_DATETM);
CREATE INDEX CUSTOMER_CODE ON CUSTOMER_MST_HIST_XXXXX(CUSTOMER_CODE);
CREATE INDEX RANK_CODE ON CUSTOMER_RANK_MST_XXXXX(RANK_CODE);
CREATE INDEX POSTAGE_TYPE ON CUSTOMER_RANK_MST_XXXXX(POSTAGE_TYPE);
CREATE INDEX RANK_RATE ON CUSTOMER_RANK_MST_XXXXX(RANK_RATE);
CREATE INDEX USER_ID ON DEPOSIT_SLIP_TRN_XXXXX(USER_ID);
CREATE INDEX DEPOSIT_TOTAL ON DEPOSIT_SLIP_TRN_XXXXX(DEPOSIT_TOTAL);
CREATE INDEX CUSTOMER_CODE ON DEPOSIT_SLIP_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX DEPOSIT_CATEGORY ON DEPOSIT_SLIP_TRN_XXXXX(DEPOSIT_CATEGORY);
CREATE INDEX DEPOSIT_SLIP_ID ON DEPOSIT_SLIP_TRN_XXXXX(DEPOSIT_SLIP_ID);
CREATE INDEX DEPOSIT_DATE ON DEPOSIT_SLIP_TRN_XXXXX(DEPOSIT_DATE);
CREATE INDEX INPUT_PDATE ON DEPOSIT_SLIP_TRN_XXXXX(INPUT_PDATE);
CREATE INDEX DEPOSIT_SLIP_ID ON DEPOSIT_LINE_TRN_XXXXX(DEPOSIT_SLIP_ID);
CREATE INDEX UPD_DATETM ON DEPOSIT_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CUSTOMER_CODE ON DEPOSIT_SLIP_TRN_HIST_XXXXX(CUSTOMER_CODE);
CREATE INDEX STOCK_PDATE ON EAD_SLIP_TRN_XXXXX(STOCK_PDATE);
CREATE INDEX SUPPLIER_SLIP_ID ON EAD_SLIP_TRN_XXXXX(SUPPLIER_SLIP_ID);
CREATE INDEX USER_ID ON EAD_SLIP_TRN_XXXXX(USER_ID);
CREATE INDEX EAD_SLIP_CATEGORY ON EAD_SLIP_TRN_XXXXX(EAD_SLIP_CATEGORY);
CREATE INDEX EAD_SLIP_ID ON EAD_SLIP_TRN_XXXXX(EAD_SLIP_ID);
CREATE INDEX EAD_DATE ON EAD_SLIP_TRN_XXXXX(EAD_DATE);
CREATE INDEX SALES_SLIP_ID ON EAD_SLIP_TRN_XXXXX(SALES_SLIP_ID);
CREATE INDEX UPD_DATETM ON EAD_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX EAD_SLIP_CATEGORY ON EAD_SLIP_TRN_HIST_XXXXX(EAD_SLIP_CATEGORY);
CREATE INDEX PRODUCT_CODE ON EAD_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX EAD_SLIP_ID ON EAD_LINE_TRN_XXXXX(EAD_SLIP_ID);
CREATE INDEX RACK_CODE ON EAD_LINE_TRN_XXXXX(RACK_CODE);
CREATE INDEX PRODUCT_CODE ON EAD_LINE_TRN_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX SUPPLIER_CODE ON APT_BALANCE_TRN_XXXXX(SUPPLIER_CODE);
CREATE INDEX APT_YM ON APT_BALANCE_TRN_XXXXX(APT_YM);
CREATE INDEX CUSTOMER_CODE ON ART_BALANCE_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX ART_YM ON ART_BALANCE_TRN_XXXXX(ART_YM);
CREATE INDEX RO_SLIP_ID ON SALES_SLIP_TRN_XXXXX(RO_SLIP_ID);
CREATE INDEX RECEPT_NO ON SALES_SLIP_TRN_XXXXX(RECEPT_NO);
CREATE INDEX CUSTOMER_CODE ON SALES_SLIP_TRN_XXXXX(CUSTOMER_CODE);
CREATE INDEX DELIVERY_DATE ON SALES_SLIP_TRN_XXXXX(DELIVERY_DATE);
CREATE INDEX DC_CATEGORY ON SALES_SLIP_TRN_XXXXX(DC_CATEGORY);
CREATE INDEX SALES_SLIP_ID ON SALES_SLIP_TRN_XXXXX(SALES_SLIP_ID);
CREATE INDEX BILL_ID ON SALES_SLIP_TRN_XXXXX(BILL_ID);
CREATE INDEX SALES_DATE ON SALES_SLIP_TRN_XXXXX(SALES_DATE);
CREATE INDEX SALES_YM ON SALES_SLIP_TRN_XXXXX(SALES_YM);
CREATE INDEX UPD_DATETM ON SALES_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX CUSTOMER_CODE ON SALES_SLIP_TRN_HIST_XXXXX(CUSTOMER_CODE);
CREATE INDEX PRODUCT_CODE ON SALES_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX RO_LINE_ID ON SALES_LINE_TRN_XXXXX(RO_LINE_ID);
CREATE INDEX PRODUCT_CODE ON SALES_LINE_TRN_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX SUPPLIER_CODE ON PO_SLIP_TRN_XXXXX(SUPPLIER_CODE);
CREATE INDEX DELIVERY_DATE ON PO_SLIP_TRN_XXXXX(DELIVERY_DATE);
CREATE INDEX PO_SLIP_ID ON PO_SLIP_TRN_XXXXX(PO_SLIP_ID);
CREATE INDEX PO_DATE ON PO_SLIP_TRN_XXXXX(PO_DATE);
CREATE INDEX UPD_DATETM ON PO_SLIP_TRN_HIST_XXXXX(UPD_DATETM);
CREATE INDEX SUPPLIER_CODE ON PO_SLIP_TRN_HIST_XXXXX(SUPPLIER_CODE);
CREATE INDEX DELIVERY_DATE ON PO_SLIP_TRN_HIST_XXXXX(DELIVERY_DATE);
CREATE INDEX REST_QUANTITY ON PO_LINE_TRN_XXXXX(REST_QUANTITY);
CREATE INDEX PRODUCT_CODE ON PO_LINE_TRN_XXXXX(PRODUCT_CODE);
CREATE INDEX PRODUCT_CODE ON PO_LINE_TRN_HIST_XXXXX(PRODUCT_CODE);
CREATE INDEX PARENT_ID ON DEPT_MST_XXXXX(PARENT_ID);
CREATE INDEX DEPT_ID ON DEPT_MST_XXXXX(DEPT_ID);
CREATE INDEX ZIP_CODE ON ZIP_MST_XXXXX(ZIP_CODE);
CREATE INDEX FUNC_NAME ON BATCH_LOG(FUNC_NAME);
CREATE INDEX DATETM ON BATCH_LOG(DATETM);
CREATE INDEX STATUS_CODE ON BATCH_LOG(STATUS_CODE);
CREATE INDEX ADJUST_NAME_ID ON CUSTOMER_SALES_TEMP_XXXXX(ADJUST_NAME_ID);
CREATE INDEX CUSTOMER_NAME ON CUSTOMER_SALES_TEMP_XXXXX(CUSTOMER_NAME);
CREATE INDEX CUSTOMER_TEL ON CUSTOMER_SALES_TEMP_XXXXX(CUSTOMER_TEL);
